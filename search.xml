<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ajax 介绍及使用</title>
    <url>/Ajax/</url>
    <content><![CDATA[<h3 id="一、Ajax简介"><a href="#一、Ajax简介" class="headerlink" title="一、Ajax简介"></a>一、Ajax简介</h3><ul>
<li><p>Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p>
</li>
<li><p>不是新的编程语言，而是一种使用现有标准的新方法。</p>
</li>
<li><p>可以使网页实现异步更新，意味着在不重新加载整个页面的情况下，对网页的某部分进行更新。</p>
</li>
<li><p>不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</p>
</li>
</ul>
<p>注意：ajax本身不支持跨域请求，需要在服务器端处理。</p>
<h3 id="二、Ajax-工作原理"><a href="#二、Ajax-工作原理" class="headerlink" title="二、Ajax 工作原理"></a>二、Ajax 工作原理</h3><img src="/Ajax/ajax.gif">
<h3 id="三、Ajax是基于现有的Internet标准"><a href="#三、Ajax是基于现有的Internet标准" class="headerlink" title="三、Ajax是基于现有的Internet标准"></a>三、Ajax是基于现有的Internet标准</h3><ul>
<li>XMLHttpRequest 对象 (异步的与服务器交换数据)</li>
<li>JavaScript/DOM (信息显示/交互)</li>
<li>CSS (给数据定义样式)</li>
<li>XML (作为转换数据的格式)</li>
</ul>
<blockquote>
<p>AJAX应用程序与浏览器和平台无关的！</p>
</blockquote>
<h3 id="四、Ajax-使用步骤"><a href="#四、Ajax-使用步骤" class="headerlink" title="四、Ajax 使用步骤"></a>四、Ajax 使用步骤</h3><h4 id="创建ajax对象"><a href="#创建ajax对象" class="headerlink" title="创建ajax对象"></a>创建ajax对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//为了兼容IE6</span></span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接服务器open方法(GET/POST，请求地址， 异步传输)</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>,  <span class="string">'data.txt'</span>,  <span class="literal">true</span>);<span class="comment">//第三个参数 false 为同步传输</span></span><br></pre></td></tr></table></figure>
<h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
<h4 id="接收返回数据"><a href="#接收返回数据" class="headerlink" title="接收返回数据"></a>接收返回数据</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** 每当readyState改变时，就会触发onreadystatechange事件</span></span><br><span class="line"><span class="comment">** readyState属性存储有XMLHttpRequest的状态信息</span></span><br><span class="line"><span class="comment">** 0 ：请求未初始化</span></span><br><span class="line"><span class="comment">** 1 ：服务器连接已建立</span></span><br><span class="line"><span class="comment">** 2 ：请求已接受</span></span><br><span class="line"><span class="comment">** 3 : 请求处理中</span></span><br><span class="line"><span class="comment">** 4 ：请求已完成，且相应就绪</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ** Http状态码</span></span><br><span class="line"><span class="comment">        ** 1xx ：信息展示</span></span><br><span class="line"><span class="comment">        ** 2xx ：成功</span></span><br><span class="line"><span class="comment">        ** 3xx ：重定向</span></span><br><span class="line"><span class="comment">        ** 4xx : 客户端错误</span></span><br><span class="line"><span class="comment">        ** 5xx ：服务器端错误</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">            success(xhr.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(failed)&#123;</span><br><span class="line">                failed(xhr.status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="五、GET-请求"><a href="#五、GET-请求" class="headerlink" title="五、GET 请求"></a>五、GET 请求</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">                xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(xhr.responseText);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">"GET"</span>, <span class="string">"https://hutaoao.github.io/ajax/test.txt?name=Henry&amp;password=123456"</span>, <span class="literal">true</span>);<span class="comment">//get带参数</span></span></span><br><span class="line"><span class="undefined">            xhr.send();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="六、POST-请求"><a href="#六、POST-请求" class="headerlink" title="六、POST 请求"></a>六、POST 请求</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">                xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(xhr.responseText);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">"POST"</span>, <span class="string">"test.php"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="javascript">            xhr.send(<span class="string">"name=Henry&amp;password=123456"</span>);<span class="comment">//post 传参数</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="七、url-服务器上的文件"><a href="#七、url-服务器上的文件" class="headerlink" title="七、url - 服务器上的文件"></a>七、url - 服务器上的文件</h3><p>open() 方法的 url 参数是服务器上文件的地址：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_test.html"</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。</p>
<h3 id="八、onreadystatechange-事件"><a href="#八、onreadystatechange-事件" class="headerlink" title="八、onreadystatechange 事件"></a>八、onreadystatechange 事件</h3><p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。</p>
<p>每当 readyState 改变时，就会触发 onreadystatechange 事件。</p>
<p>readyState 属性存有 XMLHttpRequest 的状态信息。</p>
<p>下面是 XMLHttpRequest 对象的三个重要的属性：</p>
<p><strong>onreadystatechange</strong></p>
<p>存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</p>
<p><strong>readyState</strong></p>
<ul>
<li>0: 请求未初始化</li>
<li>1: 服务器连接已建立</li>
<li>2: 请求已接收</li>
<li>3: 请求处理中</li>
<li>4: 请求已完成，且响应已就绪</li>
</ul>
<p><strong>status</strong></p>
<ul>
<li>200: “OK”</li>
<li>404: 未找到页面</li>
</ul>
<blockquote>
<p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪：<br>onreadystatechange 事件被触发 4 次（0 - 4）, 分别是： 0-1、1-2、2-3、3-4，对应着 readyState 的每个变化。</p>
</blockquote>
<h3 id="九、封装使用"><a href="#九、封装使用" class="headerlink" title="九、封装使用"></a>九、封装使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    ** 封装好的 ajax 函数</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> params = formsParams(options.data);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span></span><br><span class="line"><span class="javascript">            xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 连接、发送</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(options.type == <span class="string">"GET"</span>)&#123;</span></span><br><span class="line"><span class="javascript">            xhr.open(options.type,options.url + <span class="string">"?"</span>+ params,options.async);</span></span><br><span class="line"><span class="javascript">            xhr.send(<span class="literal">null</span>)</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(options.type == <span class="string">"POST"</span>)&#123;</span></span><br><span class="line"><span class="undefined">            xhr.open(options.type,options.url,options.async);</span></span><br><span class="line"><span class="javascript">            xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="undefined">            xhr.send(params);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//接收返回数据</span></span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="undefined">                    options.success(xhr.responseText);</span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="undefined">                    options.failed(xhr.status);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">formsParams</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> arr = [];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">in</span> data)&#123;</span></span><br><span class="line"><span class="javascript">                arr.push(prop + <span class="string">"="</span> + data[prop]);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr.join(<span class="string">"&amp;"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">        ajax(&#123;</span></span><br><span class="line"><span class="javascript">            url : <span class="string">"https://hutaoao.github.io/images/Ajax/test.txt"</span>,  <span class="comment">// url----&gt;地址</span></span></span><br><span class="line"><span class="javascript">            type : <span class="string">"GET"</span>,   <span class="comment">// type ---&gt; 请求方式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">async</span> : <span class="literal">true</span>,   <span class="comment">// async----&gt; 同步：false，异步：true</span></span></span><br><span class="line"><span class="javascript">            data : &#123;        <span class="comment">//传入信息</span></span></span><br><span class="line"><span class="javascript">                name : <span class="string">"张三"</span>,</span></span><br><span class="line"><span class="undefined">                age : 18</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;   <span class="comment">//返回接受信息</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.write(data);</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            failed:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                alert(data);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie 介绍及使用</title>
    <url>/Cookie/</url>
    <content><![CDATA[<p>Cookie 用于存储 web 页面的用户信息。</p>
<h3 id="什么是-Cookie？"><a href="#什么是-Cookie？" class="headerlink" title="什么是 Cookie？"></a>什么是 Cookie？</h3><p>Cookie 是一些数据, 存储于你电脑上的文本文件中。</p>
<p>当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。</p>
<p>Cookie 的作用就是用于解决 <strong>“如何记录客户端的用户信息”</strong>:</p>
<ul>
<li>当用户访问 web 页面时，他的名字可以记录在 cookie 中。</li>
<li>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。</li>
</ul>
<p>Cookie 以键/值对形式存储，如下所示:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">username=John Doe</span><br></pre></td></tr></table></figure>
<p>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中。服务端通过这种方式来获取用户的信息。</p>
<h3 id="创建Cookie"><a href="#创建Cookie" class="headerlink" title="创建Cookie"></a>创建Cookie</h3><p>JavaScript 可以使用 <strong>document.cookie 属性来创建 、读取、及删除 cookie</strong>。</p>
<p>JavaScript 中，创建 cookie 如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Doe"</span>;</span><br></pre></td></tr></table></figure>
<p>您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT"</span>;</span><br></pre></td></tr></table></figure>
<p>您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="读取-Cookie"><a href="#读取-Cookie" class="headerlink" title="读取 Cookie"></a>读取 Cookie</h3><p>在 JavaScript 中, 可以使用以下代码来读取 cookie：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>document.cookie 将以<strong>字符串</strong>的方式返回所有的 cookie，类型格式： cookie1=value; cookie2=value; cookie3=value;</p>
</blockquote>
<h3 id="修改-Cookie"><a href="#修改-Cookie" class="headerlink" title="修改 Cookie"></a>修改 Cookie</h3><p>在 JavaScript 中，修改 cookie 类似于创建 cookie，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Smith; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/"</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>旧的 cookie 将被覆盖。</p>
</blockquote>
<h3 id="删除-Cookie"><a href="#删除-Cookie" class="headerlink" title="删除 Cookie"></a>删除 Cookie</h3><p>删除 cookie 非常简单。您只需要设置 expires 参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"username=; expires=Thu, 01 Jan 1970 00:00:00 GMT"</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，当您删除时不必指定 cookie 的值。</p>
</blockquote>
<h3 id="Cookie-封装使用"><a href="#Cookie-封装使用" class="headerlink" title="Cookie 封装使用"></a>Cookie 封装使用</h3><h4 id="设置-cookie"><a href="#设置-cookie" class="headerlink" title="设置 cookie"></a>设置 cookie</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">key, value, day</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    d.setTime(d.getTime() + (day * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>));</span><br><span class="line">    <span class="keyword">let</span> expires = <span class="string">"expires="</span> + d.toGMTString();</span><br><span class="line">    <span class="built_in">document</span>.cookie = key + <span class="string">"="</span> + value + <span class="string">";"</span> + expires;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setCookie(<span class="string">'name'</span>, <span class="string">'张三'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h4 id="获取-cookie"><a href="#获取-cookie" class="headerlink" title="获取 cookie"></a>获取 cookie</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = key + <span class="string">"="</span>;</span><br><span class="line">    <span class="keyword">let</span> ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ca.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> c = ca[i].trim();</span><br><span class="line">        <span class="keyword">if</span> (c.indexOf(name) == <span class="number">0</span>) <span class="keyword">return</span> c.substring(name.length, c.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(getCookie(<span class="string">'name'</span>));</span><br></pre></td></tr></table></figure>
<h4 id="删除-cookie"><a href="#删除-cookie" class="headerlink" title="删除 cookie"></a>删除 cookie</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteCookie</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.cookie = key + <span class="string">"='';expires=Thu, 01 Jan 1970 00:00:00 GMT"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deleteCookie(<span class="string">'name'</span>)；</span><br></pre></td></tr></table></figure>
<h4 id="检测-cookie"><a href="#检测-cookie" class="headerlink" title="检测 cookie"></a>检测 cookie</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检测某个键是否曾在，返回true或flase</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCookie</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = getCookie(key);</span><br><span class="line">    <span class="keyword">if</span> (name != <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(checkCookie(<span class="string">'name'</span>));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>axios.creat(config)</title>
    <url>/axios-creat/</url>
    <content><![CDATA[<p>当项目中请求多个 <code>apis</code> 时，且有可能每个 <code>apis</code> 里面配置都不同（含拦截器内容不同），此时会产生叠加效果，此时需要使用 <em>axios.creat(config)</em> 来创建示例分别配置。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>如下图：该项目中请求了 Java、Php 等不同的接口，每个服务端接口配置可能不同</p>
<img src="/axios-creat/1.jpg">
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>创建实例： axios.create()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.create(&#123;</span><br><span class="line">    baseURL: baseUrl,<span class="comment">//请求基地址</span></span><br><span class="line">    timeout: <span class="number">3000</span>,<span class="comment">//请求超时时长</span></span><br><span class="line">    url: <span class="string">'/url'</span>,请求路径</span><br><span class="line">    method: <span class="string">'get,post,put,patch,delete'</span>,<span class="comment">//请求方法</span></span><br><span class="line">    headers: &#123;</span><br><span class="line">        token: <span class="string">''</span></span><br><span class="line">    &#125;,<span class="comment">//请求头</span></span><br><span class="line">    params: &#123;&#125;,<span class="comment">//请求参数拼接在url上面</span></span><br><span class="line">    data: &#123;&#125;,<span class="comment">//请求参数放请求体里</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>参数配置位置</li>
</ul>
<ol>
<li>全局配置（<strong>优先级最低</strong>）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.default.timeout = <span class="number">3000</span></span><br><span class="line">axios.default.baseURL = <span class="number">3000</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>实例配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = axios.create()</span><br><span class="line">instance.default.timeout = <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>axios请求时配置（<strong>优先级最高</strong>）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">instance.get(<span class="string">'/url'</span>, &#123;</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="实际开发"><a href="#实际开发" class="headerlink" title="实际开发"></a>实际开发</h3><ul>
<li>多个apis</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">const</span> $http = http.create();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> (process.env.REACT_APP_SECRET_CODE === <span class="string">'dev'</span>) &#123;<span class="comment">//测试环境</span></span><br><span class="line">    url = <span class="string">'http://test.cn'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.REACT_APP_SECRET_CODE === <span class="string">'pre'</span>) &#123;<span class="comment">//预发环境</span></span><br><span class="line">    url = <span class="string">'http://pre.cn'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.REACT_APP_SECRET_CODE === <span class="string">'prd'</span>) &#123;<span class="comment">//线上环境</span></span><br><span class="line">    url = <span class="string">'http://prd.cn'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&gt; 这里我项目中使用到了环境变量 区分不同环境</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> URL = process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'/phpApi'</span> : url;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">$http.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span><br><span class="line">    <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line">    <span class="keyword">const</span> token = sessionStorage.getItem(<span class="string">'jwtToken'</span>);</span><br><span class="line">    token &amp;&amp; (config.headers.jwtToken = token);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.error(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> unifiedLogin = <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> $http.post(<span class="string">`<span class="subst">$&#123;URL&#125;</span>/login`</span>, params)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>其它</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://192.168.X.X:8080'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance2 = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://192.168.X.X:8081'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance.get(<span class="string">'/url'</span>,&#123;</span><br><span class="line">    timeout: <span class="number">2000</span></span><br><span class="line">&#125;).then()</span><br><span class="line"></span><br><span class="line">instance2.get(<span class="string">'/url'</span>,&#123;</span><br><span class="line">    timeout: <span class="number">3000</span></span><br><span class="line">&#125;).then()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Axios</category>
      </categories>
      <tags>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数组方法整理 - 一看就懂</title>
    <url>/array-methods/</url>
    <content><![CDATA[<h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>向数组的末尾添加一个或更多元素，并返回数组新的长度。（改变了原数组）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">arr.push(<span class="string">'dd'</span>, <span class="string">'ee'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 'a', 'b', 'c', 'dd', 'ee' ]</span></span><br></pre></td></tr></table></figure>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>删除数组的最后一个元素并返回删除的元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 'a', 'b', 'c', 'd' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);<span class="comment">//e</span></span><br></pre></td></tr></table></figure>
<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>向数组的开头添加一个或更多元素，并返回新数组的长度。</p>
<ul>
<li>注意：当使用多个参数调用unshift()时他得行为令人惊讶。参数是一次性插入的（就像splice()方法）而非一次一个地插入。这意味着最终的数组中插入的元素的顺序和他们在参数中的顺序一致。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">arr.unshift(<span class="string">'dd'</span>, <span class="string">'ee'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 'dd', 'ee', 'a', 'b', 'c' ]</span></span><br></pre></td></tr></table></figure>
<h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p>删除并返回数组的第一个元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 'b', 'c', 'd', 'e' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);<span class="comment">//a</span></span><br></pre></td></tr></table></figure>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>连接两个或更多的数组，并返回结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr = arr1.concat(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 'a', 'b', 'c', 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>方法将数组中所有元素都转化为字符串并连接在一起，返回最后生成的字符串,不改变原数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.join();</span><br><span class="line"><span class="keyword">let</span> c = b.split(<span class="string">'2'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//[ '1,', ',3' ]</span></span><br></pre></td></tr></table></figure>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>方法将数组中的元素颠倒顺序，返回逆序的数组，改变了原数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.reverse().join();</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 2, 'b', 'a', 3, 1 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//2,b,a,3,1</span></span><br></pre></td></tr></table></figure>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>方法将数组中的元素排序并返回排序后的数组。改变原数组。不带参数时数组元素以字母表顺序排序，按照其他方式而非字母表顺序进行数组排序，必须传递一个比较函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 'a', 'b', 'c' ]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">33</span>, <span class="number">4</span>, <span class="number">1111</span>, <span class="number">222</span>];</span><br><span class="line">arr2.sort();<span class="comment">//字母表顺序</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[ 1111, 222, 33, 4 ]</span></span><br><span class="line">arr2.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[ 4, 33, 222, 1111 ]</span></span><br><span class="line">arr2.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[ 1111, 222, 33, 4 ]</span></span><br></pre></td></tr></table></figure>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>方法返回一指定数组的一个片段或子数组（不改变原数组）。他的两个参数分别指定了片段的开始和结束位置。返回的数组包含第一个参数指定的位置和所有到但不含第二个参数指定的位置之间的所有数组元素。</p>
<ul>
<li><p>如果只指定一个参数，返回的数组将包含从开始位置到数组结尾的所有元素。</p>
</li>
<li><p>如果参数出现负数，他表示相对于数组中最后一个元素的位置。例如，参数-1指定了最后一个元素，而-3指定了倒数第三个元素。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[ 1, 2, 3 ]</span></span><br><span class="line"><span class="keyword">let</span> b = arr.slice(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//[ 4, 5 ]</span></span><br><span class="line"><span class="keyword">let</span> c = arr.slice(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//[ 2, 3, 4 ]</span></span><br><span class="line"><span class="keyword">let</span> d = arr.slice(<span class="number">-3</span>, <span class="number">-2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//[ 3 ]</span></span><br></pre></td></tr></table></figure>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p>方法是在数组中插入或删除元素的通用方法（改变原数组）。</p>
<ul>
<li><p>第一个参数指定了插入和（或）删除的起始位置。第二个参数指定了应该从数组中删除的元素的个数。</p>
</li>
<li><p>如果省略第二个参数，从起始点开始到数组结尾的所有元素都将被删除。</p>
</li>
<li><p>splice()返回一个由删除元素组成的数组，或者如果没有删除元素就返回一个空数组。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.splice(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 1, 2, 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[ 5, 6, 7, 8 ]</span></span><br><span class="line"><span class="keyword">let</span> b = arr.splice(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 1, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//[ 2, 3 ]</span></span><br><span class="line"><span class="comment">//splice()的前两个参数指定了需要删除的数组元素。紧随其后的任意个参数指定了需要插入到数组中的元素，从第一个参数指定的位置开始插入。</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> c = arr2.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'a'</span>,<span class="string">'b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[ 1, 2, 'a', 'b', 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//[]</span></span><br><span class="line"><span class="keyword">let</span> d = arr2.splice(<span class="number">2</span>,<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[ 1, 2, [ 1, 2 ], 3, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//[ 'a', 'b' ]</span></span><br></pre></td></tr></table></figure>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>（对象方法）针对数组，该方法将其每个元素转化为字符串（如有必要将调用元素的toString()方法）并且输出逗号分隔的字符串列表。</p>
<ul>
<li>注意：这里与不使用任何参数调用join()方法返回的字符串是一样的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.toString();</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure>
<h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h3><p>从数组的指定位置拷贝元素到数组的另一个指定位置中。改变原数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// array.copyWithin(target, start, end).</span></span><br><span class="line"><span class="comment">// target   必需。复制到指定目标索引位置。</span></span><br><span class="line"><span class="comment">// start    可选。元素复制的起始位置。</span></span><br><span class="line"><span class="comment">// end  可选。停止复制的索引位置 (默认为 array.length)。如果为负值，表示倒数。</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.copyWithin(<span class="number">2</span>, <span class="number">1</span>);<span class="comment">//复制数组前五个元素到第三第四第五的位置上</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [ 'a', 'b', 'b', 'c', 'd' ]  此时原数组已经改变</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.copyWithin(<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>);<span class="comment">//复制数组的前面两个元素(不包括第三个元素)到第三第四和第五个位置上：</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[ 'a', 'b', 'a', 'b', 'd' ]   此时原数组已经改变</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.copyWithin(<span class="number">1</span>, <span class="number">0</span>, <span class="number">-3</span>);<span class="comment">//复制数组的 0 到 1（-3倒着数，不包括-3）元素到第三的位置</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">//[ 'a', 'a', 'b', 'b', 'd' ]   此时原数组已经改变</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>常用五大浏览器及浏览器内核</title>
    <url>/browser-kernel/</url>
    <content><![CDATA[<h3 id="一、常见浏览器内核介绍"><a href="#一、常见浏览器内核介绍" class="headerlink" title="一、常见浏览器内核介绍"></a>一、常见浏览器内核介绍</h3><p>浏览器是网页运行的平台，常见的浏览器有 IE 、火狐（Firefox）,谷歌（Chrome）,Safari和Opera等，我们平时称为五大浏览器，第六个是Edge浏览器，是微软改进IE新出的内置浏览器</p>
<img src="/browser-kernel/1.jpg">
<p>浏览器内核理解：</p>
<p>浏览器内核又可以分成俩部分：<strong>渲染引擎</strong>（layout engineer 或者 Rendering Engine）和<strong>JS引擎</strong>。</p>
<ul>
<li><p>渲染引擎：它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入css等）。以及计算网页的显示·方式，然后会输出至显示器或打印机。浏览器内核的不同对于网页的语法解释会有不同，所以渲染的效果也不同。</p>
</li>
<li><p>JS 引擎：则是解析Javascript语言。执行javascript语言来实现网页的动态效果</p>
</li>
</ul>
<h4 id="（一）IE"><a href="#（一）IE" class="headerlink" title="（一）IE"></a>（一）IE</h4><p>IE是<strong>Trident</strong>内核,国内很多双核浏览器其中之一便是Trident,美其名曰“兼容模式”Window发布后，IE将其内置浏览器命名为Edge,Edge最显著的特点就是新内核EdgeHTML。</p>
<h4 id="（二）Firefox-火狐"><a href="#（二）Firefox-火狐" class="headerlink" title="（二）Firefox(火狐)"></a>（二）Firefox(火狐)</h4><p><strong>Gecko</strong>内核，Gecko的特点是代码完全公开，因此开发程度很高，全世界的程序员都可以为其编写代码，增加功能，可惜这几年没落了，比如打开速度慢，升级频繁，猪一样的队友flash，神一样的对手chrome</p>
<h4 id="（三）Safari"><a href="#（三）Safari" class="headerlink" title="（三）Safari"></a>（三）Safari</h4><p>采用的是大名鼎鼎的<strong>WebKi</strong>t。<br>现在很多人错误的把webkit叫做chrome（即使chrome内核已经是blink，之前采用的是webkit内核），苹果感觉像是被别人抢了媳妇，都哭晕在厕所了。</p>
<h4 id="（四）chrome-谷歌"><a href="#（四）chrome-谷歌" class="headerlink" title="（四）chrome(谷歌)"></a>（四）chrome(谷歌)</h4><p><strong>Blink</strong>内核,在Chromium项目中研发Blink内核渲染引擎（即浏览器核心），内置于Chrome浏览器之中，Blink其实是Webkit的分支，大部分国产浏览器最新版用Blink内核</p>
<h4 id="（五）Opera"><a href="#（五）Opera" class="headerlink" title="（五）Opera"></a>（五）Opera</h4><p>Presto内核(已经废弃)是挪威产浏览器opera的“前任”内核，为何说是“前任”，因为最新的opera浏览器早已抛弃投入到谷歌的怀抱了，采用<strong>Blink</strong>。</p>
<h3 id="三、扩展"><a href="#三、扩展" class="headerlink" title="三、扩展"></a>三、扩展</h3><p>移动端的浏览器内核主要说的是系统内置的浏览器内核。</p>
<p><strong>Android</strong>手机而言，使用率最高的就是<strong>webkit</strong>内核，大部分国产浏览器宣称的自己的内核，基本上也是属于webkit二次开发。</p>
<p>IOS以及WP7平台上，由于系统原因，系统大部分自带浏览器内核，一般是<strong>Safari</strong>或者IE内核<strong>Trident</strong>。</p>
<h3 id="二、pc端-浏览器-市场占有率"><a href="#二、pc端-浏览器-市场占有率" class="headerlink" title="二、pc端 浏览器 市场占有率"></a>二、pc端 浏览器 市场占有率</h3><ul>
<li><p>Google的Chrome浏览器排名第一，其市场份额为45.74%；</p>
</li>
<li><p>微软的IE浏览器排名第二，其份额为22.95%；（其中，IE9的份额为8.19%，IE8的份额为6.86%，IE11的份额为5.31%，IE7的份额为2.58%）</p>
</li>
<li><p>QQ浏览器排名第三，其份额为6.70%；</p>
</li>
<li><p>2345加速浏览器排名第四，其份额为6.06%；</p>
</li>
<li><p>搜狗高速浏览器排名第五，其份额为4.22%；</p>
</li>
<li><p>火狐浏览器排名第六，其份额为2.32%；</p>
</li>
<li><p>其他浏览器的市场份额合计为12.00%。</p>
</li>
</ul>
<img src="/browser-kernel/2.png">
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>IE</tag>
      </tags>
  </entry>
  <entry>
    <title>W3C 标准盒模型和 IE 盒模型</title>
    <url>/box-model/</url>
    <content><![CDATA[<p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p>
<ul>
<li>Margin(外边距) - 清除边框外的区域，外边距是透明的。</li>
<li>Border(边框) - 围绕在内边距和内容外的边框。</li>
<li>Padding(内边距) - 清除内容周围的区域，内边距是透明的。</li>
<li>Content(内容) - 盒子的内容，显示文本和图像。</li>
</ul>
<h3 id="W3C-标准盒模型"><a href="#W3C-标准盒模型" class="headerlink" title="W3C 标准盒模型"></a>W3C 标准盒模型</h3><img src="/box-model/1.jpg">
<p>盒子的高宽是由盒子的内容区仅由 width, height 决定的，不包含边框，内外边距。</p>
<h3 id="IE-盒模型"><a href="#IE-盒模型" class="headerlink" title="IE 盒模型"></a>IE 盒模型</h3><img src="/box-model/2.jpg">
<p>在 IE 盒模型中，盒子宽高不仅包含了元素的宽高，而且包含了元素的边框以及内边距。</p>
<p>所以在同样的设置下，IE 下的元素会看起来相对于标准盒子来的小，如果你想要标准盒子变为像 IE 盒模型，可以对元素样式进行设置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    box-sizing: border-box;      //IE 盒模型效果</span><br><span class="line">    box-sizing: content-box;     //默认值，标准盒模型效果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>Html</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中break continue和return的用法</title>
    <url>/break-continue-return/</url>
    <content><![CDATA[<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>跳出代码块（循环），使用于循环和 switch 等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当 i=6 的时候，直接退出fo循环，这个循环将不再被执行！</span></span><br></pre></td></tr></table></figure>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>跳过循环中的一个迭代，进入下一个迭代，用于循环的代码块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">//1 2 3 4 5 7 8 9 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当 i=6 的时候，直接跳出本次for循环，然后继续循环中的下一个迭代。。</span></span><br></pre></td></tr></table></figure>
<h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>终止函数的执行并返回函数的值，应用范围只能出现在函数体内。</p>
<p>我们通常 <strong>return false 来阻止提交表单或者继续执行下面的代码，通俗的来说就是阻止执行默认的行为。</strong></p>
<blockquote>
<p>总之：return false 只在当前函数有效，不会影响其他外部函数的执行。</p>
</blockquote>
<p>1、返回控制与函数结果</p>
<p>语法为：return 表达式;</p>
<p>语句结束函数执行，返回调用函数，而且把表达式的值作为函数的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(time &lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'0'</span>+time;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(format(<span class="number">5</span>));<span class="comment">//05</span></span><br></pre></td></tr></table></figure>
<p>2、返回控制</p>
<p>无函数结果，语法为：return;</p>
<p>在大多数情况下,为事件处理函数返回false，可以防止默认的事件行为；我们也常用return false来阻止提交表单或者继续执行下面的代码。</p>
<p><strong>Return False 就相当于终止符，Return True 就相当于执行符。 返回的false和true通常用在需要进行布尔类型判断时。</strong></p>
<p>比如你单击一个链接，除了触发你的onclick事件（如果你指定的话）以外还要触发一个默认事件就是执行页面的跳转。所以如果你想取消对象的默认动作就可以return false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"https://www.baidu.com"</span> onclick=<span class="string">" return fun()"</span>&gt;点击&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    function fun()&#123;</span></span><br><span class="line"><span class="string">        location.href="</span>https:<span class="comment">//www.sina.com.cn";</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/单击超链接后会跳转到新浪而不会跳转到百度，如果没有renturn false 则会跳转到百度</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    a();</span><br><span class="line">    b();</span><br><span class="line">    c();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//即使a函数返回return false 阻止提交了，但是不影响  b() 以及 c() 函数的执行。</span></span><br><span class="line"><span class="comment">//return false 对于 Test() 函数来说，只是相当于返回值。而不能阻止 Test() 函数执行。</span></span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<ul>
<li><p>return true；返回正常的处理结果；终止处理。</p>
</li>
<li><p>return false；返回错误的处理结果；终止处理；阻止提交表单；阻止执行默认的行为。</p>
</li>
<li><p>return；把控制权返回给页面。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解JS闭包</title>
    <url>/closure/</url>
    <content><![CDATA[<p><strong>闭包(closure)</strong>是Javacript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>
<h3 id="一、变量的作用域"><a href="#一、变量的作用域" class="headerlink" title="一、变量的作用域"></a>一、变量的作用域</h3><p>要理解闭包，首先必须理解Javascript特殊的变量作用域。</p>
<p>变量的作用域无非就是两种：<strong>全局变量和局部变量</strong>。</p>
<p>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line">f1();　　<span class="comment">//999</span></span><br></pre></td></tr></table></figure>
<p>另一方面，在函数外部自然无法读取函数内的局部变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n);　　<span class="comment">//error</span></span><br></pre></td></tr></table></figure>
<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　n = <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(n);　　<span class="comment">//999</span></span><br></pre></td></tr></table></figure>
<h3 id="二、如何从外部读取局部变量？"><a href="#二、如何从外部读取局部变量？" class="headerlink" title="二、如何从外部读取局部变量？"></a>二、如何从外部读取局部变量？</h3><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p>
<p>那就是在函数的内部，再定义一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　n = <span class="number">999</span>;</span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(n);　　<span class="comment">//999</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量对f1就是不可见的。这就是javascript语言特有的‘链式作用域’结构(chain scope)，子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>
<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　n = <span class="number">999</span>;</span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(n);</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = f1();　　<span class="comment">//返回的是f2函数</span></span><br><span class="line">result();　　<span class="comment">//999</span></span><br></pre></td></tr></table></figure>
<h3 id="三、闭包的概念"><a href="#三、闭包的概念" class="headerlink" title="三、闭包的概念"></a>三、闭包的概念</h3><p>上一节代码中的f2函数，就是闭包。</p>
<p><strong>闭包就是能够读取其他函数内部变量的函数，函数没有被释放，整条作用域链上的局部变量都将得到保留</strong>。</p>
<p>由于在javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成‘<strong>定义在一个函数内部的函数</strong>’。</p>
<p>所以，在本质上，闭包就是将函数内部和函数外部连接的一座桥梁。</p>
<h3 id="四、闭包的用途"><a href="#四、闭包的用途" class="headerlink" title="四、闭包的用途"></a>四、闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以<strong>读取函数内部的变量</strong>，另一个就是<strong>让这些变量的值始终保持在内存中</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line">　　nAdd = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　n += <span class="number">1</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(n);</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = f1();</span><br><span class="line">result();　　<span class="comment">//从函数外部通过闭包f2获取到函数f1内部局部变量的值</span></span><br><span class="line">nAdd();　　<span class="comment">//从函数外部通过闭包修改局部变量n的值</span></span><br><span class="line">result();　　<span class="comment">//再次通过闭包f2获取到函数f1内部局部变量的值</span></span><br></pre></td></tr></table></figure>
<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n 一直保存在内存中，并没有在f1调用后被自动清除。</p>
<p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，不会再调用结束后，被垃圾回收机制(garbage collection)回收。</p>
<p>这段代码中另一个值得注意的地方，就是‘nAdd=function(){n+=1}’这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数(anonymous function)，而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<h3 id="五、经典案例"><a href="#五、经典案例" class="headerlink" title="五、经典案例"></a>五、经典案例</h3><p>计数器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>闭包实例 - 计数器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>JavaScript 闭包<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用局部变量计数。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"myFunction()"</span>&gt;</span>计数！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*const add = (function () &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> counter = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                counter += 1;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> counter;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> fn = add();</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = fn();</span></span><br><span class="line"><span class="undefined">        &#125;*/</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> counter = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                counter += 1;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> counter;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = add();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>例子解释</strong></p>
<p>变量 add 的赋值是自执行函数的返回值。</p>
<p>这个自执行函数只运行一次。它设置计数器为零（0），并返回函数表达式。</p>
<p>这样 add 成为了函数。最“精彩的”部分是它能够访问父作用域中的计数器。</p>
<p>这被称为 JavaScript 闭包。它使函数拥有“私有”变量成为可能。</p>
<p>计数器被这个匿名函数的作用域保护，并且只能使用 add 函数来修改。</p>
<p>闭包指的是有权访问父作用域的函数，即使在父函数关闭之后。</p>
<h3 id="六、使用闭包的注意点"><a href="#六、使用闭包的注意点" class="headerlink" title="六、使用闭包的注意点"></a>六、使用闭包的注意点</h3><ol>
<li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法时，在退出函数之前，将不使用的局部变量全部删除。</p>
</li>
<li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象(object)使用，把闭包当作它的公用方法，把内部变量当作它的私有属性，这时一定要小心，不要随便改变父函数内部变量的值。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>时间的各种转换+倒计时</title>
    <url>/format-time/</url>
    <content><![CDATA[<h3 id="js去除时分秒"><a href="#js去除时分秒" class="headerlink" title="js去除时分秒"></a>js去除时分秒</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var time_str= &apos;2014-9-19 13:19:21&apos;;</span><br><span class="line">var t = time_str.substr(0,10);</span><br><span class="line">alert(t);</span><br></pre></td></tr></table></figure>
<h3 id="获取当前时间，格式YYYY-MM-DD"><a href="#获取当前时间，格式YYYY-MM-DD" class="headerlink" title="获取当前时间，格式YYYY-MM-DD"></a>获取当前时间，格式YYYY-MM-DD</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getNowFormatDate(date) &#123;</span><br><span class="line">    var seperator1 = &quot;-&quot;;</span><br><span class="line">    var year = date.getFullYear();</span><br><span class="line">    var month = date.getMonth() + 1;</span><br><span class="line">    var strDate = date.getDate();</span><br><span class="line">    if (month &gt;= 1 &amp;&amp; month &lt;= 9) &#123;</span><br><span class="line">       month = &quot;0&quot; + month;</span><br><span class="line">    &#125;</span><br><span class="line">    if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) &#123;</span><br><span class="line">        strDate = &quot;0&quot; + strDate;</span><br><span class="line">    &#125;</span><br><span class="line">    var currentdate = year + seperator1 + month + seperator1 + strDate;</span><br><span class="line">    return currentdate;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="时间戳转换成”yyyy–mm–dd”格式"><a href="#时间戳转换成”yyyy–mm–dd”格式" class="headerlink" title="时间戳转换成”yyyy–mm–dd”格式"></a>时间戳转换成”yyyy–mm–dd”格式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fmtDate(timestamp) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">1900</span> + date.getYear();</span><br><span class="line">    <span class="keyword">var</span> m = <span class="string">"0"</span> + (date.getMonth() + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> d = <span class="string">"0"</span> + date.getDate();</span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">"-"</span> + m.substring(m.length - <span class="number">2</span>, m.length) + <span class="string">"-"</span> + d.substring(d.length - <span class="number">2</span>, d.length);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="毫秒转-X分X秒"><a href="#毫秒转-X分X秒" class="headerlink" title="毫秒转 X分X秒"></a>毫秒转 X分X秒</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">counttime(rowtime) &#123;</span><br><span class="line">    <span class="keyword">var</span> second = <span class="built_in">Math</span>.floor(rowtime / <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">var</span> min = <span class="built_in">Math</span>.floor(<span class="built_in">parseInt</span>(second) / <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">var</span> second = <span class="built_in">parseInt</span>(second) % <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> min + <span class="string">'分'</span> + second + <span class="string">'秒'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">countDown()&#123;</span><br><span class="line">    <span class="keyword">let</span> maxtime = <span class="number">30</span> * <span class="number">60</span>; <span class="comment">//30分钟</span></span><br><span class="line">    <span class="keyword">let</span> minutes = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> seconds = <span class="string">''</span>;</span><br><span class="line">    --maxtime;</span><br><span class="line">    <span class="keyword">this</span>.timer2 = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxtime &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            minutes = <span class="built_in">Math</span>.floor(maxtime / <span class="number">60</span>);</span><br><span class="line">            seconds = <span class="built_in">Math</span>.floor(maxtime % <span class="number">60</span>);</span><br><span class="line">            --maxtime;</span><br><span class="line">            <span class="keyword">if</span>(seconds &lt; <span class="number">10</span>)&#123;</span><br><span class="line">                seconds = <span class="string">'0'</span> + seconds;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.timeRemaining = minutes + <span class="string">"分"</span> + seconds + <span class="string">"秒"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            clearInterval(<span class="keyword">this</span>.timer2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的事件委托</title>
    <url>/event-delegate/</url>
    <content><![CDATA[<h3 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h3><p>把目标元素的事件委托给父元素，利用了<strong><a href="https://hutaoao.github.io/JavascriptEvent/" title="事件冒泡">事件冒泡</a></strong>的原理</p>
<h3 id="为什么要使用事件委托"><a href="#为什么要使用事件委托" class="headerlink" title="为什么要使用事件委托"></a>为什么要使用事件委托</h3><ul>
<li><p>绑定事件太多，浏览器占用内存变大，严重影响性能</p>
</li>
<li><p>Ajax出现，局部刷新盛行，每次加载完，都要重新绑定事件</p>
</li>
<li><p>部分浏览器移除元素时，绑定的事件没有被及时移除，导致内存泄漏，严重影响性能</p>
</li>
<li><p>Ajax中重复绑定，导致代码耦合性过大，影响后期维护</p>
</li>
</ul>
<h3 id="事件委托的好处"><a href="#事件委托的好处" class="headerlink" title="事件委托的好处"></a>事件委托的好处</h3><ul>
<li><p>事件委托技术可以避免对每个字元素添加事件监听器，减少操作DOM节点的次数，从而减少浏览器的重绘和重排，提高代码的性能。</p>
</li>
<li><p>使用事件委托，只有父元素与DOM存在交互，其他的操作都是在JS虚拟内存中完成的，这样就大大提高了性能。</p>
</li>
</ul>
<h3 id="事件委托的应用场景"><a href="#事件委托的应用场景" class="headerlink" title="事件委托的应用场景"></a>事件委托的应用场景</h3><p>获取一个列表ul下面的很多li标签里面内容，首先想到的办法就是给每个li标签绑定事件，这样过于繁琐。现在我们利用事件委托，给父元素ul标签绑定事件，通过事件代理去找到要点击的li，获取其内容。</p>
<h3 id="事件委托三部曲："><a href="#事件委托三部曲：" class="headerlink" title="事件委托三部曲："></a>事件委托三部曲：</h3><p>第一步：给父元素绑定事件<br>给元素ul添加绑定事件，通过addEventListener为点击事件click添加绑定</p>
<p>第二步：监听子元素的冒泡事件<br>这里默认是冒泡，点击子元素li会向上冒泡</p>
<p>第三步：找到是哪个子元素的事件<br>通过匿名回调函数的参数e用来接收事件对象，通过target获取触发事件的目标</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>使用原生JS实现事件委托</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件委托<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">line-height</span>: <span class="number">30px</span>;<span class="attribute">text-align</span>: center;&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第一个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第三个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第四个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第五个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oUl = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="javascript">        oUl.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e.target.innerHTML);</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>iNotify.js 实现浏览器的title闪烁滚动声音提示，弹出通知</title>
    <url>/iNotify/</url>
    <content><![CDATA[<p>JS 实现浏览器的 title 闪烁、滚动、声音提示、chrome、Firefox、Safari等系统弹出通知。它没有依赖，压缩只有只有4.66kb(gzipped: 1.70kb)，<a href="https://wangchujiang.com/iNotify/" target="_blank" rel="noopener">demo 实例预览</a>。<br><a id="more"></a></p>
<img src="/iNotify/1.png">
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># v2.x</span><br><span class="line">$ npm install @wcjiang/notify --save</span><br><span class="line"># v1.x </span><br><span class="line">$ npm install title-notify --save</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Notify <span class="keyword">from</span> <span class="string">'@wcjiang/notify'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> notify = <span class="keyword">new</span> Notify(&#123;</span><br><span class="line">  message: <span class="string">'有消息了。'</span>, <span class="comment">// 标题</span></span><br><span class="line">  effect: <span class="string">'flash'</span>, <span class="comment">// flash | scroll 闪烁还是滚动</span></span><br><span class="line">  openurl:<span class="string">'https://github.com/jaywcjlove/iNotify'</span>, <span class="comment">// 点击弹窗打开连接地址</span></span><br><span class="line">  onclick: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 点击弹出的窗之行事件</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'---'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 可选播放声音</span></span><br><span class="line">  audio:&#123;</span><br><span class="line">    <span class="comment">// 可以使用数组传多种格式的声音文件</span></span><br><span class="line">    file: [<span class="string">'msg.mp4'</span>,<span class="string">'msg.mp3'</span>,<span class="string">'msg.wav'</span>]</span><br><span class="line">    <span class="comment">// 下面也是可以的哦</span></span><br><span class="line">    <span class="comment">// file: 'msg.mp4'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 标题闪烁，或者滚动速度</span></span><br><span class="line">  interval: <span class="number">1000</span>,</span><br><span class="line">  <span class="comment">// 可选，默认绿底白字的  Favicon</span></span><br><span class="line">  updateFavicon:&#123;</span><br><span class="line">    <span class="comment">// favicon 字体颜色</span></span><br><span class="line">    textColor: <span class="string">'#fff'</span>,</span><br><span class="line">    <span class="comment">// 背景颜色，设置背景颜色透明，将值设置为“transparent”</span></span><br><span class="line">    backgroundColor: <span class="string">'#2F9A00'</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 可选chrome浏览器通知，默认不填写就是下面的内容</span></span><br><span class="line">  notification:&#123;</span><br><span class="line">    title:<span class="string">'通知！'</span>, <span class="comment">// 设置标题</span></span><br><span class="line">    icon:<span class="string">''</span>, <span class="comment">// 设置图标 icon 默认为 Favicon</span></span><br><span class="line">    body:<span class="string">'您来了一条新消息'</span>, <span class="comment">// 设置消息内容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">notify.player();</span><br></pre></td></tr></table></figure>
<p>在您的HTML中手动下载并引入 notify.js，你也可以通过 UNPKG 进行下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/@wcjiang/notify/dist/notify.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var notify = new Notify(&#123;</span><br><span class="line">  effect: &apos;flash&apos;,</span><br><span class="line">  interval: 500,</span><br><span class="line">&#125;);</span><br><span class="line">notify.setFavicon(&apos;1&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="option"><a href="#option" class="headerlink" title="option"></a>option</h4><ul>
<li>message: String 标题</li>
<li>effect: String, flash | scroll | favicon 闪烁还是滚动</li>
<li>audio: 可选播放声音<ul>
<li>file: String/Array 可以使用数组传多种格式的声音文件</li>
</ul>
</li>
<li>interval: Number 标题闪烁，或者滚动速度</li>
<li>openurl: String 点击弹窗打开连接地址</li>
<li>onclick: Function 弹窗点击事件</li>
<li>updateFavicon: 设置 Favicon 图标颜色<ul>
<li>textColor: 设置 favicon 字体颜色</li>
<li>backgroundColor: 背景颜色，设置背景颜色透明，将值设置为 transparent</li>
</ul>
</li>
<li>notification: 可选chrome浏览器通知，默认不填写就是下面的内容<ul>
<li>title: 默认值 通知！</li>
<li>icon: 设置图标 icon 默认为 Favicon</li>
<li>body: 设置消息内容</li>
</ul>
</li>
</ul>
<h4 id="isPermission"><a href="#isPermission" class="headerlink" title="isPermission"></a>isPermission</h4><p>判断浏览器弹框通知是否被阻止。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.isPermission()</span><br></pre></td></tr></table></figure>
<h4 id="声音设置"><a href="#声音设置" class="headerlink" title="声音设置"></a>声音设置</h4><p><strong>player</strong></p>
<p>播放声音</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.player()</span><br></pre></td></tr></table></figure>
<p><strong>loopPlay</strong></p>
<p>自动播放声音</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.loopPlay()</span><br></pre></td></tr></table></figure>
<p><strong>stopPlay</strong></p>
<p>停止播放声音</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.stopPlay()</span><br></pre></td></tr></table></figure>
<p><strong>setURL</strong></p>
<p>设置播放声音URL</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">iNotify</span><span class="selector-class">.setURL</span>(<span class="string">'msg.mp3'</span>) <span class="comment">// 设置一个</span></span><br><span class="line"><span class="selector-tag">iNotify</span><span class="selector-class">.setURL</span>([<span class="string">'msg.mp3'</span>,<span class="string">'msg.ogg'</span>,<span class="string">'msg.mp4'</span>]) <span class="comment">// 设置多个</span></span><br></pre></td></tr></table></figure>
<h4 id="title"><a href="#title" class="headerlink" title="title"></a>title</h4><p>最新的版本默认不播放标题闪烁动画，初始化之后需要调用 setTitle(true) 方法才播放标题动画。</p>
<p><strong>setTitle</strong></p>
<p>设置标题，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.setTitle(true) // 播放动画</span><br><span class="line">iNotify.setTitle(&apos;新标题&apos;) // 闪烁新标题</span><br><span class="line">iNotify.setTitle() // 清除闪烁 显示原来的标题</span><br></pre></td></tr></table></figure>
<p><strong>setInterval</strong></p>
<p>设置时间间隔  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.setInterval(2000)</span><br></pre></td></tr></table></figure>
<p><strong>addTimer</strong></p>
<p>添加计数器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.addTimer()</span><br></pre></td></tr></table></figure>
<p><strong>clearTimer</strong></p>
<p>清除计数器  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.clearTimer()</span><br></pre></td></tr></table></figure>
<h4 id="favicon通知"><a href="#favicon通知" class="headerlink" title="favicon通知"></a>favicon通知</h4><p><strong>setFavicon</strong></p>
<p>设置 icon 显示数字或者文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.setFavicon(10)</span><br></pre></td></tr></table></figure>
<p><strong>setFaviconColor</strong></p>
<p>设置 icon 显示文本颜色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.setFaviconColor(&apos;#0043ff&apos;)</span><br></pre></td></tr></table></figure>
<p><strong>setFaviconBackgroundColor</strong></p>
<p>设置 icon 显示文本颜色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.setFaviconBackgroundColor(&apos;#0043ff&apos;)</span><br><span class="line">// 设置字体和背景颜色</span><br><span class="line">iNotify.setFaviconColor(&apos;#f5ff00&apos;).setFaviconBackgroundColor(&apos;red&apos;);</span><br></pre></td></tr></table></figure>
<p><strong>faviconClear</strong></p>
<p>清除数字显示原来的icon</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">iNotify</span><span class="selector-class">.faviconClear</span>()</span><br></pre></td></tr></table></figure>
<h4 id="chrome通知"><a href="#chrome通知" class="headerlink" title="chrome通知"></a>chrome通知</h4><p><strong>notify</strong></p>
<p>弹出chrome通知，不传参数为预设值…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.notify(); </span><br><span class="line">iNotify.notify(&#123;</span><br><span class="line">  title: &apos;新通知&apos;,</span><br><span class="line">  body: &apos;打雷啦，下雨啦...&apos;,</span><br><span class="line">  openurl: &apos;http://www.bing.com&apos;,</span><br><span class="line">  onclick: function() &#123;</span><br><span class="line">    console.log(&apos;on click&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  onshow: function() &#123;</span><br><span class="line">    console.log(&apos;on show&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>title 一定会被显示的通知标题。</li>
<li>dir 文字的方向；它的值可以是 auto（自动）, ltr（从左到右）, or rtl（从右到左）。</li>
<li>icon 一个图片的URL，将被用于显示通知的图标。</li>
<li>body 通知中额外显示的字符串。</li>
<li>openurl 点击打开指定 URL。</li>
<li>onclick 每当用户点击通知时被触发。</li>
<li>onshow 当通知显示的时候被触发。</li>
<li>onerror 每当通知遇到错误时被触发。</li>
<li>onclose 当用户关闭通知时被触发。</li>
</ul>
<p><strong>其它</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iNotify.init().title; 获取标题</span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function iconNotify(num)&#123;</span><br><span class="line">  if(!notify) &#123;</span><br><span class="line">    var notify = new Notify(&#123;</span><br><span class="line">      effect: &apos;flash&apos;,</span><br><span class="line">      interval: 500</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  if(num===0)&#123;</span><br><span class="line">    notify.faviconClear()</span><br><span class="line">    notify.setTitle();</span><br><span class="line">  &#125; else if (num &lt; 100)&#123;</span><br><span class="line">    notify.setFavicon(num)</span><br><span class="line">    notify.setTitle(&apos;有新消息！&apos;);</span><br><span class="line">  &#125; else if (num &gt; 99)&#123;</span><br><span class="line">    notify.setFavicon(&apos;..&apos;)</span><br><span class="line">    notify.setTitle(&apos;有新消息！&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var notify = new Notify(&#123;</span><br><span class="line">  effect: &apos;flash&apos;,</span><br><span class="line">  interval: 500,</span><br><span class="line">&#125;);</span><br><span class="line">notify.setFavicon(&apos;1&apos;);</span><br></pre></td></tr></table></figure>
<h4 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var iN = new Notify(&#123;</span><br><span class="line">  effect: &apos;flash&apos;,</span><br><span class="line">  interval: 500,</span><br><span class="line">  message: &apos;有消息拉！&apos;,</span><br><span class="line">  updateFavicon:&#123; // 可选，默认绿底白字</span><br><span class="line">    textColor: &apos;#fff&apos;,// favicon 字体颜色</span><br><span class="line">    backgroundColor: &apos;#2F9A00&apos;, // 背景颜色</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).setFavicon(10);</span><br></pre></td></tr></table></figure>
<h4 id="实例四"><a href="#实例四" class="headerlink" title="实例四"></a>实例四</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var iN = new Notify().setFavicon(5);</span><br></pre></td></tr></table></figure>
<h4 id="实例五"><a href="#实例五" class="headerlink" title="实例五"></a>实例五</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var iN = new Notify(&#123;</span><br><span class="line">  effect: &apos;flash&apos;,</span><br><span class="line">  interval: 500,</span><br><span class="line">  message: &quot;有消息拉！&quot;,</span><br><span class="line">  audio:&#123;</span><br><span class="line">    file: &apos;msg.mp4&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).setFavicon(10).player();</span><br></pre></td></tr></table></figure>
<h4 id="实例六"><a href="#实例六" class="headerlink" title="实例六"></a>实例六</h4><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="keyword">iN</span> = <span class="literal">new</span> Notify(&#123;</span><br><span class="line">  effect: <span class="string">'flash'</span>,</span><br><span class="line">  interval: <span class="number">500</span>,</span><br><span class="line">  message: <span class="string">'有消息拉！'</span>,</span><br><span class="line">  audio:&#123;</span><br><span class="line">    file: <span class="string">'msg.mp4'</span><span class="comment">//可以使用数组传多种格式的声音文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  notification:&#123;</span><br><span class="line">    title: <span class="string">'通知！'</span>,</span><br><span class="line">    icon: <span class="string">''</span>,</span><br><span class="line">    body: <span class="string">'您来了一条新消息'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).setFavicon(<span class="number">10</span>).player();</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出chrome通知，不传参数为预设值...</span></span><br><span class="line"><span class="keyword">iN</span>.notify(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">iN</span>.notify(&#123;</span><br><span class="line">  title: <span class="string">'新通知'</span>,</span><br><span class="line">  body: <span class="string">'打雷啦，下雨啦...'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="实例七"><a href="#实例七" class="headerlink" title="实例七"></a>实例七</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var iN =  new Notify(&#123;</span><br><span class="line">  effect: &apos;flash&apos;,</span><br><span class="line">  interval: 500,</span><br><span class="line">  message: &apos;有消息拉！&apos;,</span><br><span class="line">  audio:&#123;</span><br><span class="line">    file: [&apos;msg.mp4&apos;, &apos;msg.mp3&apos;, &apos;msg.wav&apos;]</span><br><span class="line">  &#125;,</span><br><span class="line">  notification:&#123;</span><br><span class="line">    title: &apos;通知！&apos;,</span><br><span class="line">    body:&apos;您来了一条新消息&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iN.setFavicon(10).player();</span><br><span class="line"></span><br><span class="line">var n = new Notify()</span><br><span class="line">n.init(&#123;</span><br><span class="line">  effect: &apos;flash&apos;,</span><br><span class="line">  interval: 500,</span><br><span class="line">  message: &apos;有消息拉！&apos;,</span><br><span class="line">  audio:&#123;</span><br><span class="line">    file: [&apos;openSub.mp4&apos;, &apos;openSub.mp3&apos;, &apos;openSub.wav&apos;],</span><br><span class="line">  &#125;,</span><br><span class="line">  notification:&#123;</span><br><span class="line">    title:&apos;通知！&apos;,</span><br><span class="line">    icon: &apos;&apos;,</span><br><span class="line">    body:&apos;您来了一个客户&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">n.setFavicon(10).player();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>iNotify</tag>
        <tag>Notificatio</tag>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>GET和POST请求方法的区别-没几个人知道的知识</title>
    <url>/get&amp;post/</url>
    <content><![CDATA[<p><strong>GET</strong>和<strong>POST</strong>是<strong>HTTP</strong>请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。</p>
<p>最直观的区别就是<strong>GET</strong>把参数包含在<strong>URL</strong>中，<strong>POST</strong>通过<strong>request body</strong>传递参数。</p>
<p>你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。</p>
<p>当你在面试中被问到这个问题，你的内心充满了自信和喜悦。</p>
<img src="/get&post/1.png">
<p>你轻轻松松的给出了一个“标准答案”：</p>
<ul>
<li><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p>
</li>
<li><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p>
</li>
<li><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p>
</li>
<li><p>GET请求只能进行url编码，而POST支持多种编码方式。</p>
</li>
<li><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p>
</li>
<li><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p>
</li>
<li><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p>
</li>
<li><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p>
</li>
<li><p>GET参数通过URL传递，POST放在Request body中。</p>
</li>
</ul>
<p>（本标准答案参考自w3schools）</p>
<p>“很遗憾，这不是我们要的回答！”</p>
<img src="/get&post/2.png">
<p>请告诉我真相。。。</p>
<p>如果我告诉你GET和POST本质上没有区别你信吗？</p>
<p>让我们扒下GET和POST的外衣，坦诚相见吧！</p>
<img src="/get&post/3.png">
<p><strong>GET和POST是什么？HTTP协议中的两种发送请求的方法</strong>。</p>
<p><strong>HTTP</strong>是什么？<strong>HTTP</strong>是基于<strong>TCP/IP</strong>的关于<strong>数据如何在万维网中如何通信的协议</strong>。</p>
<p>HTTP的底层是<strong>TCP/IP</strong>。所以GET和POST的底层也是TCP/IP，也就是说，<strong>GET/POST都是TCP链接</strong>。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p>
<p>那么，“标准答案”里的那些区别是怎么回事？</p>
<img src="/get&post/4.png">
<p>在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p>
<p>但是，我们只看到HTTP对GET和POST参数的传送渠道（url还是requrest body）提出了要求。“标准答案”里关于参数大小的限制又是从哪来的呢？</p>
<img src="/get&post/5.png">
<p>在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）<strong>浏览器通常都会限制url长度在2K个字节</strong>，而（大多数）<strong>服务器最多处理64K大小的url</strong>。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。</p>
<p>好了，现在你知道，GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。 </p>
<p>你以为本文就这么结束了？</p>
<img src="/get&post/6.png">
<p>我们的大BOSS还等着出场呢。。。</p>
<p>这位BOSS有多神秘？当你试图在网上找“GET和POST的区别”的时候，那些你会看到的搜索结果里，从没有提到他。他究竟是什么呢。。。</p>
<p>GET和POST还有一个重大区别，简单的说：</p>
<p><strong>GET产生一个TCP数据包；POST产生两个TCP数据包</strong>。</p>
<p>长的说：</p>
<blockquote>
<p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p>
</blockquote>
<blockquote>
<p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p>
</blockquote>
<p>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p>
<p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p>
<ol>
<li><p>GET与POST都有自己的语义，不能随便混用。</p>
</li>
<li><p>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</p>
</li>
<li><p>并不是所有浏览器都会在POST中发送两次包，<strong>Firefox就只发送一次</strong>。</p>
</li>
</ol>
<p>现在，当面试官再问你“GET与POST的区别”的时候，你的内心是不是这样的？</p>
<img src="/get&post/7.png">
<p>end！！！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Ajax</tag>
        <tag>Get</tag>
        <tag>Post</tag>
        <tag>Http</tag>
        <tag>Tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>link和@import的区别，以后别乱用了！</title>
    <url>/link-import/</url>
    <content><![CDATA[<p>我们都知道，外部引入 CSS 有2种方式，<strong>link</strong>标签和<strong>@import</strong>。</p>
<h3 id="1-属性不同"><a href="#1-属性不同" class="headerlink" title="1.属性不同"></a>1.属性不同</h3><p>@import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等。</p>
<h3 id="2-加载顺序不同"><a href="#2-加载顺序不同" class="headerlink" title="2.加载顺序不同"></a>2.加载顺序不同</h3><p>加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。</p>
<h3 id="3-兼容性不同"><a href="#3-兼容性不同" class="headerlink" title="3.兼容性不同"></a>3.兼容性不同</h3><p>@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。</p>
<h3 id="4-DOM可控性区别"><a href="#4-DOM可控性区别" class="headerlink" title="4.DOM可控性区别"></a>4.DOM可控性区别</h3><p>可以通过 JS 操作 DOM ，插入link标签来改变样式；由于 DOM 方法是基于文档的，无法使用@import的方式插入样式。</p>
<h3 id="5-权重区别-该项有争议"><a href="#5-权重区别-该项有争议" class="headerlink" title="5.权重区别(该项有争议)"></a>5.权重区别(该项有争议)</h3><p>link引入的样式权重大于@import引入的样式。</p>
<p><strong>结论：</strong></p>
<p>就结论而言，强烈建议使用link标签，慎用@import方式。<br>这样可以避免考虑@import的语法规则和注意事项，避免产生资源文件下载顺序混乱和http请求过多的烦恼</p>
]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>js 判断字符串中是否包含某个字符串</title>
    <url>/match-string/</url>
    <content><![CDATA[<blockquote>
<p><strong>String对象的方法</strong></p>
</blockquote>
<h3 id="方法一：indexOf-searchvalue-start-推荐"><a href="#方法一：indexOf-searchvalue-start-推荐" class="headerlink" title="方法一：indexOf(searchvalue,start)  (推荐)"></a>方法一：indexOf(searchvalue,start)  (推荐)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"3"</span>) !== <span class="number">-1</span> );  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。如果要检索的字符串值没有出现，则该方法返回 -1。</p>
<h3 id="方法二：search-searchvalue"><a href="#方法二：search-searchvalue" class="headerlink" title="方法二：search(searchvalue)"></a>方法二：search(searchvalue)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">"3"</span>) !== <span class="number">-1</span> );  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。</p>
<h3 id="方法三：match-regexp"><a href="#方法三：match-regexp" class="headerlink" title="方法三：match(regexp)"></a>方法三：match(regexp)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"123234356"</span>;</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="built_in">RegExp</span>(<span class="regexp">/3/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg1)); <span class="comment">// ["3"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg2)); <span class="comment">// ["3", "3", "3"]</span></span><br></pre></td></tr></table></figure>
<p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。（返回匹配结果的数组）</p>
<blockquote>
<p><strong>RegExp 对象方法</strong></p>
</blockquote>
<h3 id="方法四：test"><a href="#方法四：test" class="headerlink" title="方法四：test()"></a>方法四：test()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>test() 方法用于检索字符串中指定的值。返回 true 或 false。</p>
<h3 id="方法五：exec"><a href="#方法五：exec" class="headerlink" title="方法五：exec()"></a>方法五：exec()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="built_in">RegExp</span>(<span class="regexp">/3/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str1)); <span class="comment">//["3"]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str2)); <span class="comment">//["3"]</span></span><br></pre></td></tr></table></figure>
<p>exec() 方法用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>
<p><strong>exec() 和 match() 区别：</strong></p>
<ul>
<li>exec是正则表达式的方法，它的参数是字符串;match是字符串执行匹配正则表达式规则的方法，他的参数是正则表达.</li>
<li>exec与全局是否定义无关系，而match则于全局相关联，当定义为非全局，两者执行结果相同</li>
</ul>
]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中RegExp对象整理</title>
    <url>/reg-exp/</url>
    <content><![CDATA[<h3 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h3><p>正则表达式是描述字符模式的对象。</p>
<p>正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> patt=<span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern,modifiers);</span><br><span class="line"><span class="comment">//或者更简单的方式:</span></span><br><span class="line"><span class="keyword">var</span> patt=<span class="regexp">/pattern/m</span>odifiers;</span><br></pre></td></tr></table></figure>
<ul>
<li>pattern（模式）描述了表达式的模式</li>
<li>modifiers（修饰符）用于指定全局匹配、区分大小写的匹配和多行匹配</li>
</ul>
<blockquote>
<p>注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。比如，以下是等价的：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\w+"</span>);</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/\w+/</span>;</span><br></pre></td></tr></table></figure>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符用于执行区分大小写和全局匹配:</p>
<table>
<thead>
<tr>
<th style="text-align:left">修饰符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">i</td>
<td style="text-align:left">执行对大小写不敏感的匹配。</td>
</tr>
<tr>
<td style="text-align:left">g</td>
<td style="text-align:left">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>
</tr>
<tr>
<td style="text-align:left">m</td>
<td style="text-align:left">执行多行匹配。</td>
</tr>
</tbody>
</table>
<h3 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h3><p>方括号用于查找某个范围内的字符：</p>
<table>
<thead>
<tr>
<th style="text-align:left">表达式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[abc]</td>
<td style="text-align:left">查找方括号之间的任何字符。</td>
</tr>
<tr>
<td style="text-align:left">[^abc]</td>
<td style="text-align:left">查找任何不在方括号之间的字符。</td>
</tr>
<tr>
<td style="text-align:left">[0-9]</td>
<td style="text-align:left">查找任何从 0 至 9 的数字。</td>
</tr>
<tr>
<td style="text-align:left">[a-z]</td>
<td style="text-align:left">查找任何从小写 a 到小写 z 的字符。</td>
</tr>
<tr>
<td style="text-align:left">[A-Z]</td>
<td style="text-align:left">查找任何从大写 A 到大写 Z 的字符。</td>
</tr>
<tr>
<td style="text-align:left">[A-z]</td>
<td style="text-align:left">查找任何从大写 A 到小写 z 的字符。</td>
</tr>
<tr>
<td style="text-align:left">[adgk]</td>
<td style="text-align:left">查找给定集合内的任何字符</td>
</tr>
<tr>
<td style="text-align:left">[^adgk]</td>
<td style="text-align:left">查找给定集合外的任何字符。</td>
</tr>
<tr>
<td style="text-align:left">(red&#124;blue&#124;green)</td>
<td style="text-align:left">查找任何指定的选项。</td>
</tr>
</tbody>
</table>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>元字符（Metacharacter）是拥有特殊含义的字符：</p>
<table>
<thead>
<tr>
<th style="text-align:left">元字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">查找单个字符，除了换行和行结束符。</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">查找单词字符（a-z、A-Z、0-9，以及下划线, 包含 _ (下划线) 字符）。</td>
</tr>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:left">查找非单词字符。</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">查找数字。</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:left">查找非数字字符。</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">查找空白字符。</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">查找非空白字符。</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">匹配单词边界。</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">匹配非单词边界。</td>
</tr>
<tr>
<td style="text-align:left">\0</td>
<td style="text-align:left">查找 NULL 字符。</td>
</tr>
<tr>
<td style="text-align:left">\n</td>
<td style="text-align:left">查找换行符。</td>
</tr>
<tr>
<td style="text-align:left">\f</td>
<td style="text-align:left">查找换页符。</td>
</tr>
<tr>
<td style="text-align:left">\r</td>
<td style="text-align:left">查找回车符。</td>
</tr>
<tr>
<td style="text-align:left">\t</td>
<td style="text-align:left">查找制表符。</td>
</tr>
<tr>
<td style="text-align:left">\v</td>
<td style="text-align:left">查找垂直制表符。</td>
</tr>
<tr>
<td style="text-align:left">\xxx</td>
<td style="text-align:left">查找以八进制数 xxx 规定的字符。</td>
</tr>
<tr>
<td style="text-align:left">\xdd</td>
<td style="text-align:left">查找以十六进制数 dd 规定的字符。</td>
</tr>
<tr>
<td style="text-align:left">\uxxxx</td>
<td style="text-align:left">查找以十六进制数 xxxx 规定的 Unicode 字符。</td>
</tr>
</tbody>
</table>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><table>
<thead>
<tr>
<th style="text-align:left">量词</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">n+</td>
<td style="text-align:left">匹配任何包含至少一个 n 的字符串。<br>例如，/a+/ 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</td>
</tr>
<tr>
<td style="text-align:left">n*</td>
<td style="text-align:left">匹配任何包含零个或多个 n 的字符串。<br>例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</td>
</tr>
<tr>
<td style="text-align:left">n?</td>
<td style="text-align:left">匹配任何包含零个或一个 n 的字符串。<br>例如，/e?le?/ 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</td>
</tr>
<tr>
<td style="text-align:left">n{X}</td>
<td style="text-align:left">匹配包含 X 个 n 的序列的字符串。<br>例如，/a{2}/ 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</td>
</tr>
<tr>
<td style="text-align:left">n{X,}</td>
<td style="text-align:left">X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。<br>例如，/a{2,}/ 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</td>
</tr>
<tr>
<td style="text-align:left">n{X,Y}</td>
<td style="text-align:left">X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。<br>例如，/a{1,3}/ 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。<br>注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</td>
</tr>
<tr>
<td style="text-align:left">n$</td>
<td style="text-align:left">匹配任何结尾为 n 的字符串。</td>
</tr>
<tr>
<td style="text-align:left">^n</td>
<td style="text-align:left">匹配任何开头为 n 的字符串。</td>
</tr>
<tr>
<td style="text-align:left">?=n</td>
<td style="text-align:left">匹配任何其后紧接指定字符串 n 的字符串。</td>
</tr>
<tr>
<td style="text-align:left">?!n</td>
<td style="text-align:left">匹配任何其后没有紧接指定字符串 n 的字符串。</td>
</tr>
</tbody>
</table>
<h3 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h3><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p>检索字符串中的正则表达式的匹配，如果字符串中有匹配的值返回该匹配值，否则返回 null。</p>
<blockquote>
<p>语法：RegExpObject.exec(string)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="comment">//查找"Hello"</span></span><br><span class="line"><span class="keyword">let</span> patt = <span class="regexp">/Hello/g</span>;</span><br><span class="line"><span class="keyword">let</span> result = patt.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//Hello</span></span><br><span class="line"><span class="comment">//查找 "RUNOOB"</span></span><br><span class="line">patt = <span class="regexp">/RUNOOB/g</span>;</span><br><span class="line">result = patt.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//null</span></span><br></pre></td></tr></table></figure>
<h4 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h4><p>检测一个字符串是否匹配某个模式，如果字符串中有匹配的值返回 true ，否则返回 false。</p>
<blockquote>
<p>语法：RegExpObject.test(string)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="comment">//查找"Hello"</span></span><br><span class="line"><span class="keyword">let</span> patt = <span class="regexp">/Hello/g</span>;</span><br><span class="line"><span class="keyword">let</span> result = patt.test(str);<span class="comment">//在字符串中全局搜索 "Hello" 字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//查找 "Runoob"</span></span><br><span class="line">patt = <span class="regexp">/Runoob/g</span>;</span><br><span class="line">result = patt.test(str);<span class="comment">//在字符串中全局搜索 "Runoob" 字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Javascript 判断是移动端浏览器还是 PC 端浏览器</span></span><br><span class="line"><span class="keyword">if</span>( <span class="regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.test(navigator.userAgent) ) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"移动"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"PC"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>返回正则表达式的字符串值。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> patt = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"RUNOOB"</span>, <span class="string">"g"</span>);</span><br><span class="line"><span class="keyword">let</span> res = patt.toString();</span><br><span class="line"><span class="built_in">console</span>.log(patt);<span class="comment">///RUNOOB/g</span></span><br><span class="line"><span class="built_in">console</span>.log(res);<span class="comment">///RUNOOB/g</span></span><br></pre></td></tr></table></figure>
<p>详情请看<a href="https://www.runoob.com/jsref/jsref-obj-regexp.html" title="这里" target="_blank" rel="noopener">这里</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重的几种方法</title>
    <url>/rd-array/</url>
    <content><![CDATA[<h4 id="一、简单的去重方法"><a href="#一、简单的去重方法" class="headerlink" title="一、简单的去重方法"></a>一、简单的去重方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最简单数组去重法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 新建一新数组，遍历传入数组，值不在新数组就push进该新数组中</span></span><br><span class="line"><span class="comment">* IE8以下不支持数组的indexOf方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = []; <span class="comment">//一个新的临时数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.indexOf(array[i]) == <span class="number">-1</span>)&#123;</span><br><span class="line">            temp.push(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure>
<h4 id="二、对象键值法去重"><a href="#二、对象键值法去重" class="headerlink" title="二、对象键值法去重"></a>二、对象键值法去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 速度最快， 占空间最多（空间换时间）</span></span><br><span class="line"><span class="comment">* 该方法执行的速度比其他任何方法都快， 就是占用的内存大一些。</span></span><br><span class="line"><span class="comment">* 现思路：新建一js对象以及新数组，遍历传入数组时，判断值是否为js对象的键，</span></span><br><span class="line"><span class="comment">* 不是的话给对象新增该键并放入新数组。</span></span><br><span class="line"><span class="comment">* 注意点：判断是否为js对象键时，会自动对传入的键执行“toString()”，</span></span><br><span class="line"><span class="comment">* 不同的键可能会被误认为一样，例如n[val]-- n[1]、n["1"]；</span></span><br><span class="line"><span class="comment">* 解决上述问题还是得调用“indexOf”。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = &#123;&#125;, r = [], len = array.length, val, type;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        val = array[i];</span><br><span class="line">        type = <span class="keyword">typeof</span> val;</span><br><span class="line">        <span class="keyword">if</span> (!temp[val]) &#123;</span><br><span class="line">            temp[val] = [type];</span><br><span class="line">            r.push(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[val].indexOf(type) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            temp[val].push(type);</span><br><span class="line">            r.push(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"2"</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure>
<h4 id="三、排序后相邻去除法"><a href="#三、排序后相邻去除法" class="headerlink" title="三、排序后相邻去除法"></a>三、排序后相邻去除法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 给传入数组排序，排序后相同值相邻，</span></span><br><span class="line"><span class="comment">* 然后遍历时,新数组只加入不与前一值重复的值。</span></span><br><span class="line"><span class="comment">* 会打乱原来数组的顺序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    array.sort();</span><br><span class="line">    <span class="keyword">var</span> temp=[array[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( array[i] !== temp[temp.length<span class="number">-1</span>])&#123;</span><br><span class="line">            temp.push(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"2"</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure>
<h4 id="四、数组下标法"><a href="#四、数组下标法" class="headerlink" title="四、数组下标法"></a>四、数组下标法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 还是得调用“indexOf”性能跟方法1差不多，</span></span><br><span class="line"><span class="comment">* 实现思路：如果当前数组的第i项在当前数组中第一次出现的位置不是i，</span></span><br><span class="line"><span class="comment">* 那么表示第i项是重复的，忽略掉。否则存入结果数组。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="comment">//如果当前数组的第i项在当前数组中第一次出现的位置是i，才存入数组；否则代表是重复的</span></span><br><span class="line">        <span class="keyword">if</span>(array.indexOf(array[i]) == i)&#123;</span><br><span class="line">            temp.push(array[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"2"</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure>
<h4 id="五、优化遍历数组法"><a href="#五、优化遍历数组法" class="headerlink" title="五、优化遍历数组法"></a>五、优化遍历数组法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路：获取没重复的最右一值放入新数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 推荐的方法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 方法的实现代码相当酷炫，</span></span><br><span class="line"><span class="comment">* 实现思路：获取没重复的最右一值放入新数组。</span></span><br><span class="line"><span class="comment">* （检测到有重复值时终止当前循环同时进入顶层循环的下一轮判断）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">var</span> index = [];</span><br><span class="line">    <span class="keyword">var</span> l = array.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; l; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] === array[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.push(array[i]);</span><br><span class="line">        index.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(aa));</span><br></pre></td></tr></table></figure>
<h4 id="六、ES6新的数据结构Set-实现数组去重"><a href="#六、ES6新的数据结构Set-实现数组去重" class="headerlink" title="六、ES6新的数据结构Set-实现数组去重"></a>六、ES6新的数据结构Set-实现数组去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="built_in">console</span>.log(unique); <span class="comment">// [3, 5, 2]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>sessionStorage误区解释</title>
    <url>/sessionstorage-myth/</url>
    <content><![CDATA[<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>所有人都知道，<code>localStorage</code>和<code>sessionStorage</code>的最大区别是生命周期，一个永久，一个仅针对一个会话期间有效。那么，到底什么是一个会话？多个标签页之间的数据是否会共享呢？</p>
<h3 id="2、后台的session"><a href="#2、后台的session" class="headerlink" title="2、后台的session"></a>2、后台的session</h3><p>我们对会话<code>session</code>的认识一般都是从后台的session开始的，比如Java的session，它是基于往cookie写入一个<code>JSESSIONID</code>来实现的，所以，只要你不是打开一个隐身窗口，无论你开多少个标签页，不同标签页之间都会被认为是一个session，你在这个标签页登录了，新开一个标签输入地址，仍然是登录状态。</p>
<h3 id="3、sessionStorage的session"><a href="#3、sessionStorage的session" class="headerlink" title="3、sessionStorage的session"></a>3、sessionStorage的session</h3><p>但是直到今天才发现，HTML5中的这个<code>sessionStorage</code>和传统后台的<code>session</code>并不完全是同一个东西，主要是在多个标签页数据是否会共享的问题上的不同。</p>
<p>误区：之前一直以为，同一个窗口，只要会话还没有过期，不同标签页之间，相同域名下的<code>sessionStorage</code>是一样的。</p>
<p>正确答案：刷新当前页面，或者通过<code>location.href</code>、<code>window.open</code>、或者通过带<code>target=&quot;_blank&quot;</code>的<code>a</code>标签打开新标签，之前的<code>sessionStorage</code>还在（继承过去了），但是如果你是主动打开一个新窗口或者新标签，对不起，打开F12你会发现，<code>sessionStorage</code>空空如也。</p>
<p>也就是说，<code>sessionStorage</code>的<code>session</code>仅限当前标签页或者当前标签页打开的新标签页，通过其它方式新开的窗口或标签不认为是同一个<code>session</code>。</p>
<p>大家可以亲自测试一下，手动打开的新标签和点A标签打开的新标签效果完全不一样。</p>
<img src="/sessionstorage-myth/1.gif">
<h3 id="后续更新"><a href="#后续更新" class="headerlink" title="后续更新"></a>后续更新</h3><p>今天又碰到有关sessionStorage的一个问题，发现之前理解的还是错误的，比如当我通过A标签打开新的窗口时，在新窗口删除同样的数据，旧窗口的却还在。</p>
<p>经过测试发现：</p>
<blockquote>
<p>通过带<code>target=&quot;_blank&quot;</code>的A标签、window.open等方式打开新窗口时，会把旧窗口（或标签）的sessionStorage数据带过去，但从此之后，新窗口（或标签）的sessionStorage的增删改和旧窗口已经没有关系了，如果只是在当前标签内跳转新页面（或者刷新），数据还会保留（前提当然是同域）。</p>
</blockquote>
<p>总之，在处理sessionStorage时，只要打开新窗口就要特别注意了，新旧窗口数据不会互相同步。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sessionStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的本地对象，内置对象和宿主对象</title>
    <url>/three-object/</url>
    <content><![CDATA[<img src="/three-object/1.png">
<h3 id="本地对象（native-object）也叫原生对象、内部对象"><a href="#本地对象（native-object）也叫原生对象、内部对象" class="headerlink" title="本地对象（native object）也叫原生对象、内部对象"></a>本地对象（native object）也叫原生对象、内部对象</h3><p>“独立于宿主环境的 ECMAScript 实现提供的对象”。简单来说，本地对象就是 ECMA-262 定义的类（引用类型），<strong>可以 new 实例化的对象</strong>。它们包括：</p>
<ul>
<li>Object</li>
<li>Function</li>
<li>Array</li>
<li>String</li>
<li>Boolean</li>
<li>Number</li>
<li>Date</li>
<li>RegExp</li>
<li>Error</li>
<li>EvalError</li>
<li>RangeError</li>
<li>ReferenceError</li>
<li>SyntaxError</li>
<li>TypeError</li>
<li>URIError</li>
</ul>
<h3 id="内置对象（Build-in-object）"><a href="#内置对象（Build-in-object）" class="headerlink" title="内置对象（Build-in object）"></a>内置对象（Build-in object）</h3><p>不可以实例化的（他们也是本地对象，<strong>内置对象是本地对象的一个子集</strong>）</p>
<p>在 ECMAScript 程序开始执行时出现，即在引擎初始化阶段就被创建好的对象。这意味着开发者不必明确实例化内置对象，它已被实例化了</p>
<p>如： Gload，Math，arguments，this，event 等等</p>
<h3 id="宿主对象（host-object）"><a href="#宿主对象（host-object）" class="headerlink" title="宿主对象（host object）"></a>宿主对象（host object）</h3><p>宿主”就是我们网页的运行环境，即“操作系统”和“浏览器”。</p>
<p>所有的非本地对象，所有的 BOM 和 DOM 对象都是宿主对象，如浏览器自带的document，window 等对象</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM install -save 和 -save-dev 完美解释</title>
    <url>/vue-npm-install/</url>
    <content><![CDATA[<p>最近在写Vue程序的时候，突然对 npm install 的-save和-save-dev 这两个参数的使用比较混乱。其实博主在这之前对这两个参数的理解也是模糊的，各种查资料和实践后对它们之间的异同点略有理解。遂写下这篇文章避免自己忘记，同时也给猿友一点指引。<br><a id="more"></a></p>
<p>我们在使用 <strong>npm install</strong> 安装模块的模块的时候 ，一般会使用下面这几种命令形式：</p>
<h3 id="基本用法基本用法"><a href="#基本用法基本用法" class="headerlink" title="基本用法基本用法"></a>基本用法基本用法</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">npm install moduleName </span><br><span class="line"># 安装模块到项目目录下</span><br><span class="line"></span><br><span class="line">npm install -g moduleName </span><br><span class="line"># -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。</span><br><span class="line"></span><br><span class="line">npm install -save moduleName </span><br><span class="line"># -save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。</span><br><span class="line"></span><br><span class="line">npm install -save-dev moduleName </span><br><span class="line"># -save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。</span><br></pre></td></tr></table></figure>
<p>那么问题来了，在项目中我们应该使用四个命令中的哪个呢？这个就要视情况而定了。下面对这四个命令进行对比，看完后你就不再这么问了。</p>
<p><strong>npm install moduleName</strong> 命令</p>
<ol>
<li>安装模块到项目node_modules目录下。</li>
<li>不会将模块依赖写入devDependencies或dependencies 节点。</li>
<li>运行 npm install 初始化项目时不会下载模块。</li>
</ol>
<p><strong>npm install -g moduleName</strong> 命令</p>
<ol>
<li>安装模块到全局，不会在项目node_modules目录中保存模块包。</li>
<li>不会将模块依赖写入devDependencies或dependencies 节点。</li>
<li>运行 npm install 初始化项目时不会下载模块。</li>
</ol>
<p><strong>npm install -save moduleName</strong> 命令</p>
<ol>
<li>安装模块到项目node_modules目录下。</li>
<li>会将模块依赖写入dependencies 节点。</li>
<li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li>
<li>运行npm install –production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。</li>
</ol>
<p><strong>npm install -save-dev moduleName</strong> 命令</p>
<ol>
<li>安装模块到项目node_modules目录下。</li>
<li>会将模块依赖写入devDependencies 节点。</li>
<li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li>
<li>运行npm install –production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>devDependencies</strong> 节点下的模块是我们在开发时需要用的，比如项目中使用的 <strong>webpack</strong> ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 <strong>-save-dev</strong> 的形式安装。像 <strong>vuex</strong> 这些模块是项目运行必备的，应该安装在 <strong>dependencies</strong> 节点下，所以我们应该使用 <strong>-save</strong> 的形式安装。</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="命令缩写"><a href="#命令缩写" class="headerlink" title="命令缩写"></a>命令缩写</h4><p>在使用 npm install 命令时，有许多指定参数的命令是可以进行缩写的，本文就简单梳理一下。<br>npm install本身有一个别名，即<strong>npm i</strong>，可以使用这种缩写方式来运行命令，打到简化的效果。<br>以下为指定的一些命令行参数的缩写方式：</p>
<ul>
<li>-g<br>–global，缩写为-g，表示安装包时，视作全局的包。安装之后的包将位于系统预设的目录之下，一般来说</li>
<li>-S<br>–save，缩写为-S，表示安装的包将写入package.json里面的dependencies。</li>
<li>-D<br>–save-dev，缩写为-D，表示将安装的包将写入packege.json里面的devDependencies。</li>
<li>-O<br>–save-optional缩写为-O，表示将安装的包将写入packege.json里面的optionalDependencies。</li>
<li>-E<br>–save-exact缩写为-E，表示安装的包的版本是精确指定的。</li>
<li>-B<br>–save-bundle缩写为-B，表示将安装的包将写入packege.json里面的bundleDependencies。</li>
</ul>
<h4 id="淘宝镜像"><a href="#淘宝镜像" class="headerlink" title="淘宝镜像"></a>淘宝镜像</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以后下载依赖直接用cnpm替代npm-享受飞一般的速度</span></span><br></pre></td></tr></table></figure>
<h4 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm uninstall express</span><br></pre></td></tr></table></figure>
<h4 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm update express</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Node.js</tag>
        <tag>Npm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+webpake proxyTable跨域问题完美解决</title>
    <url>/vue-proxy/</url>
    <content><![CDATA[<p>如果是前后端分离的项目，本地开发环境需要访问接口，或者在调试时直接访问线上的接口，这时候就会有接口跨域的问题（生产环境不存在跨域问题）。以vue-cli生成的项目为例，需要配置 config/index.js 中的 proxyTable 属性。<br><a id="more"></a></p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 亲测只适合dev环境，且每个接口前要加上‘/api’ */</span></span><br><span class="line"></span><br><span class="line">proxyTable: &#123;</span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://example.com'</span>, <span class="comment">// 接口的域名</span></span><br><span class="line">        <span class="comment">// secure: false,  // 如果是https接口，需要配置这个参数</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">            <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 亲测完美解决跨域方案 */</span></span><br><span class="line"></span><br><span class="line">proxyTable:[&#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    target: <span class="string">'http://example.com'</span>, <span class="comment">// 接口的域名</span></span><br><span class="line">&#125;],</span><br></pre></td></tr></table></figure>
<img src="/vue-proxy/1.png">
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Proxy</tag>
        <tag>ProxyTable</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件—slot（&quot;插槽&quot;）分发内容</title>
    <url>/vue-slot/</url>
    <content><![CDATA[<p><strong>slot</strong>元素作为组件模板之中的内容分发插槽。这个元素自身将被替换。<br>有 name特性的 slot 称为 <strong>具名 slot</strong>。 有 slot 特性的内容将分发到名字相匹配的具名 slot。<br>内容分发就是指混合父组件的内容与子组件自己的模板<br><a id="more"></a></p>
<h3 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h3><p>如果子组件的模板不包含 slot，那么父组件的内容就会被抛弃。</p>
<p>父组件html中的内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">game</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">game</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>main.js中引入子组件game</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> game <span class="keyword">from</span> <span class="string">"./game.vue"</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   el: <span class="string">'#app'</span>,</span><br><span class="line">   data: &#123;&#125;,</span><br><span class="line">   methods: &#123;&#125;,</span><br><span class="line">   components: &#123;</span><br><span class="line">      game,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>game.vue子组件中没有slot的情况</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行的结果发现父组件中内容没有显示在子组件中。</p>
<img src="/vue-slot/1.png">
<p>那么game.vue子组件中有slot的情况</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果就会发现父组件中的内容显示在子组件中了</p>
<img src="/vue-slot/2.png">
<p>如果父组件中没有传递内容，子组件中slot给默认内容，那么子组件中的默认内容会显示出来。</p>
<p>父组件html中的内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">game</span>&gt;</span> <span class="tag">&lt;/<span class="name">game</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>game子组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span>有没有游戏可以玩？<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果会显示子组件中的slot中的内容</p>
<img src="/vue-slot/3.png">
<h3 id="具名slot"><a href="#具名slot" class="headerlink" title="具名slot"></a>具名slot</h3><p>slot元素可以用一个特殊的属性name 来配置如何分发内容，多个slot可以有不同的名字，根据具名slot的name来进行匹配，显示内容。如果有默认的slot，那么没有匹配到的内容将会显示到默认的slot中，如果没有默认的slot，那么没有匹配到的内容将会被抛弃</p>
<p>父组件中的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">game</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"k1"</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">"k2"</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>小学生要背锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">game</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>子组件中的slot有name属性，与父组件的slot的值相对应，那么久会匹配到。没有匹配到的先会显示在默认的slot中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"k1"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"k2"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：当子组件有默认的slot时，会显示没有匹配到的内容 “小学生要背锅”</p>
<img src="/vue-slot/4.png">
<p>如果子组件中没有默认的slot时</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"k1"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"k2"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么运行的结果，将会把父组件中没有匹配到的内容 “小学生要背锅” 给抛弃掉</p>
<img src="/vue-slot/5.png">
<h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译</p>
<p>父组件模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">game</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"k1"</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">"k2"</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">game</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>父组件的js文件 main.js</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">   msg: "游戏排行榜",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子组件模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"k1"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"k2"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>子组件的js文件 game.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = &#123;</span><br><span class="line">   data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">         msg: <span class="string">"背锅侠"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">default</span> vm</span><br></pre></td></tr></table></figure>
<p>运行的结果如下图，可以发现父组件的内容 “游戏排行榜” 在父组件作用域内编译，并且显示在子组件的默认slot中，而子组件中的内容 “背锅侠”在子组件作用域内编译，显示在子组件中。</p>
<img src="/vue-slot/6.png">
<h3 id="具名插槽的缩写"><a href="#具名插槽的缩写" class="headerlink" title="具名插槽的缩写"></a>具名插槽的缩写</h3><p>跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 (<strong>v-slot:</strong>) 替换为字符 <strong>#</strong>。例如 <strong>v-slot:header</strong> 可以被重写为 <strong>#header</strong></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 <strong>v-slot</strong> 指令)。它取代了 slot 和 slot-scope</p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Slot</tag>
      </tags>
  </entry>
  <entry>
    <title>一行代码实现网页变灰效果</title>
    <url>/website-grayscale/</url>
    <content><![CDATA[<p>前天是 2020 年 4 月 4 日，星期六，清明节。</p>
<p>我们的国家经历了非常惨痛的时刻，很多英雄在救助他人的路上倒下，更有很多烈士英雄保卫人民的安危遇难，今天全国下降半旗，北京时间 10 点全国默哀三分钟，来致敬英雄们。同时今天一切公共娱乐活动也都会停止，包括直播、综艺、影视、游戏等等。</p>
<p>我在这里也向全国抗击新冠肺炎疫情斗争牺牲的烈士和逝世的同胞表达深切的哀悼，向所有抗战在疫情前线的工作和医护人员致敬。我们每一个人的平安面前，都是英雄的人墙。</p>
<h2 id="网站变灰"><a href="#网站变灰" class="headerlink" title="网站变灰"></a>网站变灰</h2><p>今天大家可以看到很多很多网站包括主页和内容也都已经变成了灰色，比如百度、B 站、爱奇艺、CSDN 等等。</p>
<p>CSDN<br><img src="/website-grayscale/1.png"></p>
<p>爱奇艺<br><img src="/website-grayscale/2.png"></p>
<p>百度<br><img src="/website-grayscale/3.png"></p>
<p>大家可以看到全站的内容都变成灰色了，包括按钮、图片等等。这时候我们可能会好奇这是怎么做到的呢？</p>
<p>有人会以为所有的内容都统一换了一个 CSS 样式，图片也全换成灰色的了，按钮等样式也统一换成了灰色样式。但你想想这个成本也太高了，而且万一某个控件忘记加灰色样式了岂不是太突兀了。</p>
<p>其实，解决方案很简单，只需要几行代码就能搞定了。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们选择一个网站，比如 B 站吧，打开浏览器开发者工具。</p>
<p>审查一下网页的源代码，我们可以发现在 html 的这个地方多了一个疑似的 class，叫做 gray，gray 中文即灰色。</p>
<p>变灰效果<br><img src="/website-grayscale/4.png"></p>
<p>其 CSS 内容为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span><span class="selector-class">.gray</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(.95);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们将其取消，就能发现网站的颜色就能重新还原回来了。</p>
<p>还原效果<br><img src="/website-grayscale/5.png"></p>
<p>果然是这个样式在起作用，而且是全局的效果，因为它是作用在了 html 这个节点之上的。</p>
<p>另外看看 CSDN，它也是用的这个 CSS 样式，其内容为：</p>
<p>这个实现看起来兼容性会更好一些。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;   </span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(100%);   </span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(100%);    </span><br><span class="line">    <span class="attribute">-ms-filter</span>: <span class="built_in">grayscale</span>(100%);   </span><br><span class="line">    <span class="attribute">-o-filter</span>: <span class="built_in">grayscale</span>(100%);  </span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%);  </span><br><span class="line">    <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此我们可以确定，通过一个全局的 CSS 样式就能将整个网站变成灰色效果。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>那么这里我们就来详细了解一下这究竟是一个什么样的 CSS 样式。<br>这个样式名叫做 filter，搜下 MDN 的官方介绍，其链接为：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter。" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter。</a></p>
<p>官方介绍内容如下：</p>
<blockquote>
<p><strong><code>filter</code></strong> CSS 属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染。<br>CSS 标准里包含了一些已实现预定义效果的函数。你也可以参考一个 SVG 滤镜，通过一个 URL 链接到 SVG 滤镜元素 (SVG filter element)。</p>
</blockquote>
<p>其实就是一个滤镜的意思。</p>
<p>官方有一个 Demo，可以看下效果，如图所示。</p>
<p>Demo<br><img src="/website-grayscale/6.gif"></p>
<p>比如这里通过 filter 样式改变了图片、颜色、模糊、对比度等等信息。</p>
<p>其所有用法示例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* URL to SVG filter */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">url</span>("<span class="selector-tag">filters</span><span class="selector-class">.svg</span><span class="selector-id">#filter-id</span>");</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;filter-function&gt; values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(5<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">brightness</span>(0<span class="selector-class">.4</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(200%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">drop-shadow</span>(16<span class="selector-tag">px</span> 16<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(50%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">hue-rotate</span>(90<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">invert</span>(75%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">opacity</span>(25%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">saturate</span>(30%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">sepia</span>(60%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple filters */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(175%) <span class="selector-tag">brightness</span>(3%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure>
<p>各个用法介绍大家可以参考官方的文档说明：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a></p>
<p>比如这里如果我们可以使用 blur 设置高斯模糊，用法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(<span class="selector-tag">radius</span>)</span><br></pre></td></tr></table></figure>
<p>给图像设置高斯模糊。radius 一值设定高斯函数的标准差，或者是屏幕上以多少像素融在一起，所以值越大越模糊；如果没有设定值，则默认是 0；这个参数可设置绝对像素值，但不接受百分比值。</p>
<p>可以达成这样的效果：</p>
<p>效果<br><img src="/website-grayscale/7.png"></p>
<p>再说回刚才的灰色图像，这里其实就是设置了 grayscale，其用法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">filter: grayscale(percent)</span><br></pre></td></tr></table></figure>
<p>将图像转换为灰度图像。值定义转换的比例。percent 值为 100% 则完全转为灰度图像，值为 0% 图像无变化。值在 0% 到 100% 之间，则是效果的线性乘子。若未设置，值默认是 0。另外除了传递百分比，还可以传递浮点数，效果是一样的。</p>
<p>如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(1)</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(100%)</span><br></pre></td></tr></table></figure>
<p>都可以将节点转化为 100% 的灰度模式。</p>
<p>所以一切到这里就清楚了，如果我们想要把全站变成灰色，再考虑到各浏览器兼容写法，可以参考下 CSDN 的写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gray</span> &#123;  </span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(100%); </span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(100%);  </span><br><span class="line">    <span class="attribute">-ms-filter</span>: <span class="built_in">grayscale</span>(100%);  </span><br><span class="line">    <span class="attribute">-o-filter</span>: <span class="built_in">grayscale</span>(100%);  </span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%);  </span><br><span class="line">    <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样想要变灰的节点只需要加上 gray 这个 class 就好了，比如加到 html 节点上就可以全站变灰了。</p>
<p>最后呢，看一下浏览器对 filter 这个样式的兼容性怎样，如图所示：</p>
<p>兼容性<br><img src="/website-grayscale/8.png"></p>
<p>这里我们看到，这里除了 IE，其他的 PC、手机端的浏览器都支持了，Firefox 的 PC、安卓端还单独对 SVG 图像加了支持，可以放心使用。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章简单介绍了一下今天观察到的网站变灰的实现，也学习了 filter 的更详细的用法，希望有帮助。</p>
]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>Less基本用法</title>
    <url>/Less/</url>
    <content><![CDATA[<blockquote>
<p>Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言</p>
</blockquote>
<h3 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@width:</span> <span class="number">10px</span>;</span><br><span class="line"><span class="variable">@height:</span> <span class="variable">@width</span> + <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="混合（Mixins）"><a href="#混合（Mixins）" class="headerlink" title="混合（Mixins）"></a>混合（Mixins）</h3><p>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类（class）如下：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们希望在其它规则集中使用这些属性呢？没问题，我们只需像下面这样输入所需属性的类（class）名称即可，如下所示：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">  <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>.bordered 类所包含的属性就将同时出现在 #menu a 和 .post a 中了。（注意，你也可以使用 #ids 作为 mixin 使用。）</p>
<h3 id="嵌套（Nesting）"><a href="#嵌套（Nesting）" class="headerlink" title="嵌套（Nesting）"></a>嵌套（Nesting）</h3><p>Less 提供了使用嵌套（nesting）代替层叠或与层叠结合使用的能力。假设我们有以下 CSS 代码：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.navigation</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 Less 语言我们可以这样书写代码：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="selector-class">.navigation</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 Less 书写的代码更加简洁，并且模仿了 HTML 的组织结构。</p>
<p>你还可以使用此方法将伪选择器（pseudo-selectors）与混合（mixins）一同使用。下面是一个经典的 clearfix 技巧，重写为一个混合（mixin） (<strong>&amp; 表示当前选择器的父级</strong>）：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="规则嵌套和冒泡"><a href="#规则嵌套和冒泡" class="headerlink" title="@规则嵌套和冒泡"></a>@规则嵌套和冒泡</h4><p>@ 规则（例如 @media 或 @supports）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的其它元素的相对顺序保持不变。这叫做冒泡（bubbling）。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.component</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="keyword">@media</span>  (<span class="attribute">min-resolution</span>: <span class="number">192dpi</span>) &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: url(<span class="string">/img/retina2x.png</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译为：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.component</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) and (<span class="attribute">min-resolution</span>: <span class="number">192dpi</span>) &#123;</span><br><span class="line">  <span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">/img/retina2x.png</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运算（Operations）"><a href="#运算（Operations）" class="headerlink" title="运算（Operations）"></a>运算（Operations）</h3><p>算术运算符 +、-、*、/ 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有操作数被转换成相同的单位</span></span><br><span class="line"><span class="variable">@conversion-1:</span> <span class="number">5cm</span> + <span class="number">10mm</span>; <span class="comment">// 结果是 6cm</span></span><br><span class="line"><span class="variable">@conversion-2:</span> <span class="number">2</span> - <span class="number">3cm</span> - <span class="number">5mm</span>; <span class="comment">// 结果是 -1.5cm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// conversion is impossible</span></span><br><span class="line"><span class="variable">@incompatible-units:</span> <span class="number">2</span> + <span class="number">5px</span> - <span class="number">3cm</span>; <span class="comment">// 结果是 4px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example with variables</span></span><br><span class="line"><span class="variable">@base:</span> <span class="number">5%</span>;</span><br><span class="line"><span class="variable">@filler:</span> <span class="variable">@base</span> * <span class="number">2</span>; <span class="comment">// 结果是 10%</span></span><br><span class="line"><span class="variable">@other:</span> <span class="variable">@base</span> + <span class="variable">@filler</span>; <span class="comment">// 结果是 15%</span></span><br></pre></td></tr></table></figure>
<p>乘法和除法不作转换。因为这两种运算在大多数情况下都没有意义，一个长度乘以一个长度就得到一个区域，而 CSS 是不支持指定区域的。Less 将按数字的原样进行操作，并将为计算结果指定明确的单位类型。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@base:</span> <span class="number">2cm</span> * <span class="number">3mm</span>; <span class="comment">// 结果是 6cm</span></span><br></pre></td></tr></table></figure>
<p>你还可以对颜色进行算术运算：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#224488</span> / <span class="number">2</span>; <span class="comment">//结果是 #112244</span></span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#112244</span> + <span class="number">#111</span>; <span class="comment">// 结果是 #223355</span></span><br></pre></td></tr></table></figure>
<h4 id="calc-特例"><a href="#calc-特例" class="headerlink" title="calc() 特例"></a>calc() 特例</h4><p>为了与 CSS 保持兼容，calc() 并不对数学表达式进行计算，但是在嵌套函数中会计算变量和数学公式的值。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">50vh</span>/<span class="number">2</span>;</span><br><span class="line"><span class="attribute">width</span>: calc(<span class="number">50%</span> + (<span class="variable">@var</span> - <span class="number">20px</span>));  <span class="comment">// 结果是 calc(50% + (25vh - 20px))</span></span><br></pre></td></tr></table></figure>
<h3 id="转义（Escaping）"><a href="#转义（Escaping）" class="headerlink" title="转义（Escaping）"></a>转义（Escaping）</h3><p>转义（Escaping）允许你使用任意字符串作为属性或变量值。任何 ~”anything” 或 ~’anything’ 形式的内容都将按原样输出，除非 interpolation。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@min768:</span> <span class="string">~"(min-width: 768px)"</span>;</span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="keyword">@media</span> <span class="variable">@min768</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译为：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，从 Less 3.5 开始，可以简写为：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@min768:</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>);</span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="keyword">@media</span> <span class="variable">@min768</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Less 3.5+ 版本中，许多以前需要“引号转义”的情况就不再需要了。</p>
<h3 id="函数（Functions）"><a href="#函数（Functions）" class="headerlink" title="函数（Functions）"></a>函数（Functions）</h3><p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。这些函数在<a href="https://less.bootcss.com/functions/" title="Less 函数" target="_blank" rel="noopener">Less 函数</a>手册中有详细介绍。</p>
<p>函数的用法非常简单。下面这个例子将介绍如何利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@base:</span> <span class="number">#f04615</span>;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: percentage(<span class="variable">@width</span>); <span class="comment">// returns `50%`</span></span><br><span class="line">  <span class="attribute">color</span>: saturate(<span class="variable">@base</span>, <span class="number">5%</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: spin(lighten(<span class="variable">@base</span>, <span class="number">25%</span>), <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="命名空间和访问符"><a href="#命名空间和访问符" class="headerlink" title="命名空间和访问符"></a>命名空间和访问符</h3><p>(不要和 CSS @namespace 或 namespace selectors 混淆了)。</p>
<p>有时，出于组织结构或仅仅是为了提供一些封装的目的，你希望对混合（mixins）进行分组。你可以用 Less 更直观地实现这一需求。假设你希望将一些混合（mixins）和变量置于 #bundle 之下，为了以后方便重用或分发：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#bundle</span>() &#123;</span><br><span class="line">  <span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tab</span> &#123; ... &#125;</span><br><span class="line">  <span class="selector-class">.citation</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，如果我们希望把 .button 类混合到 #header a 中，我们可以这样做：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="selector-id">#bundle</span><span class="selector-class">.button</span>();  <span class="comment">// 还可以书写为 #bundle &gt; .button 形式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果不希望它们出现在输出的 CSS 中，例如 #bundle .tab，请将 () 附加到命名空间（例如 #bundle()）后面。</p>
<h3 id="映射（Maps）"><a href="#映射（Maps）" class="headerlink" title="映射（Maps）"></a>映射（Maps）</h3><p>从 Less 3.5 版本开始，你还可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#colors</span>() &#123;</span><br><span class="line">  <span class="attribute">primary</span>: blue;</span><br><span class="line">  <span class="attribute">secondary</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: #colors[primary];</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid #colors[secondary];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出符合预期：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="作用域（Scope）"><a href="#作用域（Scope）" class="headerlink" title="作用域（Scope）"></a>作用域（Scope）</h3><p>Less 中的作用域与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="variable">@var:</span> white;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与 CSS 自定义属性一样，混合（mixin）和变量的定义不必在引用之前事先定义。因此，下面的 Less 代码示例和上面的代码示例是相同的：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">@var:</span> white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注释（Comments）"><a href="#注释（Comments）" class="headerlink" title="注释（Comments）"></a>注释（Comments）</h3><p>块注释和行注释都可以使用：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 一个块注释</span></span><br><span class="line"><span class="comment"> * style comment! */</span></span><br><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一行被注释掉了！</span></span><br><span class="line"><span class="variable">@var:</span> white;</span><br></pre></td></tr></table></figure>
<h3 id="导入（Importing）"><a href="#导入（Importing）" class="headerlink" title="导入（Importing）"></a>导入（Importing）</h3><p>“导入”的工作方式和你预期的一样。你可以导入一个 .less 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 .less 扩展名，则可以将扩展名省略掉：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"library"</span>; <span class="comment">// library.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"typo.css"</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Less</category>
      </categories>
      <tags>
        <tag>Css</tag>
        <tag>Less</tag>
      </tags>
  </entry>
  <entry>
    <title>MVVM和Vue.js</title>
    <url>/MVVM/</url>
    <content><![CDATA[<h3 id="先回顾一下前端发展的历史"><a href="#先回顾一下前端发展的历史" class="headerlink" title="先回顾一下前端发展的历史"></a>先回顾一下前端发展的历史</h3><p>在上个世纪的1989年，欧洲核子研究中心的物理学家Tim Berners-Lee发明了超文本标记语言（HyperText Markup Language），简称HTML，并在1993年成为互联网草案。从此，互联网开始迅速商业化，诞生了一大批商业网站。</p>
<p>最早的HTML页面是完全静态的网页，它们是预先编写好的存放在Web服务器上的html文件。浏览器请求某个URL时，Web服务器把对应的html文件扔给浏览器，就可以显示html文件的内容了。</p>
<p>如果要针对不同的用户显示不同的页面，显然不可能给成千上万的用户准备好成千上万的不同的html文件，所以，服务器就需要针对不同的用户，动态生成不同的html文件。一个最直接的想法就是利用C、C++这些编程语言，直接向浏览器输出拼接后的字符串。这种技术被称为CGI：Common Gateway Interface。</p>
<p>很显然，像新浪首页这样的复杂的HTML是不可能通过拼字符串得到的。于是，人们又发现，其实拼字符串的时候，大多数字符串都是HTML片段，是不变的，变化的只有少数和用户相关的数据，所以，又出现了新的创建动态HTML的方式：ASP、JSP和PHP——分别由微软、SUN和开源社区开发。</p>
<p>在ASP中，一个asp文件就是一个HTML，但是，需要替换的变量用特殊的&lt;%=var%&gt;标记出来了，再配合循环、条件判断，创建动态HTML就比CGI要容易得多。</p>
<p>但是，一旦浏览器显示了一个HTML页面，要更新页面内容，唯一的方法就是重新向服务器获取一份新的HTML内容。如果浏览器想要自己修改HTML页面的内容，就需要等到1995年年底，JavaScript被引入到浏览器。</p>
<p>有了JavaScript后，浏览器就可以运行JavaScript，然后，对页面进行一些修改。JavaScript还可以通过修改HTML的DOM结构和CSS来实现一些动画效果，而这些功能没法通过服务器完成，必须在浏览器实现。</p>
<h4 id="用JavaScript在浏览器中操作HTML，经历了若干发展阶段："><a href="#用JavaScript在浏览器中操作HTML，经历了若干发展阶段：" class="headerlink" title="用JavaScript在浏览器中操作HTML，经历了若干发展阶段："></a>用JavaScript在浏览器中操作HTML，经历了若干发展阶段：</h4><h5 id="第一阶段，直接用JavaScript操作DOM节点，使用浏览器提供的原生API："><a href="#第一阶段，直接用JavaScript操作DOM节点，使用浏览器提供的原生API：" class="headerlink" title="第一阶段，直接用JavaScript操作DOM节点，使用浏览器提供的原生API："></a>第一阶段，直接用JavaScript操作DOM节点，使用浏览器提供的原生API：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">'name'</span>);</span><br><span class="line">dom.innerHTML = <span class="string">'Homer'</span>;</span><br><span class="line">dom.style.color = <span class="string">'red'</span>;</span><br></pre></td></tr></table></figure>
<h5 id="第二阶段，由于原生API不好用，还要考虑浏览器兼容性，jQuery横空出世，以简洁的API迅速俘获了前端开发者的芳心："><a href="#第二阶段，由于原生API不好用，还要考虑浏览器兼容性，jQuery横空出世，以简洁的API迅速俘获了前端开发者的芳心：" class="headerlink" title="第二阶段，由于原生API不好用，还要考虑浏览器兼容性，jQuery横空出世，以简洁的API迅速俘获了前端开发者的芳心："></a>第二阶段，由于原生API不好用，还要考虑浏览器兼容性，jQuery横空出世，以简洁的API迅速俘获了前端开发者的芳心：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#name'</span>).text(<span class="string">'Homer'</span>).css(<span class="string">'color'</span>, <span class="string">'red'</span>);</span><br></pre></td></tr></table></figure>
<h5 id="第三阶段，MVC模式，需要服务器端配合，JavaScript可以在前端修改服务器渲染后的数据。"><a href="#第三阶段，MVC模式，需要服务器端配合，JavaScript可以在前端修改服务器渲染后的数据。" class="headerlink" title="第三阶段，MVC模式，需要服务器端配合，JavaScript可以在前端修改服务器渲染后的数据。"></a>第三阶段，MVC模式，需要服务器端配合，JavaScript可以在前端修改服务器渲染后的数据。</h5><p>现在，随着前端页面越来越复杂，用户对于交互性要求也越来越高，想要写出Gmail这样的页面，仅仅用jQuery是远远不够的。MVVM模型应运而生。</p>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>MVC 即 <font color="red">Model-View-Controller</font> 的缩写，就是 模型-视图-控制器 , 也就是说一个标准的Web 应用程序是由这三部分组成的：  </p>
<ul>
<li>View（模型） 用来把数据以某种方式呈现给用户。</li>
<li>Model（视图） 其实就是数据。</li>
<li>Controller（控制器） 收并处理来自用户的请求，并将 Model 返回给用户。<br>在HTML5 还未火起来的那些年，MVC 作为Web 应用的最佳实践是OK 的，这是因为 Web 应用的View 层相对来说比较简单，前端所需要的数据在后端基本上都可以处理好，View 层主要是做一下展示，那时候提倡的是 Controller 来处理复杂的业务逻辑，所以View 层相对来说比较轻量，就是所谓的瘦客户端思想。</li>
</ul>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM 是<font color="red">Model-View-ViewModel</font> 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的<font color="red">数据双向绑定</font>。</p>
<p>MVVM最早由微软提出来，它借鉴了桌面应用程序的MVC思想，在前端页面中，把Model用纯JavaScript对象表示，View负责显示，两者做到了最大限度的分离。</p>
<p>把Model和View关联起来的就是ViewModel。ViewModel负责把Model的数据同步到View显示出来，还负责把View的修改同步回Model。</p>
<p>ViewModel如何编写？需要用JavaScript编写一个通用的ViewModel，这样，就可以复用整个MVVM模型了。</p>
<p>一个MVVM框架和jQuery操作DOM相比有什么区别？</p>
<p>我们先看用jQuery实现的修改两个DOM节点的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span>Bart<span class="tag">&lt;/<span class="name">span</span>&gt;</span>!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You are <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"age"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Hello, <font color="red">Homer</font>!<br>You are <font color="red">51</font>.</p>
<p>用jQuery修改name和age节点的内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Homer'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">51</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#name'</span>).text(name);</span><br><span class="line">$(<span class="string">'#age'</span>).text(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行代码并观察页面变化</span></span><br></pre></td></tr></table></figure>
<p>如果我们使用MVVM框架来实现同样的功能，我们首先并不关心DOM的结构，而是关心数据如何存储。最简单的数据存储方式是使用JavaScript对象：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: 'Bart',</span><br><span class="line">    age: 12</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们把变量person看作Model，把HTML某些DOM节点看作View，并假定它们之间被关联起来了。</p>
<p>要把显示的name从Bart改为Homer，把显示的age从12改为51，我们并不操作DOM，而是直接修改JavaScript对象：</p>
<p>Hello, <font color="red">Homer</font>!<br>You are <font color="red">51</font>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line">person.name = <span class="string">'Homer'</span>;</span><br><span class="line">person.age = <span class="number">51</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行代码并观察页面变化</span></span><br></pre></td></tr></table></figure>
<p>执行上面的代码，我们惊讶地发现，改变JavaScript对象的状态，会导致DOM结构作出对应的变化！这让我们的关注点从如何操作DOM变成了如何更新JavaScript对象的状态，而操作JavaScript对象比DOM简单多了！</p>
<p>这就是MVVM的设计思想：关注Model的变化，让MVVM框架去自动更新DOM的状态，从而把开发者从操作DOM的繁琐步骤中解脱出来！</p>
<h3 id="Vue-js-与-MVVM"><a href="#Vue-js-与-MVVM" class="headerlink" title="Vue.js 与 MVVM"></a>Vue.js 与 MVVM</h3><p>Vue.js 可以说是MVVM 架构的最佳实践，专注于 MVVM 中的 ViewModel，不仅做到了数据双向绑定，而且也是一款相对比较轻量级的JS 库，API 简洁，很容易上手。Vue的基础知识网上有现成的教程，此处不再赘述， 下面简单了解一下 Vue.js 关于双向绑定的一些实现细节：</p>
<p>Vue.js 是采用 Object.defineProperty 的 getter 和 setter，并结合观察者模式来实现数据绑定的。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p>
<img src="/MVVM/1.png">
<ul>
<li><p>Observer 数据监听器，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者，内部采用Object.defineProperty的getter和setter来实现。</p>
</li>
<li><p>Compile 指令解析器，它的作用对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数。</p>
</li>
<li><p>Watcher 订阅者， 作为连接 Observer 和 Compile 的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数。</p>
</li>
<li><p>Dep 消息订阅器，内部维护了一个数组，用来收集订阅者（Watcher），数据变动触发notify 函数，再调用订阅者的 update 方法。</p>
</li>
</ul>
<p>从图中可以看出，当执行 new Vue() 时，Vue 就进入了初始化阶段，一方面Vue 会遍历 data 选项中的属性，并用 Object.defineProperty 将它们转为 getter/setter，实现数据变化监听功能；另一方面，Vue 的指令编译器Compile 对元素节点的指令进行扫描和解析，初始化视图，并订阅Watcher 来更新视图， 此时Wather 会将自己添加到消息订阅器中(Dep),初始化完毕。</p>
<p>当数据发生变化时，Observer 中的 setter 方法被触发，setter 会立即调用Dep.notify()，Dep 开始遍历所有的订阅者，并调用订阅者的 update 方法，订阅者收到通知后对视图进行相应的更新。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue.js</tag>
        <tag>MVVM</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>H5的Notification特性 - Web的桌面通知功能</title>
    <url>/Notification/</url>
    <content><![CDATA[<p>目前，web网页使用桌面通知功能的越来越多，包括微博，腾讯视频等大厂站，桌面通知功能是H5的一个API - <strong>Notifications</strong>。它允许网页或应用程序可以发出通知，通知将被显示在页面之外的系统层面上（通常使用操作系统的标准通知机制，但是在不同的平台和浏览器上的表现会有差异），这样即使应用程序空闲或在后台也可以向用户发送信息。<br><a id="more"></a></p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><strong>Notifications</strong>的诞生简化了网站或者应用与用户之间的沟通成本（时间成本和开发成本），增强用户黏性（减少了用户离开应用的可能）。传统的通知方式，大多是通过站内信（消息），邮件，短信等方式，它们通常需要刷新（跳转）页面、离开应用打开其他应用或终端来查看消息；而桌面通知功能大大的简化了这个过程，消息的传递基本不消耗时间（如果不设置<strong>setTimeout</strong>，用时基本不会超过1s），并且用户不需要离开应用，这都带来了极大的方便。可以预见，<strong>Notifications</strong>将会在很多网页或应用中被大量使用。当然<strong>Notifications</strong>也具有它的局限性：无法存档、即看即毁<br>那么，这个功能到底能用在哪些场景呢？只能说能应用的场景很多：</p>
<ul>
<li>社交类网站</li>
<li>资讯类网站</li>
<li>网页版邮件服务</li>
<li>即时通知类网站</li>
<li>…</li>
</ul>
<p>举个例子，当你打开微博页面，你可能会看到（使用新版浏览器）如下图的通知：</p>
<img src="/Notification/1.png">
<p>这就是网站使用了桌面通知功能，当你选择允许，那么当网站有推送消息或者你登陆账号有新的消息将会在桌面的右下角出现一个小弹窗通知，如下：</p>
<img src="/Notification/2.png">
<p>感觉有点酷酷的！！！</p>
<h3 id="用户权限-Notification-permission"><a href="#用户权限-Notification-permission" class="headerlink" title="用户权限 - Notification.permission"></a>用户权限 - Notification.permission</h3><p><strong>Notification.permission</strong>是一个静态方法，可以获取用户当前的通知权限状态，返回一个<strong>String</strong>，可以根据返回值判断用户是否授予了通知权限。返回值有三种情况：</p>
<ul>
<li>default<ul>
<li>用户还未被询问是否授权，所以通知不会被显示。</li>
</ul>
</li>
<li>granted<ul>
<li>表示之前已经询问过用户，并且用户已经授予了显示通知的权限。</li>
</ul>
</li>
<li>denied<ul>
<li>用户已经明确的拒绝了显示通知的权限。<br>当值为<strong>default</strong>或者<strong>denied</strong>时都不会显示通知消息，只有明确的被设置成<strong>granted</strong>才会显示通知消息</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> permission = Notification.permission;</span><br><span class="line"><span class="keyword">if</span>(permission === <span class="string">'granted'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'已经授权通知，可以进行你的通知啦！'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户还未授权，请先授权！'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="请求权限-Notification-requestPermission-CALLBACK"><a href="#请求权限-Notification-requestPermission-CALLBACK" class="headerlink" title="请求权限 - Notification.requestPermission(CALLBACK)"></a>请求权限 - Notification.requestPermission(CALLBACK)</h3><p>应用发送通知之前必须要取得发送通知的权限，才能成功进行通知。<strong>Notification.requestPermission(CALLBACK)</strong>是请求获取权限的方法（有点类似javascript的<strong>confirm</strong>弹窗窗），允许传入一个回调，回调会返回用户选择的何种权限，返回两个值，<strong>granted</strong>代表允许，<strong>denied</strong>代表拒绝。并且<strong>Notification.requestPermission()</strong>支持<strong>then方</strong>式的链式调用，也就意味着可以异步调用它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Notification.requestPermission(function (permission) &#123;</span><br><span class="line">    console.log(&apos;用户是否允许通知： &apos;,permission === &apos;granted&apos; ? &apos;允许&apos; : &apos;拒绝&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//两种方式是等价的</span><br><span class="line">Notification.requestPermission().then(function (permission) &#123;</span><br><span class="line">    console.log(&apos;用户是否允许通知： &apos;,permission === &apos;granted&apos; ? &apos;允许&apos; : &apos;拒绝&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="创建通知-new-Notification-TITLE-OPTIONS"><a href="#创建通知-new-Notification-TITLE-OPTIONS" class="headerlink" title="创建通知 - new Notification(TITLE, OPTIONS)"></a>创建通知 - new Notification(TITLE, OPTIONS)</h3><p><strong>new Notification(TITLE, OPTIONS)</strong>方法创建可以创建一个通知实例，允许参入参数两个参数<strong>TITLE</strong>和<strong>OPTIONS</strong>。注意默认情况下（实际可以通过<strong>OPTIONS</strong>中的<strong>timestamp</strong>参数控制）一旦通知实例被创建出来，它会立即被显示出来。</p>
<h4 id="TITLE参数"><a href="#TITLE参数" class="headerlink" title="TITLE参数"></a>TITLE参数</h4><p>TITLE表示通知的标题。必须参数，允许数字、字符串和空</p>
<h4 id="OPTIONS参数"><a href="#OPTIONS参数" class="headerlink" title="OPTIONS参数"></a>OPTIONS参数</h4><p>OPTIONS是非必须参数，必须为一个对象，它包含：<br>ps: 部分参数在某些浏览器可能会不生效，建议使用最新版的谷歌浏览器。以下某些内容从<a href="https://developer.mozilla.org/en-US/docs/Web/API/notification" target="_blank" rel="noopener">Notification-MDN-EN</a>结合谷歌翻译得来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    //通知显示正文。非必须，默认为空</span><br><span class="line">    body: &apos;你的好友XX上线了！&apos;,</span><br><span class="line">    //通知显示正文的图片地址。非必须，默认为空</span><br><span class="line">    image: &apos;imgae url&apos;,</span><br><span class="line">    //通知左侧图标。非必须，默认为空</span><br><span class="line">    icon: &apos;imgae url&apos;,</span><br><span class="line">    //通知的分类标记（ID）。非必须，默认为空</span><br><span class="line">    tag: &apos;test&apos;,</span><br><span class="line">    //通知相关联的数据，通常用于方法的回调，传参。非必须，默认为空</span><br><span class="line">    data: &apos;可以是任意数据类型&apos;,</span><br><span class="line">    //通知显示延迟的时间。非必须，默认通知实例创建完成就显示</span><br><span class="line">    timestamp: &apos;&apos;,</span><br><span class="line">    //通知主体内容的水平展示顺序，有点类似direction属性。非必须，默认值是auto, 可以是ltr或rtl</span><br><span class="line">    dir: &apos;auto&apos;,</span><br><span class="line">    //当没有足够的空间来显示通知本身时，用于表示通知的图像的URL。非必须，默认为空</span><br><span class="line">    badge: &apos;xxx&apos;,</span><br><span class="line">    //通知的语言。非必须默认为空</span><br><span class="line">    lang: &apos;&apos;,</span><br><span class="line">    //通知显示时，设备的振动模式。非必须，默认为空</span><br><span class="line">    vibrate: [200, 100, 200],</span><br><span class="line">    //新通知出现是否覆盖旧的通知，覆盖（true）则永远只显示一条通知，不覆盖（false）则会多条通知重叠。非必须，默认为true</span><br><span class="line">    renotify: true,</span><br><span class="line">    //通知是否静音。非必须，默认为false，表示无声</span><br><span class="line">    silent: false,</span><br><span class="line">    //通知声源文件地址。非必须，默认为空</span><br><span class="line">    sound: &apos;mp3&apos;,</span><br><span class="line">    //是否不在屏幕上显示通知信息。非必须，默认为false表示要显示</span><br><span class="line">    noscreen: false,</span><br><span class="line">    //指定通知是否应该粘滞性，即不容易被用户清理。非必须，默认false表示不具粘滞性</span><br><span class="line">    sticky: false,</span><br><span class="line">    //指定通知是否保持活性，知道用户点击或关闭。非必须，默认为false</span><br><span class="line">    requireInteraction: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="事件及事件钩子"><a href="#事件及事件钩子" class="headerlink" title="事件及事件钩子"></a>事件及事件钩子</h4><p>当通知被创建成功后：</p>
<ul>
<li>通知实例具有一个静态方法可以用来关闭通知</li>
<li>通知实例具有四个事件钩子，来跟踪通知当前的状态。这些事件可以通过事件处理跟踪<strong>onshow、onclick、onclose和onerror</strong>。因为<strong>Notification</strong>同样继承自<strong>EventTarget</strong>，因此可以对它调用<strong>addEventListener()</strong>方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const n = new Notification(&apos;XX网站消息通知&apos;, &#123;</span><br><span class="line">    body: &apos;你的朋友有新状态啦，快去围观吧！&apos;,</span><br><span class="line">    tag: &apos;2ue&apos;,</span><br><span class="line">    icon: &apos;https://2ue.github.io/images/common/avatar.png&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        url: &apos;https://2ue.github.io&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    timestamp: 3000</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">n.onshow = function () &#123;</span><br><span class="line">    console.log(&apos;通知显示了！&apos;);</span><br><span class="line">&#125;</span><br><span class="line">n.onclick = function (e) &#123;</span><br><span class="line">    //可以直接通过实例的方式获取data内自定义的数据</span><br><span class="line">    //也可以通过访问回调参数e来获取data的数据</span><br><span class="line">    window.open(n.data.url, &apos;_blank&apos;);</span><br><span class="line">    n.close();</span><br><span class="line">&#125;</span><br><span class="line">n.onclose = function () &#123;</span><br><span class="line">    console.log(&apos;你墙壁了我！！！&apos;);</span><br><span class="line">&#125;</span><br><span class="line">n.onerror = function (err) &#123;</span><br><span class="line">    console.log(&apos;出错了，小伙子在检查一下吧&apos;);</span><br><span class="line">    throw err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>写一个简单的例子，可以打开页面体验一下，建议用最新版谷歌浏览器打开。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const NotificationInstance = Notification || window.Notification;</span><br><span class="line">if (!!NotificationInstance) &#123;</span><br><span class="line">    const permissionNow = NotificationInstance.permission;</span><br><span class="line">    if (permissionNow === &apos;granted&apos;) &#123;//允许通知</span><br><span class="line">        CreatNotification();</span><br><span class="line">    &#125; else if (permissionNow === &apos;denied&apos;) &#123;</span><br><span class="line">        console.log(&apos;用户拒绝了你!!!&apos;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        setPermission();</span><br><span class="line">    &#125;</span><br><span class="line">    function setPermission() &#123;</span><br><span class="line">        //请求获取通知权限</span><br><span class="line">        NotificationInstance.requestPermission(function (PERMISSION) &#123;</span><br><span class="line">            if (PERMISSION === &apos;granted&apos;) &#123;</span><br><span class="line">                CreatNotification();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(&apos;用户无情残忍的拒绝了你!!!&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    function CreatNotification() &#123;</span><br><span class="line">        const n = new NotificationInstance(&apos;XX网站消息通知&apos;, &#123;</span><br><span class="line">            body: &apos;你的朋友有新状态啦，快去围观吧！&apos;,</span><br><span class="line">            tag: &apos;2ue&apos;,</span><br><span class="line">            icon: &apos;https://2ue.github.io/images/common/avatar.png&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                url: &apos;https://2ue.github.io&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        n.onshow = function () &#123;</span><br><span class="line">            console.log(&apos;通知显示了！&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        n.onclick = function (e) &#123;</span><br><span class="line">            //可以直接通过实例的方式获取data内自定义的数据</span><br><span class="line">            //也可以通过访问回调参数e来获取data的数据</span><br><span class="line">            window.open(n.data.url, &apos;_blank&apos;);</span><br><span class="line">            n.close();</span><br><span class="line">        &#125;</span><br><span class="line">        n.onclose = function () &#123;</span><br><span class="line">            console.log(&apos;你墙壁了我！！！&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        n.onerror = function (err) &#123;</span><br><span class="line">            console.log(&apos;出错了，小伙子在检查一下吧&apos;);</span><br><span class="line">            throw err;</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            n.close();</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h3><p>Notifications是H5的新特性，毫无疑问，它的兼容肯定是一篇哀嚎。</p>
<p>Notifications PC端兼容性</p>
<img src="/Notification/3.png">
<p>Notifications 移动端兼容性</p>
<img src="/Notification/4.png">]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>H5</tag>
        <tag>Notification</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Data对象方法整理</title>
    <url>/date-methods/</url>
    <content><![CDATA[<blockquote>
<p>我整理这些知识点是在2019年6月6号，为以下数据作为参考！</p>
</blockquote>
<h2 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h2><h3 id="getFullYear"><a href="#getFullYear" class="headerlink" title="getFullYear()"></a>getFullYear()</h3><p>从 Date 对象返回一个表示年份的 4 位数字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getFullYear();<span class="comment">//返回年份</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//2019</span></span><br></pre></td></tr></table></figure>
<h3 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth()"></a>getMonth()</h3><p>从 Date 对象返回表示月份的数字。返回值是 0（一月） 到 11（十二月） 之间的一个整数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getMonth();<span class="comment">//返回月份</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<h3 id="getDate"><a href="#getDate" class="headerlink" title="getDate()"></a>getDate()</h3><p>从 Date 对象返回一个月中 (1 ~ 31) 的某一天的数字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getDate();<span class="comment">//返回月份的某一天</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//Thu Dec 06 2018 10:26:48 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//6</span></span><br></pre></td></tr></table></figure>
<h3 id="getDay"><a href="#getDay" class="headerlink" title="getDay()"></a>getDay()</h3><p>从 Date 对象返回一周中 (0 ~ 6) 的某一天的数字。</p>
<ul>
<li>注意： 星期天为 0, 星期一为 1, 以此类推。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getDay();<span class="comment">//返回星期几</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<h3 id="getHours"><a href="#getHours" class="headerlink" title="getHours()"></a>getHours()</h3><p>返回 Date 对象的小时 (0 ~ 23)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getHours();<span class="comment">//返回小时</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//10 - 以当时整理时间为准的</span></span><br></pre></td></tr></table></figure>
<h3 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes()"></a>getMinutes()</h3><p>返回 Date 对象的分钟 (0 ~ 59)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getMinutes();<span class="comment">//返回分钟</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//2 - 以当时整理时间为准的</span></span><br></pre></td></tr></table></figure>
<h3 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds()"></a>getSeconds()</h3><p>返回 Date 对象的秒数 (0 ~ 59)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getSeconds();<span class="comment">//返回秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//11 - 以当时整理时间为准的</span></span><br></pre></td></tr></table></figure>
<h3 id="getMilliseconds"><a href="#getMilliseconds" class="headerlink" title="getMilliseconds()"></a>getMilliseconds()</h3><p>返回 Date 对象的毫秒(0 ~ 999)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getMilliseconds();<span class="comment">//返回毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//100 - 以当时整理时间为准的</span></span><br></pre></td></tr></table></figure>
<h3 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h3><p>返回 1970 年 1 月 1 日至今的毫秒数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getTime();<span class="comment">//返回距 1970 年 1 月 1 日之间的毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//1559786854978 - 以当时整理时间为准的</span></span><br></pre></td></tr></table></figure>
<h3 id="parse-string"><a href="#parse-string" class="headerlink" title="parse(string)"></a>parse(string)</h3><p>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</p>
<ul>
<li>唯一一个参数（必选）表示日期和时间的字符串。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="built_in">Date</span>.parse(<span class="string">"March 21, 2012"</span>);<span class="comment">//返回1970/01/01至2012/3/21之间的毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//1332259200000</span></span><br></pre></td></tr></table></figure>
<h3 id="getUTCFullYear"><a href="#getUTCFullYear" class="headerlink" title="getUTCFullYear()"></a>getUTCFullYear()</h3><p>根据世界时从 Date 对象返回四位数的年份。</p>
<ul>
<li><p>协调世界时 (UTC) 是以原子时秒长为基础，在时刻上尽量接近于世界时的一种时间计量系统。</p>
</li>
<li><p>协调世界时，又称世界统一时间，世界标准时间，国际协调时间，简称UTC（ Universal Coordinated Time ) 。</p>
</li>
<li><p>UTC 时间类似于 GMT 时间；UTC 时间即是 GMT（格林尼治） 时间。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getUTCFullYear();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//2019</span></span><br></pre></td></tr></table></figure>
<h3 id="getUTCMonth"><a href="#getUTCMonth" class="headerlink" title="getUTCMonth()"></a>getUTCMonth()</h3><p>根据世界时从 Date 对象返回月份 (0 ~ 11)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getUTCMonth();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<h3 id="getUTCDate"><a href="#getUTCDate" class="headerlink" title="getUTCDate()"></a>getUTCDate()</h3><p>根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getUTCDate();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//6</span></span><br></pre></td></tr></table></figure>
<h3 id="getUTCDay"><a href="#getUTCDay" class="headerlink" title="getUTCDay()"></a>getUTCDay()</h3><p>根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getUTCDay();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<h3 id="getUTCHours"><a href="#getUTCHours" class="headerlink" title="getUTCHours()"></a>getUTCHours()</h3><p>根据世界时返回 Date 对象的小时 (0 ~ 23)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getUTCHours();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//2 - 以当时整理时间为准的</span></span><br></pre></td></tr></table></figure>
<h3 id="getUTCMinutes"><a href="#getUTCMinutes" class="headerlink" title="getUTCMinutes()"></a>getUTCMinutes()</h3><p>根据世界时返回 Date 对象的分钟 (0 ~ 59)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getUTCMinutes();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//22 - 以当时整理时间为准的</span></span><br></pre></td></tr></table></figure>
<h3 id="getUTCSeconds"><a href="#getUTCSeconds" class="headerlink" title="getUTCSeconds()"></a>getUTCSeconds()</h3><p>根据世界时返回 Date 对象的秒钟 (0 ~ 59)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getUTCSeconds();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//26 - 以当时整理时间为准的</span></span><br></pre></td></tr></table></figure>
<h3 id="getUTCMilliseconds"><a href="#getUTCMilliseconds" class="headerlink" title="getUTCMilliseconds()"></a>getUTCMilliseconds()</h3><p>根据世界时返回 Date 对象的毫秒(0 ~ 999)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.getUTCMilliseconds();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//651 - 以当时整理时间为准的</span></span><br></pre></td></tr></table></figure>
<h2 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h2><h3 id="setFullYear-year-month-day"><a href="#setFullYear-year-month-day" class="headerlink" title="setFullYear(year,month,day)"></a>setFullYear(year,month,day)</h3><p>设置 Date 对象中的年份（四位数字），返回1970年1月1日午夜至调整过日期的毫秒。</p>
<ul>
<li><p>第一个参数（必选）表示年份的四位整数。用本地时间表示。</p>
</li>
<li><p>第二个参数（可选）表示月份的数值，用本地时间表示。介于 0 ~ 11 之间：-1 为去年的最后一个月、12 为明年的第一个月、13 为明年的第二个月</p>
</li>
<li><p>第三个参数（可选）表示月中某一天的数值，用本地时间表示。介于 1 ~ 31 之间：0 为上个月最后一天、-1 为上个月最后一天之前的天数；如果当月有31天：32 为下个月的第一天；如果当月有30天：32 为下一个月的第二天。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.setFullYear(<span class="number">2020</span>);<span class="comment">//设置年份为 2020</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//Sat Jun 06 2020 10:26:48 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//1591410524248</span></span><br><span class="line"><span class="keyword">let</span> m = d.setFullYear(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">3</span>);<span class="comment">//把日期设置为 November 3, 2020</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//Tue Nov 03 2020 10:37:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//1557111215281</span></span><br></pre></td></tr></table></figure>
<h3 id="setMonth-month-day"><a href="#setMonth-month-day" class="headerlink" title="setMonth(month,day)"></a>setMonth(month,day)</h3><p>设置 Date 对象中月份 (0 ~ 11)，返回1970年1月1日午夜至调整过日期的毫秒。</p>
<ul>
<li><p>第一个参数（必选）表示月份的数值，该值介于 0（一月） ~ 11（十二月） 之间：-1 为去年的最后一个月、12 为明年的第一个月、13 为明年的第二个月。</p>
</li>
<li><p>第二个参数（可选）表示月的某一天的数值，该值介于 1 ~ 31 之间（以本地时间计）:0 为上个月的最后一天、-1 为上个月的最后一天之前的一天；如果当月有31天：32 为下个月的第一天；如果当月有30天：32 为下个月的第二天。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.setMonth(<span class="number">4</span>);<span class="comment">//设置月份参数为 4 (5月份)</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//Mon May 06 2019 10:57:03 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//1557111698763</span></span><br><span class="line"><span class="keyword">let</span> m = d.setMonth(<span class="number">4</span>, <span class="number">20</span>);<span class="comment">//设置日期为4月20号</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//Mon May 20 2019 10:57:03 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//1558321392217</span></span><br></pre></td></tr></table></figure>
<h3 id="setDate-day"><a href="#setDate-day" class="headerlink" title="setDate(day)"></a>setDate(day)</h3><p>设置 Date 对象中月的某一天 (1 ~ 31)，返回1970年1月1日午夜至调整过日期的毫秒。</p>
<ul>
<li>唯一个一个（必选）参数表示一个月中的一天的一个数值（1 ~ 31）：0 为上一个月的最后一天、-1 为上一个月最后一天之前的一天；如果当月有 31 天：32 为下个月的第一天；如果当月有 30 天：32 为下一个月的第二天。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.setDate(<span class="number">15</span>);<span class="comment">//设置一个月的某一天</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//Sat Jun 15 2019 11:04:36 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//1560568199819</span></span><br></pre></td></tr></table></figure>
<h3 id="setTime-millisec"><a href="#setTime-millisec" class="headerlink" title="setTime(millisec)"></a>setTime(millisec)</h3><p>以毫秒设置 Date 对象，返回参数 millisec。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.setTime(<span class="number">1332403882588</span>);<span class="comment">//将向 1970年01月01日 添加 1332403882588毫秒，并显示新的日期和时间</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//Thu Mar 22 2012 16:11:22 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//1332403882588</span></span><br></pre></td></tr></table></figure>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setHours() - 设置 <span class="built_in">Date</span> 对象中的小时 (<span class="number">0</span> ~ <span class="number">23</span>)。</span><br><span class="line">setMinutes() - 设置 <span class="built_in">Date</span> 对象中的分钟 (<span class="number">0</span> ~ <span class="number">59</span>)。</span><br><span class="line">setSeconds() - 设置 <span class="built_in">Date</span> 对象中的秒钟 (<span class="number">0</span> ~ <span class="number">59</span>)。</span><br><span class="line">setMilliseconds() - 设置 <span class="built_in">Date</span> 对象中的毫秒 (<span class="number">0</span> ~ <span class="number">999</span>)。</span><br><span class="line">setUTCFullYear() - 根据世界时设置 <span class="built_in">Date</span> 对象中的年份（四位数字）。</span><br><span class="line">setUTCMonth() - 根据世界时设置 <span class="built_in">Date</span> 对象中的月份 (<span class="number">0</span> ~ <span class="number">11</span>)。</span><br><span class="line">setUTCDate() - 根据世界时设置 <span class="built_in">Date</span> 对象中月份的一天 (<span class="number">1</span> ~ <span class="number">31</span>)。</span><br><span class="line">setUTCHours() - 根据世界时设置 <span class="built_in">Date</span> 对象中的小时 (<span class="number">0</span> ~ <span class="number">23</span>)。</span><br><span class="line">setUTCMinutes() - 根据世界时设置 <span class="built_in">Date</span> 对象中的分钟 (<span class="number">0</span> ~ <span class="number">59</span>)。</span><br><span class="line">setUTCSeconds() - 根据世界时 (UTC) 设置指定时间的秒字段。</span><br><span class="line">setUTCMilliseconds() - 根据世界时设置 <span class="built_in">Date</span> 对象中的毫秒 (<span class="number">0</span> ~ <span class="number">999</span>)。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>具体明细请看：<a href="https://www.runoob.com/jsref/jsref-obj-date.html" target="_blank" rel="noopener">https://www.runoob.com/jsref/jsref-obj-date.html</a></p>
</blockquote>
<h2 id="转换字符串"><a href="#转换字符串" class="headerlink" title="转换字符串"></a>转换字符串</h2><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>把 Date 对象转换为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.toString();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//Thu Jun 06 2019 13:46:18 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>
<h3 id="toDateString"><a href="#toDateString" class="headerlink" title="toDateString()"></a>toDateString()</h3><p>把 Date 对象的日期部分转换为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.toDateString();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//Thu Jun 06 2019</span></span><br></pre></td></tr></table></figure>
<h3 id="toLocaleDateString"><a href="#toLocaleDateString" class="headerlink" title="toLocaleDateString()"></a>toLocaleDateString()</h3><p>根据本地时间格式，把 Date 对象的日期部分转换为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.toLocaleDateString();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//2019-6-6</span></span><br></pre></td></tr></table></figure>
<h3 id="toISOString"><a href="#toISOString" class="headerlink" title="toISOString()"></a>toISOString()</h3><p>使用 ISO 标准返回字符串的日期格式。</p>
<ul>
<li>该标准称为 ISO-8601 ，格式为: YYYY-MM-DDTHH:mm:ss.sssZ</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.toISOString();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//2019-06-06T05:42:52.528Z</span></span><br></pre></td></tr></table></figure>
<h3 id="toJSON"><a href="#toJSON" class="headerlink" title="toJSON()"></a>toJSON()</h3><p>以 JSON 数据格式返回日期字符串。</p>
<ul>
<li>JSON 数据用同样的格式就像x ISO-8601 标准: YYYY-MM-DDTHH:mm:ss.sssZ</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.toJSON();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//2019-06-06T05:44:32.863Z</span></span><br></pre></td></tr></table></figure>
<h3 id="toTimeString"><a href="#toTimeString" class="headerlink" title="toTimeString()"></a>toTimeString()</h3><p>把 Date 对象的时间部分转换为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.toTimeString();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//13:50:22 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>
<h3 id="toLocaleTimeString"><a href="#toLocaleTimeString" class="headerlink" title="toLocaleTimeString()"></a>toLocaleTimeString()</h3><p>根据本地时间格式，把 Date 对象的时间部分转换为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.toLocaleTimeString();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//13:49:14</span></span><br></pre></td></tr></table></figure>
<h3 id="toUTCString"><a href="#toUTCString" class="headerlink" title="toUTCString()"></a>toUTCString()</h3><p>根据世界时 (UTC) ，把 Date 对象转换为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.toUTCString();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//Thu, 06 Jun 2019 05:51:01 GMT</span></span><br></pre></td></tr></table></figure>
<h3 id="UTC-year-month-day-hours-minutes-seconds-millisec"><a href="#UTC-year-month-day-hours-minutes-seconds-millisec" class="headerlink" title="UTC(year, month, day, hours, minutes, seconds, millisec)"></a>UTC(year, month, day, hours, minutes, seconds, millisec)</h3><p>根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。</p>
<ul>
<li>year  必需。表示年份的四位数字。</li>
<li>month 必需。表示月份的整数，介于 0 ~ 11。</li>
<li>day   必需。表示日期的整数，介于 1 ~ 31。</li>
<li>hours 可选。表示小时的整数，介于 0 ~ 23。</li>
<li>minutes   可选。表示分钟的整数，介于 0 ~ 59。</li>
<li>seconds   可选。表示秒的整数，介于 0 ~ 59。</li>
<li>ms    可选。表示毫秒的整数，介于 0 ~ 999。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="built_in">Date</span>.UTC(<span class="number">2012</span>, <span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//1333065600000</span></span><br><span class="line"><span class="keyword">let</span> D = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2012</span>, <span class="number">2</span>, <span class="number">30</span>));</span><br><span class="line"><span class="built_in">console</span>.log(D);<span class="comment">//Fri Mar 30 2012 08:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>
<h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><p>返回 Date 对象的原始值，原始值返回1970年1月1日午夜以来的毫秒数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> n = d.valueOf();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//1559800584306</span></span><br></pre></td></tr></table></figure>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><blockquote>
<p>Date() 和 new Date() 区别</p>
</blockquote>
<p><strong>当任意一个普通函数用于创建一类对象时，它就被称作构造函数，或构造器。</strong></p>
<ul>
<li><p>new操作符来调用一个构造函数时,创建一个空对象obj</p>
</li>
<li><p>将这个空对象的<strong>proto</strong>成员指向了构造函数对象的prototype成员对象</p>
</li>
<li><p>Date()就是一个静态方法、普通函数返回一个时间string作为普通函数的返回值</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Number</span>(<span class="number">10</span>);<span class="comment">//number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);<span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Date</span>();<span class="comment">//string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//object</span></span><br><span class="line"><span class="keyword">let</span> d1 = <span class="built_in">Date</span>();<span class="comment">//返回一个字符串（string），没有getDate等日期对象方法，内容为当前时间</span></span><br><span class="line"><span class="keyword">let</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//返回一日期对象，可以调用getDate()，内容为当前时间</span></span><br><span class="line"><span class="keyword">let</span> d3 = <span class="built_in">Date</span>(<span class="string">"2000-1-1"</span>);<span class="comment">//返回一个字符串（string），内容仍旧为当前时间，也就是不受参数影响</span></span><br><span class="line"><span class="keyword">let</span> d4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2000-1-1"</span>);<span class="comment">//返回一日期对象，可以调用getDate()，内容为2000年元旦</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Data</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub + hexo从零搭建属于自己的个人博客</title>
    <url>/hexo-blog/</url>
    <content><![CDATA[<h3 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title="Hexo部署"></a>Hexo部署</h3><p>hexo有中文的<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">文档</a>，这一点非常方便，但是在安装过程中还是很容易有疏忽的地方，导致安装失败。</p>
<h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><p>安装Hexo之前，必须保证自己的电脑中已经安装好了<strong>Node.js</strong>和<strong>Git</strong>。因为这两个软件我之前都安装过，这里就不重复安装过程了，检验方式如下：</p>
<img src="/hexo-blog/1.png">
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>安装好<strong>node.js</strong>和<strong>git</strong>后，可以通过<strong>npm</strong>来安装<strong>Hexo</strong>。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>之后就可以在电脑里新建一个文件夹来作为存放博客全部内容的大本营了。我们直接用hexo命令来初始化博客文件夹：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">hexo init <span class="symbol">&lt;folder&gt;</span></span><br><span class="line"><span class="keyword">cd</span> <span class="symbol">&lt;folder&gt;</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p><folder>就是文件夹的名字，我们可以自己随意取这个名字，我的经验是，现在初始化应该不需要后面<strong>npm install</strong>这个步骤了，在创建的时候 ，文件夹初始化已经把需要的内容都下载进去了。</folder></p>
<img src="/hexo-blog/2.png">
<h4 id="站内内容"><a href="#站内内容" class="headerlink" title="站内内容"></a>站内内容</h4><p>新建好的文件夹目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p>这里解释一下各个文件夹的作用：</p>
<h5 id="config-yml"><a href="#config-yml" class="headerlink" title="config.yml"></a>config.yml</h5><p>博客的配置文件，博客的名称、关键词、作者、语言、博客主题…设置都在里面。</p>
<h5 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h5><p>应用程序信息，新添加的插件内容也会出现在这里面，我们可以不修改这里的内容。</p>
<h5 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h5><p>scaffolds就是脚手架的意思，这里放了三个模板文件，分别是新添加博客文章（posts）、新添加博客页（page）和新添加草稿（draft）的目标样式。<br>这部分可以修改的内容是，我们可以在模板上添加比如categories等自定义内容</p>
<h5 id="source"><a href="#source" class="headerlink" title="source"></a>source</h5><p>source是放置我们博客内容的地方，里面初始只有两个文件夹，一个是drafts（草稿），一个posts（文章），但之后我们通过命令新建tags（标签）还有categories（分类）页后，这里会相应地增加文件夹。</p>
<h5 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h5><p>放置主题文件包的地方。Hexo会根据这个文件来生成静态页面。<br>初始状态下只有landscape一个文件夹，后续我们可以添加自己喜欢的。</p>
<h4 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h4><p><strong>init</strong></p>
<p>新建一个网站。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo init <span class="tag">&lt;<span class="name">folder</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>new</strong></p>
<p>新建文章或页面。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="symbol">&lt;layout&gt;</span> <span class="string">"title"</span></span><br></pre></td></tr></table></figure>
<p>这里的<layout>对应我们要添加的内容，如果是posts就是添加新的文章，如果是page就是添加新的页面。</layout></p>
<p>默认是添加posts。</p>
<p>然后我们就可以在对应的posts或drafts文件夹里找到我们新建的文件，然后在文件里用Markdown的格式来写作了。</p>
<p><strong>generate</strong></p>
<p>生成静态页面</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure>
<p>也可以简写成</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure>
<p><strong>deploy</strong></p>
<p>将内容部署到网站</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo deploy</span></span><br></pre></td></tr></table></figure>
<p>也可以简写成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -d</span><br></pre></td></tr></table></figure>
<p><strong>publish</strong></p>
<p>发布内容，实际上是将内容从drafts（草稿）文件夹移到posts（文章）文件夹。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo publish <span class="tag">&lt;<span class="name">layout</span>&gt;</span> <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>server</strong></p>
<p>启动服务器，默认情况下，访问网站为<em><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></em></p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">server</span></span><br></pre></td></tr></table></figure>
<p>也可以简写成</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">s</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>根据我的经验，除了第一次部署的时候，我们会重点用到<strong>hexo init</strong>这个命令外，在平时写博客和发布过程中最常用的就是：</p>
<ul>
<li><p>hexo n <filename> 新建文章</filename></p>
<ul>
<li><p>hexo s 启动服务器，在本地查看内容</p>
</li>
<li><p>hexo g 生成静态页面</p>
</li>
<li><p>hexo deploy 部署到网站</p>
</li>
</ul>
</li>
</ul>
<p>以上四个步骤。</p>
</blockquote>
<p>其实以上命令我觉得就足够了，文档里还有很多功能，但我在实际使用的过程中都还没有遇到。<br>搭建好后我们在<em>localhost:4000</em>就可以看到这样的博客内容：</p>
<img src="/hexo-blog/3.png">
<h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>我在新建博客之后，做了以下改动：</p>
<h4 id="1-创建“分类”页面"><a href="#1-创建“分类”页面" class="headerlink" title="1. 创建“分类”页面"></a>1. 创建“分类”页面</h4><ul>
<li>新建分类页面</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> categories</span><br></pre></td></tr></table></figure>
<ul>
<li>给分类页面添加类型</li>
</ul>
<p>我们在source文件夹中的categories文件夹下找到<strong>index.md</strong>文件，并在它的头部加上<strong>type</strong>属性。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-05</span><span class="bullet">-27</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span>   <span class="comment">#这部分是新添加的</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<ul>
<li>给模板添加分类属性</li>
</ul>
<p>现在我们打开scarffolds文件夹里的post.md文件，给它的头部加上<strong>categories</strong>:，这样我们创建的所有新的文章都会自带这个属性，我们只需要往里填分类，就可以自动在网站上形成分类了。</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line"><span class="keyword">tags:</span></span><br></pre></td></tr></table></figure>
<ul>
<li>给文章添加分类</li>
</ul>
<p>现在我们可以找到一篇文章，然后尝试给它添加分类</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">layout: posts</span><br><span class="line">title: JavaScript学习笔记</span><br><span class="line">date: 2018<span class="string">-06</span><span class="string">-07</span> 00:38:36</span><br><span class="line">categories: 学习笔记</span><br><span class="line"><span class="keyword">tags:</span> [node.js, express]</span><br></pre></td></tr></table></figure>
<h4 id="2-创建“标签”页面"><a href="#2-创建“标签”页面" class="headerlink" title="2. 创建“标签”页面"></a>2. 创建“标签”页面</h4><p>创建”标签”页的方式和创建“分类”一样。</p>
<ul>
<li>新建“标签”页面</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="keyword">tags</span></span><br></pre></td></tr></table></figure>
<ul>
<li>给标签页面添加类型</li>
</ul>
<p>我们在<strong>source</strong>文件夹中的<strong>tags</strong>文件夹下找到<strong>index.md</strong>文件，并在它的头部加上<strong>type</strong>属性。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">title:</span> tags</span><br><span class="line"><span class="symbol">date:</span> <span class="number">2018</span><span class="number">-08</span><span class="number">-06</span> <span class="number">22</span>:<span class="number">48</span>:<span class="number">29</span></span><br><span class="line"><span class="symbol">type:</span> <span class="string">"tags"</span> <span class="meta">#新添加的内容</span></span><br></pre></td></tr></table></figure>
<ul>
<li>给文章添加标签</li>
</ul>
<p>有两种写法都可以，第一种是类似数组的写法，把标签放在中括号[]里，用英文逗号隔开</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">layout: posts</span><br><span class="line">title: 写给小白的express学习笔记</span><br><span class="line">date: 2018<span class="string">-06</span><span class="string">-07</span> 00:38:36</span><br><span class="line">categories: 学习笔记</span><br><span class="line"><span class="keyword">tags:</span> [node.js, express]</span><br></pre></td></tr></table></figure>
<p>第二种写法是用-短划线列出来</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">layout: posts</span><br><span class="line">title: 写给小白的express学习笔记</span><br><span class="line">date: 2018<span class="string">-06</span><span class="string">-07</span> 00:38:36</span><br><span class="line">categories: 学习笔记</span><br><span class="line"><span class="keyword">tags:</span> </span><br><span class="line">- node.js</span><br><span class="line">- express</span><br></pre></td></tr></table></figure>
<h3 id="部署域名"><a href="#部署域名" class="headerlink" title="部署域名"></a>部署域名</h3><p>紧接着我们就可以把这些内容添加到<strong>Github</strong>页面上，然后生成我们自己的博客了。</p>
<h4 id="部署Github"><a href="#部署Github" class="headerlink" title="部署Github"></a>部署Github</h4><ul>
<li><p>首先你必须有一个github账号</p>
</li>
<li><p>然后新建一个仓库，这一有第一个坑，我之前用了hexoblog来作为项目名称，一直没能搭建成功，后来看到其他大牛的经验，才发现项目名一定要是用户名 <strong>.github.io</strong> 的形式(README.md可选可不选)</p>
</li>
</ul>
<img src="/hexo-blog/4.png">
<ul>
<li>然后在setting里添加生成页面的选项</li>
</ul>
<img src="/hexo-blog/5.png">
<img src="/hexo-blog/6.png">
<ul>
<li>这个时候github页面其实就生成好了，但是我们的内容还需要同步到github上，所以打开hexo文件夹里的配置文件<strong>config.yml</strong>，添加部署路径</li>
</ul>
<img src="/hexo-blog/16.png">
<p>这里注意两小点：</p>
<p> 1.属性和内容之间一定要有一个空格，配置文件有自己的格式规范</p>
<p> 2.如果你之前没有用git关联过自己的github库，需要配置SSH等参数，否则无法成功，这部分搜git就有很多相关教程</p>
<ul>
<li>我们再用<strong>hexo g &amp;&amp; hexo deploy</strong>就能将内容推送到github上了，在github页面上也能看到自己的内容了</li>
</ul>
<img src="/hexo-blog/7.png">
<h4 id="部署自己的域名"><a href="#部署自己的域名" class="headerlink" title="部署自己的域名"></a>部署自己的域名</h4><ul>
<li><p>首先我们需要获取一个域名，我是在阿里云上购买了，上面可以根据自己想要的内容搜，比如我用了自己的名字，推荐给你的域名根据后缀不同会有价格上的区别，我选了一个不太贵的；</p>
</li>
<li><p>购买域名之后需要实名认证，这是另一个坑，我之前不知道实名认证审核完成前域名无法用，一直以为自己搭建失败了；</p>
</li>
</ul>
<ul>
<li>认证成功后需要解析域名</li>
</ul>
<img src="/hexo-blog/8.png">
<img src="/hexo-blog/9.png">
<p>记录类型选CNAME，记录值是自己github生成页面的地址。</p>
<ul>
<li><p>在博客的页面添加CNAME文件，并在里面记录自己域名的地址，将这个文件放在public文件夹下</p>
</li>
<li><p>这里还有一个小坑，CNAME文件经常被覆盖，导致我们重新部署博客后，链接就不可用了，这里可以下载一个叫hexo-generator-cname的插件，这样它会自动搞定CNAME的问题，只需要第一次手动将域名添加到文件里即可</p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> hexo-generator-cname --save</span><br></pre></td></tr></table></figure>
<ul>
<li>最后<strong>hexo g &amp;&amp; hexo deploy</strong>就可以了</li>
</ul>
<h3 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h3><p>hexo有很多开源的主题，我选了<strong>NexT</strong>，开始只是觉得很简洁清爽，后来发现它的功能挺齐全的，提前解决了很多搭建过程中会遇到的问题。这里强烈推荐一下。</p>
<p>首先，<strong>NexT</strong>也有中文<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">文档</a>，然后我们就可以开始了。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我是用的<strong>git clone</strong>的方法，文档中还有其他方法</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<h4 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h4><p>在hexo根目录下的配置文件<strong>config.yml</strong>里设置主题</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">theme:</span> next</span><br></pre></td></tr></table></figure>
<h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>接下来我们就可以来按需配置主题内容了，所有内容都在<strong>themes/next</strong>文件夹下的<strong>config.yml</strong>文件里修改。</p>
<p>官方文档里写的是有些配置需要将一部分代码添加到配置文件中，但其实不用，我们逐行看配置文件就会发现，有很多功能都已经放在配置文件里了，只是注释掉了，我们只需要取消注释，把需要的相关信息补全即可使用</p>
<h5 id="菜单栏-menu"><a href="#菜单栏-menu" class="headerlink" title="菜单栏 menu"></a>菜单栏 menu</h5><p>原生菜单栏有主页、关于、分类、标签等数个选项，但是在配置文件中是注释掉的状态，这里我们自行修改注释就行</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line">  <span class="meta"># about: /about/ || user</span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta"># schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta"># sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta"># commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li><p>如果事先没有通过hexo new page <pagename>来创建页面的话，即使在配置文件中取消注释，页面也没法显示</pagename></p>
</li>
<li><p>我们也可以添加自己想要添加的页面，不用局限在配置文件里提供的选择里</p>
</li>
<li><p>||后面是fontAwesome里的文件对应的名称</p>
</li>
<li><p>menu_icons记得选enable: true（默认应该是true）</p>
</li>
</ul>
<p>我在这部分添加了两个自定义的页面，后面在第三方插件部分我会再提到。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line">  <span class="meta"># about: /about/ || user</span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line">  读书: /books || book</span><br><span class="line">  电影: /movies || film</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta"># schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta"># sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta"># commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<h5 id="主题风格-schemes"><a href="#主题风格-schemes" class="headerlink" title="主题风格 schemes"></a>主题风格 schemes</h5><p>主题提供了4个，我们把想要选择的取消注释，其他三个保持注释掉的状态即可。</p>
<ul>
<li>Muse</li>
</ul>
<img src="/hexo-blog/10.png">
<ul>
<li>Mist</li>
</ul>
<img src="/hexo-blog/11.png">
<ul>
<li>Pisces</li>
</ul>
<img src="/hexo-blog/12.png">
<ul>
<li>Gemini</li>
</ul>
<img src="/hexo-blog/13.png">
<p>选择主题后也可以自定义，不过我还没摸清楚有哪些地方可以自定义，等弄清楚了我再来更新。<br>底部建站时间和图标修改</p>
<h5 id="修改主题的配置文件："><a href="#修改主题的配置文件：" class="headerlink" title="修改主题的配置文件："></a>修改主题的配置文件：</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line"><span class="attr">  since:</span> <span class="number">2018</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line"><span class="attr">  icon:</span> <span class="string">snowflake-o</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, will be used `author` from Hexo main config.</span></span><br><span class="line"><span class="attr">  copyright:</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line"><span class="attr">  powered:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    <span class="comment"># version: false</span></span><br></pre></td></tr></table></figure>
<p>我在这部分做了这样几件事：</p>
<ul>
<li><p>把用户的图标从小人<strong>user</strong>改成了雪花<strong>snowflake-o</strong></p>
<ul>
<li><p><strong>copyright</strong>留空，显示成页面<strong>author</strong>即我的名字</p>
</li>
<li><p><strong>powered: false</strong>把hexo的授权图片取消了</p>
</li>
<li><p><strong>theme: enable:false</strong> 把主题的内容也取消了</p>
</li>
</ul>
</li>
</ul>
<p>这样底部信息比较简单。</p>
<h5 id="个人社交信息-social"><a href="#个人社交信息-social" class="headerlink" title="个人社交信息 social"></a>个人社交信息 social</h5><p>在<strong>social</strong>里我们可以自定义自己想要在个人信息部分展现的账号，同时给他们加上图标。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">social</span>:</span><br><span class="line">  <span class="attribute">GitHub</span>: <span class="attribute">https</span>:<span class="comment">//github.com/XuQuan-nikkkki || github</span></span><br><span class="line">  <span class="attribute">E-Mail</span>: <span class="attribute">mailto</span>:xuquan1225<span class="variable">@hotmail</span>.com || envelope</span><br><span class="line">  #<span class="attribute">Google</span>: <span class="attribute">https</span>:<span class="comment">//plus.google.com/yourname || google</span></span><br><span class="line">  #<span class="attribute">Twitter</span>: <span class="attribute">https</span>:<span class="comment">//twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="number">#FB</span> <span class="attribute">Page</span>: <span class="attribute">https</span>:<span class="comment">//www.facebook.com/yourname || facebook</span></span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li><p>||后面对应的名称是fontAwesome里图标的名称，如果我们选择的账号没有对应的图标（如豆瓣、知乎），我们可以在fontAwesome库里去选择自己喜欢的图标</p>
</li>
<li><p>建议不要找太新的fontAwesome图标，主题关联的库版本没有那么新，很可能显示不了或者显示一个地球</p>
</li>
</ul>
<h5 id="网站动画效果"><a href="#网站动画效果" class="headerlink" title="网站动画效果"></a>网站动画效果</h5><p>为了网站响应速度我们可以把网站的动画关掉</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>但我觉得页面比较素，所以开了动画，选择了canvas-nest这一个，主题自带四种效果，可以选自己喜欢的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  async:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h5 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h5><p><strong>NexT</strong>原生支持多说、Disqus、hypercomments等多种评论系统。我选择了<strong>Valine</strong>。<br>方法也非常简单。直接去<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud官网</a>注册，注册完了会给你一个<strong>appid</strong>和<strong>appkey</strong>，将它们填在配置文件里即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">**************</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">***************</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure>
<h5 id="统计文章字数和阅读时间"><a href="#统计文章字数和阅读时间" class="headerlink" title="统计文章字数和阅读时间"></a>统计文章字数和阅读时间</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span>  <span class="comment"># 文章字数</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">true</span>   <span class="comment"># 阅读时间</span></span><br><span class="line"><span class="attr">  totalcount:</span> <span class="literal">true</span>  <span class="comment"># 总共字数</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="统计阅读次数"><a href="#统计阅读次数" class="headerlink" title="统计阅读次数"></a>统计阅读次数</h5><p>这里我用的是leancloud的服务，具体方法参考NexT上的<a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">教程</a>,添加完之后效果如下：</p>
<img src="/hexo-blog/15.png">
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript中的循环，你掌握了几种？</title>
    <url>/javascript-cycle/</url>
    <content><![CDATA[<h3 id="while-循环："><a href="#while-循环：" class="headerlink" title="while 循环："></a>while 循环：</h3><p>while 循环会在指定条件为真时循环执行代码块。</p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实例：</strong></p>
<p>本例中的循环将继续运行，只要变量 i 小于 5：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, i] = [<span class="string">''</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">    x=x + <span class="string">"该数字为"</span> + i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">//该数字为0  该数字为1  该数字为2  该数字为3  该数字为4</span></span><br></pre></td></tr></table></figure>
<p><em>注意：</em></p>
<p> while循环()中的表达式，运算结果可以是各种类型，但是最终都会转为真假，转换规则如下。</p>
<p>　　①Boolean：true为真，false为假；<br>　　②String：空字符串为假，所有非空字符串为真；<br>　　③Number：0为假，一切非0数字为真；<br>　　④null/Undefined/NaN:全为假；<br>　　⑤Object：全为真。</p>
<h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><p>do…while 循环是 while 循环的变体。该循环会在检查条件是否为真之前执行一次代码块，然后如果条件为真的话，就会重复这个循环。</p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure>
<p><strong>实例：</strong></p>
<p>该循环至少会执行一次，即使条件为 false 它也会执行一次，因为代码块会在条件被测试前执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, i] = [<span class="string">''</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    x=x + <span class="string">"该数字为 "</span> + i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">//该数字为 0该数字为 1该数字为 2该数字为 3该数字为 4</span></span><br></pre></td></tr></table></figure>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ol>
<li>for有三个表达式：①声明循环变量；②判断循环条件；③更新循环变量；三个表达式之间，用;分割，for循环三个表达式都可以省略，但是两个“;”缺一不可。</li>
<li>for循环的执行特点：先判断再执行，与while相同</li>
<li>for循环三个表达式都可以有多部分组成，第二部分多个判断条件用&amp;&amp; ||连接，第一三部分用逗号分割；</li>
</ol>
<p><strong>实例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num =<span class="number">1</span>; num&lt;=<span class="number">10</span>; num++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num); <span class="comment">//1 2 3 4 5 6 7 8 9 10 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for…in循环"><a href="#for…in循环" class="headerlink" title="for…in循环"></a>for…in循环</h3><ol>
<li>for-in 循环主要用于<strong>遍历对象</strong></li>
<li>for()中的格式：for(keys in zhangsan){}</li>
<li>keys表示obj对象的每一个键值对的键！！所有循环中，需要使用obj[keys]来取到每一个值！！！</li>
</ol>
<p><strong>实例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'键名：'</span>, i);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'键值：'</span>, obj[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">键名： a</span></span><br><span class="line"><span class="comment">键值： 1</span></span><br><span class="line"><span class="comment">键名： b</span></span><br><span class="line"><span class="comment">键值： 2</span></span><br><span class="line"><span class="comment">键名： c</span></span><br><span class="line"><span class="comment">键值： 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for-of循环"></a>for-of循环</h3><p>ES6 借鉴 C++、Java、C# 和 Python 语言，引入了for…of循环，作为遍历所有数据结构的统一的方法。</p>
<p>　　一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。也就是说，for…of循环内部调用的是数据结构的Symbol.iterator方法。</p>
<p>　　for…of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。</p>
<p> JavaScript 原有的for…in循环，只能获得对象的键名，不能直接获取键值。ES6 提供for…of循环，允许遍历获得键值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 0 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">//a b c d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更过请看 <a href="http://es6.ruanyifeng.com/#docs/iterator" title="这里" target="_blank" rel="noopener">这里</a></p>
<h3 id="map-循环"><a href="#map-循环" class="headerlink" title="map()循环"></a>map()循环</h3><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p>
<p>map() 方法按照原始数组元素顺序依次处理元素。</p>
<p>注意： map() 不会对空数组进行检测；map() 不会改变原始数组。</p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.map(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>), <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>实例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> news = numbers.map(<span class="function">(<span class="params">n</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">//[ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//[ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>
<p>map方法接受一个函数作为参数。该函数调用时，map方法向它传入三个参数：当前成员、当前位置和数组本身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> news = numbers.map(<span class="function">(<span class="params">elem, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elem * index;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">//[ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//[ 0, 2, 6 ]</span></span><br></pre></td></tr></table></figure>
<p>此外，map()循环还可以接受第二个参数，用来绑定回调函数内部的this变量，将回调函数内部的this对象，指向第二个参数，间接操作这个参数（一般是数组）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> news = [<span class="number">1</span>, <span class="number">2</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[e];</span><br><span class="line">&#125;, arr)；</span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//[ 'b', 'c' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里用箭头函数就会出问题</span></span><br></pre></td></tr></table></figure>
<p>上面代码通过map方法的第二个参数，将回调函数内部的this对象，指向arr数组。间接操作了数组arr; forEach同样具有这个功能。</p>
<h3 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h3><p>forEach方法与map方法很相似，也是对数组的所有成员依次执行参数函数。但是，forEach方法不返回值，只用来操作数据。也就是说，如果数组遍历的目的是为了得到返回值，那么使用map方法，否则使用forEach方法。forEach的用法与map方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> news = arr.forEach(<span class="function">(<span class="params">element, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index, element);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>此外，forEach循环和map循环一样也可以用绑定回调函数内部的this变量，间接操作其它变量（参考上面的map()循环例子）。</p>
<h3 id="filter-过滤循环"><a href="#filter-过滤循环" class="headerlink" title="filter()过滤循环"></a>filter()过滤循环</h3><p>filter方法用于过滤数组成员，满足条件的成员组成一个新数组返回。它的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> news = arr.filter(<span class="function">(<span class="params">n</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt; <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//[ 4, 5 ]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="literal">false</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> news = arr.filter(<span class="built_in">Boolean</span>);</span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//[ 1, 'a' ]</span></span><br></pre></td></tr></table></figure>
<p>filter方法的参数函数也可以接受三个参数：当前成员，当前位置和整个数 组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> news = arr.filter(<span class="function">(<span class="params">ele, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> index % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//[ 1, 3, 5 ]</span></span><br></pre></td></tr></table></figure>
<p>此外，filter方法也可以接受第二个参数，用来绑定参数函数内部的this变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">MAX</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myFilter = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (item &gt; <span class="keyword">this</span>.MAX) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> news = arr.filter(myFilter, obj);</span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//[ 8, 4, 9 ]</span></span><br></pre></td></tr></table></figure>
<h3 id="some-，every-循环遍历，统计数组是否满足某个条件"><a href="#some-，every-循环遍历，统计数组是否满足某个条件" class="headerlink" title="some()，every()循环遍历，统计数组是否满足某个条件"></a>some()，every()循环遍历，统计数组是否满足某个条件</h3><p>这两个方法返回一个布尔值，表示判断数组成员是否符合某种条件。</p>
<p>它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。</p>
<ul>
<li>some方法是只要一个成员的返回值是true，则整个some方法的返回值就是true，否则返回false。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> news = arr.some(<span class="function">(<span class="params">elem, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>而every方法则相反，所有成员的返回值都是true，整个every方法才返回true，否则返回false。两相比较，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> news = arr.every(<span class="function">(<span class="params">elem, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>这两个方法在实际开发中，大有可用之处。比如在判定用户是否勾选了不可操作的数据，或者是否勾选了一条可以操作的数据可以使用这两个方法遍历循环数组。</p>
<h3 id="reduce-，reduceRight-方法可依次处理数组的每个成员"><a href="#reduce-，reduceRight-方法可依次处理数组的每个成员" class="headerlink" title="reduce()，reduceRight()方法可依次处理数组的每个成员"></a>reduce()，reduceRight()方法可依次处理数组的每个成员</h3><p>reduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员），其他完全一样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> news = arr.reduce(<span class="function">(<span class="params">a, b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//15</span></span><br><span class="line"><span class="comment">// 1 2</span></span><br><span class="line"><span class="comment">// 3 3</span></span><br><span class="line"><span class="comment">// 6 4</span></span><br><span class="line"><span class="comment">// 10 5</span></span><br><span class="line"><span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<p>reduce方法和reduceRight方法的第一个参数都是一个函数。该函数接受以下四个参数。</p>
<ol>
<li>累积变量，默认为数组的第一个成员</li>
<li>当前变量，默认为数组的第二个成员</li>
<li>当前位置（从0开始）</li>
<li>原数组</li>
</ol>
<ul>
<li>这四个参数之中，只有前两个是必须的，后两个则是可选的。</li>
</ul>
<p>如果要对累积变量指定初值，可以把它放在reduce方法和reduceRight方法的第二个参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> news = arr.reduce(<span class="function">(<span class="params">a, b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(news); <span class="comment">//25</span></span><br></pre></td></tr></table></figure>
<p>上面的第二个参数相当于设定了默认值，处理空数组时尤其有用，可避免一些空指针异常。</p>
<p>由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongest</span>(<span class="params">entries</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> entries.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">longest, entry</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entry.length &gt; longest.length ? entry : longest;</span><br><span class="line">    &#125;, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findLongest([<span class="string">'aaa'</span>, <span class="string">'bb'</span>, <span class="string">'c'</span>])); <span class="comment">// "aaa"</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，reduce的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。</p>
<h3 id="Object-keys遍历对象的属性"><a href="#Object-keys遍历对象的属性" class="headerlink" title="Object,keys遍历对象的属性"></a>Object,keys遍历对象的属性</h3><p>Object.getOwnPropertyNames方法与Object.keys类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但它能返回不可枚举的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'Hello'</span>, <span class="string">'World'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> new1 = <span class="built_in">Object</span>.keys(a);</span><br><span class="line"><span class="keyword">let</span> new2 = <span class="built_in">Object</span>.getOwnPropertyNames(a);</span><br><span class="line"><span class="built_in">console</span>.log(new1); <span class="comment">// ["0", "1"]</span></span><br><span class="line"><span class="built_in">console</span>.log(new2); <span class="comment">// ["0", "1", "length"]</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，数组的length属性是不可枚举的属性，所以只出现在Object.getOwnPropertyNames方法的返回结果中。</p>
<p>由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    p1: <span class="number">123</span>,</span><br><span class="line">    p2: <span class="number">456</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> new1 = <span class="built_in">Object</span>.keys(obj).length;</span><br><span class="line"><span class="keyword">let</span> new2 = <span class="built_in">Object</span>.getOwnPropertyNames(obj).length;</span><br><span class="line"><span class="built_in">console</span>.log(new1); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(new2); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>一、map()，foreach，filter循环的共同之处：</p>
<ol>
<li><p>foreach，map，filter循环中途是无法停止的，总是会将所有成员遍历完。</p>
</li>
<li><p>他们都可以接受第二个参数，用来绑定回调函数内部的this变量，将回调函数内部的this对象，指向第二个参数，间接操作这个参数（一般是数组）。</p>
</li>
</ol>
<p>二、map()循环和forEach循环的不同：</p>
<p>forEach循环没有返回值；map，filter循环有返回值。</p>
<p>三、map(环和filter()循环都会跳过空位，for和while不会</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>].map(f) <span class="comment">// ["a", "a", "a"] </span></span><br><span class="line">[<span class="number">1</span>, <span class="literal">null</span>, <span class="number">2</span>].map(f) <span class="comment">// ["a", "a", "a"]</span></span><br><span class="line">[<span class="number">1</span>, , <span class="number">2</span>].map(f) <span class="comment">// ["a", , "a"]</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，map方法不会跳过undefined和null，但是会跳过空位。forEach方法也会跳过数组的空位，这里就不举例了。</p>
<p>四、some()和every():</p>
<p>some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.</p>
<p>五、reduce()，reduceRight()：</p>
<p>reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员）。</p>
<p>六、Object对象的两个遍历Object.keys与Object.getOwnPropertyNames：</p>
<p>他们都是遍历对象的属性，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但Object.keys不能返回不可枚举的属性；Object.getOwnPropertyNames能返回不可枚举的属性。</p>
<p>当然除了这些还有Jquery的循环方法，可以看 <a href="https://blog.csdn.net/qq_41899174/article/details/82797089" title="这里" target="_blank" rel="noopener">这里</a>， 本文也是学习于 <a href="https://blog.csdn.net/qq_41899174/article/details/82797089" title="这里" target="_blank" rel="noopener">这里</a> 进行整理的。</p>
]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>js的事件冒泡和事件捕获</title>
    <url>/javascript-event/</url>
    <content><![CDATA[<h3 id="JavaScript事件"><a href="#JavaScript事件" class="headerlink" title="JavaScript事件"></a>JavaScript事件</h3><p>事件是文档和浏览器窗口中发生的特定的交互瞬间，我们与浏览器中web页面进行某些类型的交互时，事件就发生了。</p>
<p>事件可能是用户在某些内容上的点击，鼠标经过某个特定元素或按下键盘上的某些按键，事件还可能是web浏览器中发生的事情，比如说某个web页面加载完成，或者是用户滚动窗口或改变窗口大小。</p>
<h3 id="JavaScript事件流"><a href="#JavaScript事件流" class="headerlink" title="JavaScript事件流"></a>JavaScript事件流</h3><p>事件流描述的是<strong>从页面中接受事件的顺序</strong>，但有意思的是，微软（IE）和网景（Netscape）开发团队居然提出了两个截然相反的事件流概念，<strong>IE的事件流是事件冒泡流(event bubbling)</strong>，而<strong>Netscape的事件流是事件捕获流(event capturing)</strong>。</p>
<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>事件冒泡由IE提出，即<strong>事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点</strong>。利用该原理实现<a href="https://hutaoao.github.io/EventDelegate/" title="事件委托">事件委托</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js的事件冒泡和事件捕获<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onclick</span>=<span class="string">"bodyClick()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"divClick()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"pClick()"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"btnClick()"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">btnClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'button被点击'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">pClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'p被点击'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">divClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'div被点击'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">bodyClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'body被点击'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/javascript-event/2.jpg">
<p>正如上面我们所说的，它会从一个最具体的的元素接收，然后逐级向上传播， button=&gt;p=&gt;div=&gt;body…事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。</p>
<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><blockquote>
<p>event.stopPropagation(); 或 event.stopImmediatePropagation(); 或 event.cancelBubble = true;</p>
</blockquote>
<p>接着使用上面案例我们现在阻止它的冒泡行为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>阻止冒泡行为<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onclick</span>=<span class="string">"bodyClick()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"divClick()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"pClick()"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"btnClick()"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">btnClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'button被点击'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// event.cancelBubble = true;</span></span></span><br><span class="line"><span class="undefined">            event.stopPropagation();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">pClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'p被点击'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">divClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'div被点击'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">bodyClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'body被点击'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/javascript-event/8.jpg">
<p>我们可以看到已经没有冒泡行为，需要注意的是前两个（ stopPropagation()和stopImmediatePropagation() ） IE 低版本不支持。</p>
<h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>事件捕获由网景提出，事件从最不具体的元素接收到最具体的元素接收</p>
<p>针对上面同样的例子，点击按钮，那么此时click事件会按照这样传播：（下面我们就借用addEventListener的第三个参数来模拟事件捕获流）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js的事件冒泡和事件捕获<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>捕获<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oB=<span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oP=<span class="built_in">document</span>.querySelector(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oD=<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oBody=<span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oB.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"button被点击"</span>)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oP.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'p标签被点击'</span>)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oD.addEventListener(<span class="string">'click'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'div被点击'</span>)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oBody.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'body被点击'</span>)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/javascript-event/3.png">
<p>正如我们看到的，和冒泡流万全相反，从最不具体的元素接收到最具体的元素接收事件 body=&gt;div=&gt;p=&gt;button</p>
<h3 id="阻止事件捕获"><a href="#阻止事件捕获" class="headerlink" title="阻止事件捕获"></a>阻止事件捕获</h3><blockquote>
<p>event.stopPropagation(); 或 event.stopImmediatePropagation();</p>
</blockquote>
<p>还是使用上面捕获案例来阻止捕获</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>阻止捕获<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>捕获<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oB=<span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oP=<span class="built_in">document</span>.querySelector(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oD=<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oBody=<span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oB.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"button被点击"</span>)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oP.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'p标签被点击'</span>)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oD.addEventListener(<span class="string">'click'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'div被点击'</span>)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oBody.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'body被点击'</span>);</span></span><br><span class="line"><span class="undefined">            event.stopPropagation()</span></span><br><span class="line"><span class="javascript">            <span class="comment">// event.stopImmediatePropagation();</span></span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/javascript-event/9.jpg">
<p>我们可以看到已经没有捕获行为，需要注意的是前两个（ stopPropagation()和stopImmediatePropagation() ） IE 低版本不支持。</p>
<h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>‘DOM2级事件’规定的事件流包含3个阶段，<strong>事件捕获阶段、处于目标阶段、事件冒泡阶段</strong>。首先发生的事件捕获为截获事件提供机会，然后是实际的目标接收事件，最后一个阶段是事件冒泡阶段，可以在这个阶段对事件做出响应。</p>
<p>在DOM事件流中，事件的目标在捕获阶段不会接收到事件，这意味着在捕获阶段事件从document到 &lt;button&gt; 就停止了，下个阶段是处于目标阶段，于是事件在 &lt;button&gt; 上发生，并在事件处理中被看成冒泡阶段的一部分，然后，冒泡阶段发生，事件又传播回document。</p>
<img src="/javascript-event/1.png">
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM事件流<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>DOM事件流<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"div 处于目标阶段"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"event bubble 事件冒泡"</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"event catch 事件捕获"</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/javascript-event/4.jpg">
<p>就是这样一个流程，先捕获，然后处理，然后再冒泡出去。</p>
<h3 id="DOM-2级事件处理程序"><a href="#DOM-2级事件处理程序" class="headerlink" title="DOM 2级事件处理程序"></a>DOM 2级事件处理程序</h3><p>DOM 2级事件定义了两方法：用于处理添加事件和删除事件的操作： <strong>添加事件 addEventListener()     删除事件  removeEventListener()</strong></p>
<p>所有DOM节点中都包含这两个方法，并且他们都包含3个参数：</p>
<ol>
<li>要处理的事件方式（例如：click，mouseover,dbclick…..）；</li>
<li>事件处理的函数，可以为匿名函数，也可以为命名函数（但如果需要删除事件，必须是命名函数）；</li>
<li>一个布尔值，代表是处于事件冒泡阶段处理还是事件捕获阶段（true：表示在捕获阶段调用事件处理程序；false:表示在冒泡阶段调用事件处理程序）。</li>
</ol>
<p>使用DOM 2级事件处理程序的主要好处是可以添加多个事件处理程序，事件处理会按照他们的顺序触发，通过addEventListener添加的事件只能用removeEventListener来移除，移除时传入的参数与添加时使用的参数必须相同，这也意味着添加的匿名函数将无法移除，（注意：我们默认的第三个参数都是默认false,是指在冒泡阶段添加，大多数情况下，都是将事件处理程序添加到事件的冒泡阶段，这样可以最大限度的兼容各个浏览器）</p>
<p><strong>匿名函数</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//这是一个DOM 2级事件 添加事件最简单的方式</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> btn=<span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'我是按钮'</span>)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">false</span>)   <span class="comment">//当第三个参数不写时，也是默认为false（冒泡时添加事件）</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/javascript-event/5.jpg">
<p><strong>命名函数</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> btn=<span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        btn.addEventListener(<span class="string">'click'</span>,foo,<span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'我是按钮'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//其实操作就是把写在里面的函数拿到了外面，而在原来的位置用函数名来代替</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/javascript-event/5.jpg">
<p><strong>添加两个事件试试</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> btn=<span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        btn.addEventListener(<span class="string">'click'</span>,foo,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一个事件</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'我是按钮'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//第二个事件</span></span></span><br><span class="line"><span class="javascript">        btn.addEventListener(<span class="string">'click'</span>,newFoo,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">newFoo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'我是新按钮'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/javascript-event/6.jpg">
<p>所以说，我们添加两个事件是可以的，事件的顺序就是按照我们程序写的顺序执行的</p>
<p><strong>试试DOM 0级事件处理程序</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"foo()"</span>  <span class="attr">onclick</span>=<span class="string">"newFoo()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'foo'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">newFoo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'newFoo'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/javascript-event/7.jpg">
<p>只执行了第一个事件，第二个被忽略，这并不是我们想要的结果，而addEventLiener是会把两个事件都去执行的。</p>
<h3 id="扩展-阻止默认行为"><a href="#扩展-阻止默认行为" class="headerlink" title="扩展 - 阻止默认行为"></a>扩展 - 阻止默认行为</h3><h4 id="preventDefault"><a href="#preventDefault" class="headerlink" title="preventDefault"></a>preventDefault</h4><p>preventDefault它是事件对象(Event)的一个方法，作用是取消一个目标元素的默认行为。既然是说默认行为，当然是元素必须有默认行为才能被取消，如果元素本身就没有默认行为，调用当然就无效了。什么元素有默认行为呢？如链接 &lt;a&gt; ，提交按钮 &lt;input type=”submit”&gt; 等。当Event对象的cancelable为false时，表示没有默认行为，这时即使有默认行为，调用 preventDefault也是不会起作用的。</p>
<p>我们都知道，链接 &lt;a&gt; 的默认动作就是跳转到指定页面，下面就以它为例，阻止它的跳转：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://hutaoao.github.io"</span> <span class="attr">id</span>=<span class="string">"testA"</span> &gt;</span>我是a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> a = <span class="built_in">document</span>.querySelector(<span class="string">'#testA'</span>);</span></span><br><span class="line"><span class="javascript">        a.onclick =<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//阻止默认行为</span></span></span><br><span class="line"><span class="javascript">            event.preventDefault();<span class="comment">//效果同 return false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这时候点击 a 标签没有任何动作，不会跳转到对应连接，阻止了它的默认行为。</p>
<h4 id="stopPropagation"><a href="#stopPropagation" class="headerlink" title="stopPropagation"></a>stopPropagation</h4><p>stopPropagation也是事件对象(Event)的一个方法，<strong>作用是阻止目标元素的冒泡事件，但是会不阻止默认行为</strong>。</p>
<h4 id="return-false"><a href="#return-false" class="headerlink" title="return false"></a>return false</h4><p>现在很多js代码都直接使用jQuery来写，<strong>在jQuery中使用return false时，相当于同时使用event.preventDefault和event.stopPropagation，它会阻止冒泡也会阻止默认行为。 但是使用原生js写时，return false只会阻止默认行为，不阻止冒泡。</strong></p>
<blockquote>
<p>谢谢阅读，以上借鉴自 <a href="https://www.cnblogs.com/christineqing/p/7607113.html" target="_blank" rel="noopener">https://www.cnblogs.com/christineqing/p/7607113.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>IE</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript数据类型及检测方法</title>
    <url>/javascript-data-type/</url>
    <content><![CDATA[<h3 id="Javascript数据类型"><a href="#Javascript数据类型" class="headerlink" title="Javascript数据类型"></a>Javascript数据类型</h3><p>在 ECMAScript 规范中，共定义了 6 种数据类型（加一个ES6新类型共7种），分为 <strong>基本类型</strong> 和 <strong>引用类型</strong> 两大类，如下所示：</p>
<blockquote>
<p>基本类型：String、Number、Boolean、Undefined、Null、Symbol（ES6新类型，最下面扩展有介绍）<br>引用类型：Object</p>
</blockquote>
<p>基本类型也称为简单类型，由于其占据空间固定，是简单的数据段，为了便于提升变量查询速度，将其存储在栈中，即按值访问。</p>
<p>引用类型也称为复杂类型，由于其值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度，因此，其值存储在堆(heap)中，而存储在变量处的值，是一个指针，指向存储对象的内存处，即按址访问。引用类型除 Object 外，还包括 Function 、Array、RegExp、Date 等等。</p>
<h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">'hello'</span>);<span class="comment">// string 有效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">123</span>);<span class="comment">// number 有效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">false</span>);<span class="comment">// boolean 有效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);<span class="comment">// undefined 有效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Symbol</span>());<span class="comment">// symbol 有效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);<span class="comment">// object 无效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);<span class="comment">// object 无效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Function</span>());<span class="comment">// function 有效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>());<span class="comment">// object 无效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>());<span class="comment">// object 无效</span></span><br></pre></td></tr></table></figure>
<p>有些时候，typeof 操作符会返回一些令人迷惑但技术上却正确的值：</p>
<ul>
<li>对于基本类型，除 null 以外，均可以返回正确的结果。</li>
<li>对于引用类型，除 function 以外，一律返回 object 类型。</li>
<li>对于 null ，返回 object 类型。</li>
<li>对于 function 返回  function 类型。</li>
</ul>
<p>其中，null 有属于自己的数据类型 Null ， 引用类型中的 数组、日期、正则 也都有属于自己的具体类型，而 typeof 对于这些类型的处理，只返回了处于其原型链最顶端的 Object 类型，没有错，但不是我们想要的结果。</p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>instanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。 在这里需要特别注意的是：instanceof 检测的是原型，我们用一段伪代码来模拟其内部执行过程：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">instanceof</span> (A,B) = &#123;</span><br><span class="line">    <span class="keyword">var</span> L = A.__proto__;</span><br><span class="line">    <span class="keyword">var</span> R = B.prototype;</span><br><span class="line">    <span class="keyword">if</span>(L === R) &#123;</span><br><span class="line">        <span class="comment">// A的内部属性 __proto__ 指向 B 的原型对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上述过程可以看出，当 A 的 <strong>proto</strong> 指向 B 的 prototype 时，就认为 A 就是 B 的实例，我们再来看几个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>() <span class="keyword">instanceof</span> <span class="built_in">Date</span>);<span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person() <span class="keyword">instanceof</span> Person);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>() <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>我们发现，虽然 instanceof 能够判断出 [ ] 是Array的实例，但它认为 [ ] 也是Object的实例，为什么呢？</p>
<p>我们来分析一下 [ ]、Array、Object 三者之间的关系：</p>
<p>从 instanceof 能够判断出 [ ].<strong>proto</strong>  指向 Array.prototype，而 Array.prototype.<strong>proto</strong> 又指向了Object.prototype，最终 Object.prototype.<strong>proto</strong> 指向了null，标志着原型链的结束。因此，[]、Array、Object 就在内部形成了一条原型链：</p>
<img src="/javascript-data-type/1.png">
<p>从原型链可以看出，[] 的 <strong>proto</strong>  直接指向Array.prototype，间接指向 Object.prototype，所以按照 instanceof 的判断规则，[] 就是Object的实例。依次类推，类似的 new Date()、new Person() 也会形成一条对应的原型链 。因此，instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。</p>
<p>instanceof 操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">xArray = <span class="built_in">window</span>.frames[<span class="number">0</span>].Array;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> xArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>针对数组的这个问题，ES5 提供了 Array.isArray() 方法 。该方法用以确认某个对象本身是否为 Array 类型，而不区分该对象在哪个环境中创建。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value))&#123;</span><br><span class="line">   <span class="comment">//对数组执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Array.isArray() 本质上检测的是对象的 [[Class]] 值，[[Class]] 是对象的一个内部属性，里面包含了对象的类型信息，其格式为 [object Xxx] ，Xxx 就是对应的具体类型 。对于数组而言，[[Class]] 的值就是 [object Array] 。</p>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor."></a>constructor.</h4><p>当一个函数 F被定义时，JS引擎会为F添加 prototype 原型，然后再在 prototype上添加一个 constructor 属性，并让其指向 F 的引用。如下所示：</p>
<img src="/javascript-data-type/2.png">
<p>当执行 var f = new F() 时，F 被当成了构造函数，f 是F的实例对象，此时 F 原型上的 constructor 传递到了 f 上，因此 f.constructor == F</p>
<img src="/javascript-data-type/3.png">
<p>以看出，F 利用原型对象上的 constructor 引用了自身，当 F 作为构造函数来创建对象时，原型上的 constructor 就被遗传到了新创建的对象上， 从原型链角度讲，构造函数 F 就是新对象的类型。这样做的意义是，让新对象在诞生以后，就具有可追溯的数据类型。</p>
<p>同样，JavaScript 中的内置对象在内部构建时也是这样做的：</p>
<img src="/javascript-data-type/4.png">
<p><strong>细节问题：</strong></p>
<blockquote>
<ol>
<li>null 和 undefined 是无效的对象，因此是不会有 constructor 存在的，这两种类型的数据需要通过其他方式来判断。</li>
<li>函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object2. 函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object</li>
</ol>
</blockquote>
<img src="/javascript-data-type/5.png">
<p>为什么变成了 Object？</p>
<p>因为 prototype 被重新赋值的是一个 { }， { } 是 new Object() 的字面量，因此 new Object() 会将 Object 原型上的 constructor 传递给 { }，也就是 Object 本身。</p>
<p>因此，为了规范开发，在重写对象原型时一般都需要重新给 constructor 赋值，以保证对象实例的类型不被篡改。</p>
<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。</p>
<p>对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>) ;   <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>) ;    <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) ; <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>()); <span class="comment">//[object Symbol]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) ; <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) ; <span class="comment">// [object Null]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Function</span>()) ; <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) ; <span class="comment">// [object Date]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]) ; <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">RegExp</span>()) ; <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Error</span>()) ; <span class="comment">// [object Error]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>) ; <span class="comment">// [object HTMLDocument]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">window</span>) ; <span class="comment">//[object global] window 是全局对象 global 的引用</span></span><br></pre></td></tr></table></figure>
<h3 id="扩展-Symbol"><a href="#扩展-Symbol" class="headerlink" title="扩展 - Symbol"></a>扩展 - Symbol</h3><p>ES5对象属性名都是字符串容易造成属性名的冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="string">'lucy'</span>&#125;;</span><br><span class="line">a.name = <span class="string">'lili'</span>;</span><br><span class="line"><span class="comment">//这样就会重写属性</span></span><br></pre></td></tr></table></figure>
<p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。</p>
<p>注意，Symbol函数前不能使用new命令，否则会报错。这是因为生成的Symbol是一个原始类型的值，不是对象</p>
<p>Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有参数的情况</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数的情况</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>Symbol值不能与其他类型的值进行运算</p>
<p><strong>作为属性名的Symbol</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">'Hello!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">'Hello!'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种写法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, mySymbol, &#123; <span class="attr">value</span>: <span class="string">'Hello!'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上写法都得到同样结果</span></span><br><span class="line">a[mySymbol] <span class="comment">// "Hello!"</span></span><br></pre></td></tr></table></figure>
<p>注意，Symbol值作为对象属性名时，不能用点运算符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> name = <span class="built_in">Symbol</span>();</span><br><span class="line">a.name = <span class="string">'lili'</span>;</span><br><span class="line">a[name] = <span class="string">'lucy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name,a[name]);<span class="comment">//lili,lucy</span></span><br></pre></td></tr></table></figure>
<p>Symbol值作为属性名时，该属性还是公开属性，不是私有属性。</p>
<p>这个有点类似于java中的protected属性（protected和private的区别：在类的外部都是不可以访问的，在类内的子类可以继承protected不可以继承private）</p>
<p>但是这里的Symbol在类外部也是可以访问的，只是不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()返回。但有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有Symbol属性名</p>
<p><strong>Symbol.for()，Symbol.keyFor()</strong></p>
<p>Symbol.for机制有点类似于单例模式，首先在全局中搜索有没有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。和直接的Symbol就点不同了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>Symbol.keyFor方法返回一个已登记的Symbol类型值的key。实质就是检测该Symbol是否已创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s1) <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p><strong>内置的Symbol值</strong></p>
<blockquote>
<p>有11个方法，具体可以查看 <a href="http://es6.ruanyifeng.com/#docs/symbol" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/symbol</a></p>
</blockquote>
<p>感谢阅读，本文整理自：<br><a href="https://www.cnblogs.com/onepixel/p/5126046.html；" target="_blank" rel="noopener">https://www.cnblogs.com/onepixel/p/5126046.html；</a><br><a href="https://www.cnblogs.com/sker/p/5474591.html" target="_blank" rel="noopener">https://www.cnblogs.com/sker/p/5474591.html</a></p>
]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>cookies、sessionStorage和localStorage解释及区别</title>
    <url>/local-store/</url>
    <content><![CDATA[<p>浏览器的缓存机制提供了可以将用户数据存储在客户端上的方式，可以利用cookie,session等跟服务端进行数据交互。</p>
<img src="/local-store/1.png">
<blockquote>
<h4 id="HTML4的本地存储-cookie"><a href="#HTML4的本地存储-cookie" class="headerlink" title="HTML4的本地存储 cookie"></a>HTML4的本地存储 cookie</h4></blockquote>
<p>cookie和session都是用来跟踪浏览器用户身份的会话方式。</p>
<p>区别：</p>
<h5 id="1、保持状态"><a href="#1、保持状态" class="headerlink" title="1、保持状态"></a>1、保持状态</h5><p>cookie保存在浏览器端，session保存在服务器端</p>
<img src="/local-store/2.png">
<h5 id="2、使用方式"><a href="#2、使用方式" class="headerlink" title="2、使用方式"></a>2、使用方式</h5><p>（1）cookie机制：如果不在浏览器中设置过期时间，cookie被保存在内存中，生命周期随浏览器的关闭而结束，这种cookie简称会话cookie。如果在浏览器中设置了cookie的过期时间，cookie被保存在硬盘中，关闭浏览器后，cookie数据仍然存在，直到过期时间结束才消失，这种cookie简称持久cookie。<br>Cookie是服务器发给客户端的特殊信息，cookie是以文本的方式保存在客户端，每次请求时都带上它。</p>
<p>（2）session机制：当服务器收到请求需要创建session对象时，首先会检查客户端请求中是否包含sessionid。如果有sessionid，服务器将根据该id返回对应session对象。如果客户端请求中没有sessionid，服务器会创建新的session对象，并把sessionid在本次响应中返回给客户端。通常使用cookie方式存储sessionid到客户端，在交互中浏览器按照规则将sessionid发送给服务器。如果用户禁用cookie，则要使用URL重写，可以通过response.encodeURL(url) 进行实现；API对encodeURL的结束为，当浏览器支持Cookie时，url不做任何处理；当浏览器不支持Cookie的时候，将会重写URL将SessionID拼接到访问地址后。</p>
<h5 id="3、存储内容"><a href="#3、存储内容" class="headerlink" title="3、存储内容"></a>3、存储内容</h5><p>cookie只能保存字符串类型，以文本的方式；session通过类似与Hashtable的数据结构来保存，能支持任何类型的对象(session中可含有多个对象)</p>
<h5 id="4、存储的大小"><a href="#4、存储的大小" class="headerlink" title="4、存储的大小"></a>4、存储的大小</h5><p>cookie：单个cookie保存的数据不能超过4kb；session大小没有限制。</p>
<h5 id="5、安全性"><a href="#5、安全性" class="headerlink" title="5、安全性"></a>5、安全性</h5><p>cookie：针对cookie所存在的攻击：Cookie欺骗，Cookie截获；session的安全性大于cookie。</p>
<p>原因如下：</p>
<p>（1）sessionID存储在cookie中，若要攻破session首先要攻破cookie；<br>（2）sessionID是要有人登录，或者启动session_start才会有，所以攻破cookie也不一定能得到sessionID；<br>（3）第二次启动session_start后，前一次的sessionID就是失效了，session过期后，sessionID也随之失效。<br>（4）sessionID是加密的<br>（5）综上所述，攻击者必须在短时间内攻破加密的sessionID，这很难。</p>
<h5 id="6、应用场景"><a href="#6、应用场景" class="headerlink" title="6、应用场景"></a>6、应用场景</h5><p>cookie：</p>
<p>（1）判断用户是否登陆过网站，以便下次登录时能够实现自动登录（或者记住密码）。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。<br>（2）保存上次登录的时间等信息。<br>（3）保存上次查看的页面<br>（4）浏览计数</p>
<p>session：Session用于保存每个用户的专用信息，变量的值保存在服务器端，通过SessionID来区分不同的客户。</p>
<p>（1）网上商城中的购物车<br>（2）保存用户登录信息<br>（3）将某些数据放入session中，供同一用户的不同页面使用<br>（4）防止用户非法登录</p>
<h5 id="7、缺点"><a href="#7、缺点" class="headerlink" title="7、缺点"></a>7、缺点</h5><p> cookie：</p>
<p>（1）大小受限<br>（2）用户可以操作（禁用）cookie，使功能受限<br>（3）安全性较低<br>（4）有些状态不可能保存在客户端。<br>（5）每次访问都要传送cookie给服务器，浪费带宽。<br>（6）cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。</p>
<p>session：</p>
<p>（1）Session保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大。<br>（2）依赖于cookie（sessionID保存在cookie），如果禁用cookie，则要使用URL重写，不安全<br>（3）创建Session变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用session变量将会导致代码不可读而且不好维护。</p>
<blockquote>
<h4 id="HTML5的本地存储"><a href="#HTML5的本地存储" class="headerlink" title="HTML5的本地存储"></a>HTML5的本地存储</h4></blockquote>
<ul>
<li>解释一</li>
</ul>
<p>HTML5中与本地存储相关的两个重要内容：Web Storage与本地数据库。其中，Web Storage存储机制是对HTML4中cookie存储机制的一个改善。由于cookie存储机制有很多缺点，HTML5不再使用它，转而使用改良后的Web Storage存储机制。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。</p>
<p>我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题：</p>
<p>1.大小：cookie的大小被限制在4KB。</p>
<p>2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。</p>
<p>3.复杂性：要正确的操纵cookie是很困难的。</p>
<p>针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。</p>
<p>具体来说，Web Storage又分为两种：</p>
<p>1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。</p>
<p>2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。</p>
<p>这两者的区别在于，<font color="red">sessionStorage为临时保存，而localStorage为永久保存</font> 。</p>
<p>到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。</p>
<ul>
<li>解释二</li>
</ul>
<p>WebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>
<p>WebStorage两个主要目标：</p>
<p>（1）提供一种在cookie之外存储会话数据的路径。</p>
<p>（2）提供一种存储大量可以跨会话存在的数据的机制。</p>
<p>HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。</p>
<h5 id="1、生命周期"><a href="#1、生命周期" class="headerlink" title="1、生命周期"></a>1、生命周期</h5><p>localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。</p>
<p>sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</p>
<h5 id="2、存储大小"><a href="#2、存储大小" class="headerlink" title="2、存储大小"></a>2、存储大小</h5><p>localStorage和sessionStorage的存储数据大小一般都是：5MB</p>
<h5 id="3、存储位置"><a href="#3、存储位置" class="headerlink" title="3、存储位置"></a>3、存储位置</h5><p>localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。</p>
<h5 id="4、存储内容类型"><a href="#4、存储内容类型" class="headerlink" title="4、存储内容类型"></a>4、存储内容类型</h5><p>localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p>
<h5 id="5、获取方式"><a href="#5、获取方式" class="headerlink" title="5、获取方式"></a>5、获取方式</h5><p>localStorage：window.localStorage;；sessionStorage：window.sessionStorage;。</p>
<h5 id="6、应用场景-1"><a href="#6、应用场景-1" class="headerlink" title="6、应用场景"></a>6、应用场景</h5><p>localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；</p>
<p>WebStorage的优点：</p>
<p>（1）存储空间更大：cookie为4KB，而WebStorage是5MB；</p>
<p>（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样美词请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；</p>
<p>（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；</p>
<p>（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；</p>
<p>（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；</p>
<p>（6）WebStorage提供了一些方法，数据操作比cookie方便；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setItem (key, value) ——  保存数据，以键值对的方式储存信息。</span><br><span class="line">getItem (key) ——  获取数据，将键值传入，即可获取到对应的value值。</span><br><span class="line">removeItem (key) ——  删除单个数据，根据键值移除对应的信息。</span><br><span class="line">clear () ——  删除所有的数据</span><br><span class="line">key (index) —— 获取某个索引的key</span><br></pre></td></tr></table></figure>
<h4 id="cookie-、sessionStorage与localStorage的区别"><a href="#cookie-、sessionStorage与localStorage的区别" class="headerlink" title="cookie 、sessionStorage与localStorage的区别"></a>cookie 、sessionStorage与localStorage的区别</h4><img src="/local-store/4.png">
<h4 id="sessionStorage与localStorage的使用示例"><a href="#sessionStorage与localStorage的使用示例" class="headerlink" title="sessionStorage与localStorage的使用示例"></a>sessionStorage与localStorage的使用示例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web Storage 示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web Storage 示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"保存数据"</span> <span class="attr">onclick</span>=<span class="string">"saveStorage('input');"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"读取数据"</span> <span class="attr">onclick</span>=<span class="string">"loadStorage('msg');"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>单击”保存数据”按钮时调用saveStorage方法保存数据，单击”读取数据”按钮时调用loadStorage方法调用数据，这两个方法均在脚本文件script.js中，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sessionStorage 示例  (保存一个会话周期:从打开浏览器——到关闭浏览器窗口)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveStorage</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target=<span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="keyword">var</span> str=target.value;</span><br><span class="line">    sessionStorage.setItem(<span class="string">"message"</span>,str);</span><br><span class="line">    <span class="comment">//或者sessionStorage.message=str;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStorage</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target=<span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="keyword">var</span> msg=sessionStorage.getItem(<span class="string">"message"</span>);</span><br><span class="line">    <span class="comment">//或者var msg=sessionStorage.message;</span></span><br><span class="line">    target.innerHTML=msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//localStorage 示例(可永久保存)    </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveStorage</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target=<span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="keyword">var</span> str=target.value;</span><br><span class="line">    localStorage.setItem(<span class="string">"message"</span>,str);</span><br><span class="line">    <span class="comment">//或者localStorage.message=str;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStorage</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target=<span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>);</span><br><span class="line">    <span class="keyword">var</span> msg=localStorage.getItem(<span class="string">"message"</span>);</span><br><span class="line">    <span class="comment">//或者var msg=localStorage.message;</span></span><br><span class="line">    target.innerHTML=msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个脚本文件分别使用了sessionStorage与localStorage两种方法。这两种方法都是当用户在input文本框中输入内容后单击”保存数据”按钮保存数据，单击”读取数据”按钮读取保存后的数据。但是两种方法对数据的处理方式不一样，在使用sessionStorage方法时，如果关闭了浏览器，这个数据就丢失了，下一次打开浏览器单击”读取数据”按钮时，读取不到任何数据。在使用localStorage方法时，即使浏览器关闭了，下次打开浏览器时仍然能够读取保存的数据。不过，数据保存是按不同的浏览器分别进行保存的，也就是说，打开别的浏览器是读取不到在这个浏览器中保存的数据的。</p>
<p>下面具体看一下读写数据时使用的基本方法</p>
<p>(1)sessionStorage</p>
<p>保存数据的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line">sessionStorage.key=<span class="string">"value"</span>;</span><br></pre></td></tr></table></figure>
<p>读取数据的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">变量=sessionStorage.getItem(<span class="string">"key"</span>);</span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line">变量=sessionStorage.key;</span><br></pre></td></tr></table></figure>
<p>(2)localStorage</p>
<p>保存数据的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line">localStorage.key=<span class="string">"value"</span>;</span><br></pre></td></tr></table></figure>
<p>读取数据的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">变量=localStorage.getItem(<span class="string">"key"</span>);</span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line">变量=localStorage.key;</span><br></pre></td></tr></table></figure>
<p>在保存数据时，若使用sessionStorage读取或保存数据，则使用sessionStorage对象并调用该对象的读写方法；若使用localStorage读取或保存数据，则使用localStorage对象并调用该对象的读写方法。<br>在进行读写时，不管是哪个对象，都可以通过该对象的getItem方法来读取数据，也可以该对象的自定义属性值读取数据；可以通过该对象的setItem方法保存数据，也可以通过该对象的自定义属性值保存数据。保存数据时按“键名/键值”的形式进行保存。当通过该对象的getItem方法读取数据时，将参数指定为键名，该方法返回键值；当通过该对象的自定义属性值读取数据时，可以将该对象的某个自定义属性名作为键名，访问该自定义属性的属性值即可得到键值；当通过该对象的setItem方法保存数据时，将第一个参数指定为键名，将第二个参数指定为键值；当通过该对象的自定义属性值保存数据时，可以将该对象的某个自定义属性名作为键名，然后直接将该自定义属性值设置为键值。</p>
<p>在保存数据时不允许重复保存相同的键名。保存后可以修改键值，但不允许修改键名(只能重新取键名，然后再保存键值)。</p>
<p>最后，这个示例在浏览器中的运行结果如下：</p>
<img src="/local-store/5.png">]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>Html5</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript字符串方法整理 - 最齐全的</title>
    <url>/string-methods/</url>
    <content><![CDATA[<h3 id="charAt-index"><a href="#charAt-index" class="headerlink" title="charAt(index)"></a>charAt(index)</h3><p>返回在指定位置的字符（不改变原字符串）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"HELLO WORLD"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.charAt(<span class="number">2</span>);<span class="comment">//返回字符串中的第三个字符:</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//HELLO WORLD</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//L</span></span><br></pre></td></tr></table></figure>
<h3 id="charCodeAt-index"><a href="#charCodeAt-index" class="headerlink" title="charCodeAt(index)"></a>charCodeAt(index)</h3><p>返回在指定的位置的字符的 Unicode 编码（不改变原字符串）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"HELLO WORLD"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.charCodeAt(<span class="number">0</span>);<span class="comment">//返回字符串第一个字符的 Unicode 编码</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//HELLO WORLD</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//72</span></span><br></pre></td></tr></table></figure>
<h3 id="concat-string1-string2-…-stringX"><a href="#concat-string1-string2-…-stringX" class="headerlink" title="concat(string1, string2, …, stringX)"></a>concat(string1, string2, …, stringX)</h3><p>连接两个或更多字符串，并返回新的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">"Hello "</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">"world!"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str1.concat(str2);<span class="comment">//连接两个字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//Hello world!</span></span><br></pre></td></tr></table></figure>
<h3 id="fromCharCode-code1-code2-…-codeX"><a href="#fromCharCode-code1-code2-…-codeX" class="headerlink" title="fromCharCode(code1, code2, …, codeX)"></a>fromCharCode(code1, code2, …, codeX)</h3><p>将 Unicode 编码转为字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="built_in">String</span>.fromCharCode(<span class="number">65</span>);</span><br><span class="line"><span class="keyword">let</span> m = <span class="built_in">String</span>.fromCharCode(<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//A</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//ABC</span></span><br></pre></td></tr></table></figure>
<h3 id="includes-searchString-start"><a href="#includes-searchString-start" class="headerlink" title="includes(searchString, start)"></a>includes(searchString, start)</h3><p>查找字符串中是否包含指定的子字符串，如果找到匹配的字符串则返回 true，否则返回 false。</p>
<p>第一个参数（必选）是要查找的字符串，第二个参数（可选）设置从那个位置开始查找，默认为 0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello world, welcome to the universe."</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.includes(<span class="string">"world"</span>);<span class="comment">//查找字符串是否包含 "world"</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> m = str.includes(<span class="string">"world"</span>, <span class="number">12</span>);<span class="comment">//从第 12 个索引位置开始查找字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h3 id="indexOf-searchString-start"><a href="#indexOf-searchString-start" class="headerlink" title="indexOf(searchString, start)"></a>indexOf(searchString, start)</h3><p>返回某个指定的字符串值在字符串中首次出现的位置，如果没有找到匹配的字符串则返回 -1（不改变原字符串）。</p>
<p>第一个参数（必选）规定检索的字符串值；</p>
<p>第二个参数（可选）的整数。规定在字符串中开始检索的位置。它的合法取值是 0 到 string Object.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello world, welcome to the universe."</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.indexOf(<span class="string">"welcome"</span>);<span class="comment">//查找字符串 "welcome"</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Hello world, welcome to the universe.</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//13</span></span><br><span class="line"><span class="keyword">let</span> m = str.indexOf(<span class="string">"e"</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//14</span></span><br></pre></td></tr></table></figure>
<h3 id="lastIndexOf-searchString-start"><a href="#lastIndexOf-searchString-start" class="headerlink" title="lastIndexOf(searchString, start)"></a>lastIndexOf(searchString, start)</h3><p>从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置，如果没有找到匹配字符串则返回 -1 。</p>
<p>第一个参数（必选）规定检索的字符串值；</p>
<p>第二个参数（可选）整数，规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的最后一个字符处开始检索。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"I am from runoob，welcome to runoob site."</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.lastIndexOf(<span class="string">"runoob"</span>);<span class="comment">//查找字符串 "runoob" 最后出现的位置</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//28</span></span><br><span class="line"><span class="keyword">let</span> m = str.lastIndexOf(<span class="string">"runoob"</span>, <span class="number">20</span>);<span class="comment">//从第 20 个字符开始查找字符串 "runoob" 最后出现的位置</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//10</span></span><br><span class="line"><span class="keyword">let</span> k = str.lastIndexOf(<span class="string">"runoob"</span>, <span class="number">9</span>);<span class="comment">//从第 10 个字符开始从后向前查找字符串 "runoob" 最后出现的位置</span></span><br><span class="line"><span class="built_in">console</span>.log(k);<span class="comment">//-1</span></span><br></pre></td></tr></table></figure>
<h3 id="match-regexp"><a href="#match-regexp" class="headerlink" title="match(regexp)"></a>match(regexp)</h3><p>查找找到一个或多个正则表达式的匹配。</p>
<p>这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"The rain in SPAIN stays mainly in the plain"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.match(<span class="regexp">/ain/g</span>);<span class="comment">//在字符串中查找 "ain"</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//[ 'ain', 'ain', 'ain' ]</span></span><br><span class="line"><span class="keyword">let</span> m = str.match(<span class="regexp">/ain/gi</span>);<span class="comment">//全局查找字符串 "ain"，且不区分大小写\</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//[ 'ain', 'AIN', 'ain', 'ain' ]</span></span><br></pre></td></tr></table></figure>
<h3 id="repeat-count"><a href="#repeat-count" class="headerlink" title="repeat(count)"></a>repeat(count)</h3><p>复制字符串指定次数，并将它们连接在一起返回（不改变原字符串）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Runoob"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.repeat(<span class="number">2</span>);<span class="comment">//复制字符串 "Runoob" 两次</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Runoob</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//RunoobRunoob</span></span><br></pre></td></tr></table></figure>
<h3 id="replace-searchString-newvalue"><a href="#replace-searchString-newvalue" class="headerlink" title="replace(searchString, newvalue)"></a>replace(searchString, newvalue)</h3><p>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串，返回一个新的字符串。（不改变原字符串）。</p>
<p>第一个参数（必选）规定子字符串或要替换的模式的 RegExp 对象。请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象；</p>
<p>第二个参数（必选）一个字符串值。规定了替换文本或生成替换文本的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Visit Microsoft! Visit Microsoft!"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.replace(<span class="string">"Microsoft"</span>, <span class="string">"Runoob"</span>);<span class="comment">//在本例中，我们将执行一次替换，当第一个 "Microsoft" 被找到，它就被替换为 "Runoob"</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Visit Microsoft! Visit Microsoft!</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//Visit Runoob! Visit Microsoft!</span></span><br><span class="line"><span class="keyword">let</span> str2=<span class="string">"Mr Blue has a blue house and a blue car"</span>;</span><br><span class="line"><span class="keyword">let</span> m=str2.replace(<span class="regexp">/blue/g</span>,<span class="string">"red"</span>);<span class="comment">//执行一个全局替换</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//Mr Blue has a blue house and a blue car</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//Mr Blue has a red house and a red car</span></span><br><span class="line"><span class="keyword">let</span> k=str2.replace(<span class="regexp">/blue/gi</span>,<span class="string">"red"</span>);<span class="comment">//执行一个全局替换</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//Mr Blue has a blue house and a blue car</span></span><br><span class="line"><span class="built_in">console</span>.log(k);<span class="comment">//Mr red has a red house and a red car</span></span><br></pre></td></tr></table></figure>
<h3 id="search-searchString"><a href="#search-searchString" class="headerlink" title="search(searchString)"></a>search(searchString)</h3><p>检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，返回与指定查找的字符串或者正则表达式相匹配的 String 对象起始位置。如果没有找到任何匹配的子串，则返回 -1。（不改变原字符串）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Visit Runoob!"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.search(<span class="string">"Runoob"</span>);<span class="comment">//查找 "Runoob"</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Visit Runoob!</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//6</span></span><br><span class="line"><span class="keyword">let</span> str2=<span class="string">"Mr. Blue has a blue house"</span>;</span><br><span class="line"><span class="keyword">let</span> m = str2.search(<span class="string">"blue"</span>);<span class="comment">//执行一次对大小写敏感的查找</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//Mr. Blue has a blue house</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//15</span></span><br><span class="line"><span class="keyword">let</span> k = str2.search(<span class="regexp">/blue/i</span>);<span class="comment">//执行一次忽略大小写的检索</span></span><br><span class="line"><span class="built_in">console</span>.log(k);<span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<h3 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice(start, end)"></a>slice(start, end)</h3><p>提取字符串的片断，并在新的字符串中返回被提取的部分。</p>
<p>使用 start（包含） 和 end（不包含） 参数来指定字符串提取的部分。</p>
<p>第一个参数（必选）要抽取的片断的起始下标；</p>
<p>第二个参数（可选）紧接着要截取的片段结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.slice(<span class="number">3</span>);<span class="comment">//从字符串的第3个位置提取字符串片段</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Hello world!</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">let</span> m=str.slice(<span class="number">3</span>,<span class="number">8</span>);<span class="comment">//从字符串的第3个位置到第8个位置直接的字符串片段</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//lo wo</span></span><br><span class="line"><span class="keyword">let</span> k = str.slice(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(k);<span class="comment">//!</span></span><br><span class="line"><span class="keyword">let</span> l = str.slice(<span class="number">-3</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(l);<span class="comment">//ld</span></span><br></pre></td></tr></table></figure>
<h3 id="split-separator-limit"><a href="#split-separator-limit" class="headerlink" title="split(separator, limit)"></a>split(separator, limit)</h3><p>把字符串分割为字符串数组（不改变原始字符串）。</p>
<p>注意：如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。</p>
<p>第一个参数（可选）字符串或正则表达式，从该参数指定的地方分割 string Object；</p>
<p>第二个参数（可选）该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"How are you doing today?"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.split(<span class="string">" "</span>);<span class="comment">//把一个字符串分割成字符串数组</span></span><br><span class="line"><span class="keyword">let</span> m = str.split(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//How are you doing today?</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//[ 'How', 'are', 'you', 'doing', 'today?' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//[ 'H','o','w', ' ','a','r','e',' ','y','o','u',' ','d','o','i','n','g',' ','t','o','d','a','y','?' ]</span></span><br><span class="line"><span class="keyword">let</span> k = str.split();<span class="comment">//省略分割参数</span></span><br><span class="line"><span class="built_in">console</span>.log(k);<span class="comment">//[ 'How are you doing today?' ]</span></span><br><span class="line"><span class="keyword">let</span> l=str.split(<span class="string">" "</span>,<span class="number">3</span>);<span class="comment">//使用 limit 参数</span></span><br><span class="line"><span class="built_in">console</span>.log(l);<span class="comment">//[ 'How', 'are', 'you' ]</span></span><br><span class="line"><span class="keyword">let</span> j = str.split(<span class="string">"o"</span>);<span class="comment">//使用一个字符作为分隔符</span></span><br><span class="line"><span class="built_in">console</span>.log(j);<span class="comment">//[ 'H', 'w are y', 'u d', 'ing t', 'day?' ]</span></span><br></pre></td></tr></table></figure>
<h3 id="startsWith-searchString-start"><a href="#startsWith-searchString-start" class="headerlink" title="startsWith(searchString, start)"></a>startsWith(searchString, start)</h3><p>查看字符串是否以指定的子字符串开头，如果是以指定的子字符串开头返回 true，否则 false。</p>
<p>startsWith() 方法对大小写敏感。</p>
<p>第一个参数（必选）要查找的字符串；第二个参数（可选）查找的开始位置，默认是0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello world, welcome to the Runoob."</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.startsWith(<span class="string">"Hello"</span>);<span class="comment">//查看字符串是否为 "Hello" 开头</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> m = str.startsWith(<span class="string">"world"</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="substr-start-length"><a href="#substr-start-length" class="headerlink" title="substr(start, length)"></a>substr(start, length)</h3><p>从起始索引号提取字符串中指定数目的字符（不改变原字符串）。</p>
<p>第一个参数（必选）要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推；</p>
<p>第二个参数（可选）字符串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.substr(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//抽取指定数目的字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Hello world!</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//llo</span></span><br><span class="line"><span class="keyword">let</span> m = str.substr(<span class="number">2</span>);<span class="comment">//从字符串第二个位置中提取一些字符</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//llo world!</span></span><br></pre></td></tr></table></figure>
<h3 id="substring-from-to"><a href="#substring-from-to" class="headerlink" title="substring(from, to)"></a>substring(from, to)</h3><p>提取字符串中两个指定的索引号之间的字符，返回的子串包括 开始 处的字符，但不包括 结束 处的字符。</p>
<p>第一个参数（必选）一个非负的整数，规定要提取的子串的第一个字符在 string Object 中的位置；</p>
<p>第二个参数（可选）一个非负的整数，比要提取的子串的最后一个字符在 string Object 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.substring(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> m = str.substring(<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//lo world!</span></span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">//lo w</span></span><br></pre></td></tr></table></figure>
<h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h3><p>把字符串转换为小写（不改变原字符串）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Runoob"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.toLowerCase();</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Runoob</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//runoob</span></span><br></pre></td></tr></table></figure>
<h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h3><p>把字符串转换为大写（不改变原字符串）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Runoob"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.toUpperCase();</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Runoob</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//RUNOOB</span></span><br></pre></td></tr></table></figure>
<h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p>去除字符串两边的空白，用于删除字符串的头尾空格（不改变原字符串）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"       Run  oob        "</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.trim();</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//       Run  oob</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//Run  oob</span></span><br></pre></td></tr></table></figure>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>返回一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Runoob"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.toString();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//Runoob</span></span><br></pre></td></tr></table></figure>
<h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><p>返回某个字符串对象的原始值，通常由 JavaScript 在后台自动进行调用，而不是显式地处于代码中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.valueOf();</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//Hello world!</span></span><br></pre></td></tr></table></figure>
<h3 id="toLocaleLowerCase"><a href="#toLocaleLowerCase" class="headerlink" title="toLocaleLowerCase()"></a>toLocaleLowerCase()</h3><p>根据本地主机的语言环境把字符串转换为小写（不改变原字符串）。</p>
<p>通常，该方法与 toLowerCase() 方法返回的结果相同，只有几种语言（如土耳其语）具有地方特有的大小写映射。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Runoob"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.toLocaleLowerCase();</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Runoob</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//runoob</span></span><br></pre></td></tr></table></figure>
<h3 id="toLocaleUpperCase"><a href="#toLocaleUpperCase" class="headerlink" title="toLocaleUpperCase()"></a>toLocaleUpperCase()</h3><p>根据本地主机的语言环境把字符串转换为大写（不改变原字符串）。</p>
<p>通常，该方法与 toUpperCase() 方法返回的结果相同，只有几种语言（如土耳其语）具有地方特有的大小写映射。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Runoob"</span>;</span><br><span class="line"><span class="keyword">let</span> n = str.toLocaleUpperCase();</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//Runoob</span></span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//RUNOOB</span></span><br></pre></td></tr></table></figure>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol>
<li>big()    用大号字体显示字符串。</li>
<li>blink()  显示闪动字符串。</li>
<li>bold()   使用粗体显示字符串。</li>
<li>fixed()  以打字机文本显示字符串。</li>
<li>fontcolor()  使用指定的颜色来显示字符串。</li>
<li>fontsize()   使用指定的尺寸来显示字符串。</li>
<li>italics()    使用斜体显示字符串。</li>
<li>link()   将字符串显示为链接。</li>
<li>small()  使用小字号来显示字符串。</li>
<li>strike()    用于显示加删除线的字符串。</li>
<li>sub()   把字符串显示为下标。</li>
<li>sup()   把字符串显示为上标。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> txt = <span class="string">"Hello World!"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;字体变大: "</span> + txt.big() + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;字体缩小: "</span> + txt.small() + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;字体加粗: "</span> + txt.bold() + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;斜体: "</span> + txt.italics() + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;固定定位: "</span> + txt.fixed() + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;加删除线: "</span> + txt.strike() + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;字体颜色: "</span> + txt.fontcolor(<span class="string">"green"</span>) + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;字体大小: "</span> + txt.fontsize(<span class="number">6</span>) + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;下标: "</span> + txt.sub() + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;上标: "</span> + txt.sup() + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;链接: "</span> + txt.link(<span class="string">"http://www.w3cschool.cc"</span>) + <span class="string">"&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;闪动文本: "</span> + txt.blink() + <span class="string">" (不能用于IE,Chrome,或者Safari)&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript异步和同步理解 + 异步编程的4种方法</title>
    <url>/synchronous-asynchronous/</url>
    <content><![CDATA[<h3 id="一、Javascript同步和异步介绍"><a href="#一、Javascript同步和异步介绍" class="headerlink" title="一、Javascript同步和异步介绍"></a>一、Javascript同步和异步介绍</h3><p>我们知道，javascript语言是一门“<strong>单线程</strong>”的语言，所谓”单线程”，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>
<p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p>
<p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：<strong>同步（Synchronous）</strong>和<strong>异步（Asynchronous）</strong>。</p>
<ul>
<li>“同步模式”：就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；</li>
<li>“异步模式”：则完全不同，每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。</li>
</ul>
<p>“异步模式”非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，”异步模式”甚至是唯一的模式，因为执行环境是单线程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。</p>
<p>其实同步和异步，无论如何，做事情的时候都是只有一条流水线（单线程），同步和异步的差别就在于这条流水线上各个流程的执行顺序不同。</p>
<p>最基础的异步是<strong>setTimeout</strong>和<strong>setInterval</strong>函数，很常见，但是很少人有人知道其实这就是异步，因为它们可以控制js的执行顺序。我们也可以简单地理解为：可以改变程序正常执行顺序的操作就可以看成是异步操作。如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"1"</span> );</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"2"</span> )</span><br><span class="line">    &#125;, <span class="number">0</span> );</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"3"</span> )</span><br><span class="line">    &#125;, <span class="number">0</span> );</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"4"</span> )</span><br><span class="line">    &#125;, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"5"</span> );</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>输出顺序是什么呢？</p>
<img src="/synchronous-asynchronous/1.png">
<p>可见，尽管我们设置了setTimeout（function，time）中的等待时间为0，结果其中的function还是后执行。</p>
<p>火狐浏览器的api文档有这样一句话：</p>
<blockquote>
<p>Because even though setTimeout was called with a delay of zero, it’s placed on a queue and scheduled to run at the next opportunity, not immediately. Currently executing code must complete before functions on the queue are executed, the resulting execution order may not be as expected.</p>
</blockquote>
<p>意思就是：尽管setTimeout的time延迟时间为0，其中的function也会被放入一个队列中，等待下一个机会执行，当前的代码（指不需要加入队列中的程序）必须在该队列的程序完成之前完成，因此结果可能不与预期结果相同。</p>
<p>这里说到了一个“<strong>队列</strong>”（即<strong>任务队列</strong>），该队列放的是什么呢，放的就是setTimeout中的function，这些function依次加入该队列，即该队列中所有function中的程序将会在该队列以外的所有代码执行完毕之后再以此执行，这是为什么呢？因为在执行程序的时候，浏览器会默认setTimeout以及ajax请求这一类的方法都是耗时程序（尽管可能不耗时），将其加入一个队列中，该队列是一个存储耗时程序的队列，在所有不耗时程序执行过后，再来依次执行该队列中的程序。</p>
<p>又回到了最初的起点——javascript是单线程。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。于是就有一个概念——任务队列。如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。于是JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p>
<p>于是，所有任务可以分成两种，一种是<strong>同步任务（synchronous）</strong>，另一种是<strong>异步任务（asynchronous）</strong>。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有等主线程任务执行完毕，”任务队列”开始通知主线程，请求执行任务，该任务才会进入主线程执行。</p>
<p>具体来说，异步运行机制如下：</p>
<ol>
<li><p>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p>
</li>
<li><p>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p>
</li>
<li><p>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p>
</li>
<li><p>主线程不断重复上面的第三步。</p>
</li>
</ol>
<p><strong>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制</strong>。这个过程会不断重复。</p>
<p>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。<br>“任务队列”中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等），比如$(selectot).click(function)，这些都是相对耗时的操作。只要指定过这些事件的回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。<br>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码，前面说的点击事件$(selectot).click(function)中的function就是一个回调函数。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。例如ajax的success，complete，error也都指定了各自的回调函数，这些函数就会加入“任务队列”中，等待执行。</p>
<h3 id="二、Javascript异步编程的4种方法"><a href="#二、Javascript异步编程的4种方法" class="headerlink" title="二、Javascript异步编程的4种方法"></a>二、Javascript异步编程的4种方法</h3><h4 id="一、回调函数"><a href="#一、回调函数" class="headerlink" title="一、回调函数"></a>一、回调函数</h4><p>这是异步编程最基本的方法。</p>
<p>假定有两个函数f1和f2，后者等待前者的执行结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1();</span><br><span class="line">f2();</span><br></pre></td></tr></table></figure>
<p>如果f1是一个很耗时的任务，可以考虑改写f1，把f2写成f1的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">　　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line">　　　　callback();</span><br><span class="line">　　&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行代码就变成下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1(f2);</span><br></pre></td></tr></table></figure>
<p>采用这种方式，我们把同步操作变成了异步操作，f1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</p>
<p>回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度<strong>耦合（Coupling）</strong>，流程会很混乱，而且每个任务只能指定一个回调函数。</p>
<h4 id="二、事件监听"><a href="#二、事件监听" class="headerlink" title="二、事件监听"></a>二、事件监听</h4><p>另一种思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>
<p>还是以f1和f2为例。首先，为f1绑定一个事件（这里采用的jQuery的写法）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1.on(<span class="string">'done'</span>, f2);</span><br></pre></td></tr></table></figure>
<p>上面这行代码的意思是，当f1发生done事件，就执行f2。然后，对f1进行改写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line">　　　　f1.trigger(<span class="string">'done'</span>);</span><br><span class="line">　　&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>f1.trigger(‘done’)表示，执行完成后，立即触发done事件，从而开始执行f2。</p>
<p>这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以<strong>“去耦合”（Decoupling）</strong>，有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>
<h4 id="三、发布-订阅"><a href="#三、发布-订阅" class="headerlink" title="三、发布/订阅"></a>三、发布/订阅</h4><p>上一节的”事件”，完全可以理解成”信号”。</p>
<p>我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心<strong>“订阅”（subscribe）</strong>这个信号，从而知道什么时候自己可以开始执行。这就叫做<strong>“发布/订阅模式”（publish-subscribe pattern）</strong>，又称<strong>“观察者模式”（observer pattern）</strong>。</p>
<p>这个模式有多种实现，下面采用的是Ben Alman的Tiny Pub/Sub，这是jQuery的一个插件。</p>
<p>首先，f2向”信号中心”jQuery订阅”done”信号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.subscribe(<span class="string">"done"</span>, f2);</span><br></pre></td></tr></table></figure>
<p>然后，f1进行如下改写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line">　　　　jQuery.publish(<span class="string">"done"</span>);</span><br><span class="line">　　&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>jQuery.publish(“done”)的意思是，f1执行完成后，向”信号中心”jQuery发布”done”信号，从而引发f2的执行。</p>
<p>此外，f2完成执行后，也可以<strong>取消订阅（unsubscribe）</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.unsubscribe(<span class="string">"done"</span>, f2);</span><br></pre></td></tr></table></figure>
<p>这种方法的性质与”事件监听”类似，但是明显优于后者。因为我们可以通过查看”消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p>
<h4 id="四、Promises对象"><a href="#四、Promises对象" class="headerlink" title="四、Promises对象"></a>四、Promises对象</h4><p><strong>Promises</strong>对象是<strong>CommonJS工作组</strong>提出的一种规范，目的是为异步编程提供统一接口。</p>
<p>简单说，它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1().then(f2);</span><br></pre></td></tr></table></figure>
<p>f1要进行如下改写（这里使用的是jQuery的实现）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">var</span> dfd = $.Deferred();</span><br><span class="line">　　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line">　　　　dfd.resolve();</span><br><span class="line">　　&#125;, <span class="number">500</span>);</span><br><span class="line">　　<span class="keyword">return</span> dfd.promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。</p>
<p>比如，指定多个回调函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1().then(f2).then(f3);</span><br></pre></td></tr></table></figure>
<p>再比如，指定发生错误时的回调函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1().then(f2).fail(f3);</span><br></pre></td></tr></table></figure>
<p>而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Synchronous</tag>
        <tag>Asynchronous</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3新单位vw、vh、vmin、vmax介绍</title>
    <url>/unit-css3/</url>
    <content><![CDATA[<h3 id="一、让我介绍一下"><a href="#一、让我介绍一下" class="headerlink" title="一、让我介绍一下"></a>一、让我介绍一下</h3><h4 id="1，vw、vh、vmin、vmax-的含义"><a href="#1，vw、vh、vmin、vmax-的含义" class="headerlink" title="1，vw、vh、vmin、vmax 的含义"></a>1，vw、vh、vmin、vmax 的含义</h4><p>（1）vw、vh、vmin、vmax 是一种视窗单位，也是相对单位。它相对的不是父节点或者页面的根节点。而是由视窗（Viewport）大小来决定的，单位 1，代表类似于 1%。视窗(Viewport)是你的浏览器实际显示内容的区域—，换句话说是你的不包括工具栏和按钮的网页浏览器。</p>
<p>（2）具体描述如下：</p>
<ul>
<li>vw：视窗宽度的百分比（1vw 代表视窗的宽度为 1%）</li>
<li>vh：视窗高度的百分比</li>
<li>vmin：当前 vw 和 vh 中较小的一个值</li>
<li>vmax：当前 vw 和 vh 中较大的一个值</li>
</ul>
<h4 id="2，vw、vh-与-百分比的区别"><a href="#2，vw、vh-与-百分比的区别" class="headerlink" title="2，vw、vh 与 % 百分比的区别"></a>2，vw、vh 与 % 百分比的区别</h4><p>（1）% 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。<br>（2）vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的，所以这是挺不错的优势。</p>
<h4 id="3，vmin、vmax-用处"><a href="#3，vmin、vmax-用处" class="headerlink" title="3，vmin、vmax 用处"></a>3，vmin、vmax 用处</h4><p>做移动页面开发时，如果使用 vw、wh 设置字体大小（比如 5vw），在竖屏和横屏状态下显示的字体大小是不一样的。<br>由于 vmin 和 vmax 是当前较小的 vw 和 vh 和当前较大的 vw 和 vh。这里就可以用到 vmin 和 vmax。使得文字大小在横竖屏下保持一致。</p>
<h4 id="4，浏览器兼容性"><a href="#4，浏览器兼容性" class="headerlink" title="4，浏览器兼容性"></a>4，浏览器兼容性</h4><h5 id="（1）桌面-PC（1）桌面-PC"><a href="#（1）桌面-PC（1）桌面-PC" class="headerlink" title="（1）桌面 PC（1）桌面 PC"></a>（1）桌面 PC（1）桌面 PC</h5><ul>
<li>Chrome：自 26 版起就完美支持（2013年2月）</li>
<li>Firefox：自 19 版起就完美支持（2013年1月）</li>
<li>Safari：自 6.1 版起就完美支持（2013年10月）</li>
<li>Opera：自 15 版起就完美支持（2013年7月）</li>
<li>IE：自 IE10 起（包括 Edge）到现在还只是部分支持（不支持 vmax，同时 vm 代替 vmin）</li>
</ul>
<h5 id="（2）移动设备"><a href="#（2）移动设备" class="headerlink" title="（2）移动设备"></a>（2）移动设备</h5><ul>
<li>Android：自 4.4 版起就完美支持（2013年12月）</li>
<li>iOS：自 iOS8 版起就完美支持（2014年9月）</li>
</ul>
<h3 id="二、一个简单的样例"><a href="#二、一个简单的样例" class="headerlink" title="二、一个简单的样例"></a>二、一个简单的样例</h3><h4 id="1，页面代码"><a href="#1，页面代码" class="headerlink" title="1，页面代码"></a>1，页面代码</h4><p>视窗（Viewport）单位除了可以用来设置元素的宽高尺寸，也可以在文本中使用。下面使用 vw 设置字体大小来实现响应式文字。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hangge.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      html, body, div, span, h1, h2, h3 &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        border: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.demo</span> &#123;</span></span><br><span class="line"><span class="undefined">       width: 100vw;</span></span><br><span class="line"><span class="undefined">       font-size: 5vw;</span></span><br><span class="line"><span class="undefined">       margin: 0 auto;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">background-color</span>: <span class="selector-id">#50688B</span>;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">color</span>: <span class="selector-id">#FFF</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.demo2</span> &#123;</span></span><br><span class="line"><span class="undefined">       width: 80vw;</span></span><br><span class="line"><span class="undefined">       font-size: 5vw;</span></span><br><span class="line"><span class="undefined">       margin: 0 auto;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">background-color</span>: <span class="selector-id">#ff6a00</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.demo3</span> &#123;</span></span><br><span class="line"><span class="undefined">       width: 50vw;</span></span><br><span class="line"><span class="undefined">       height: 50vh;</span></span><br><span class="line"><span class="undefined">       font-size: 1vw;</span></span><br><span class="line"><span class="undefined">       margin: 0 auto;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">background-color</span>: <span class="selector-id">#ff006e</span>;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">color</span>: <span class="selector-id">#FFF</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>宽度100％, 字体5％<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo2"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>宽度80％, 字体5％<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo3"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>宽度50％, 高度50％, 字体1％<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2，效果图"><a href="#2，效果图" class="headerlink" title="2，效果图"></a>2，效果图</h4><img src="/unit-css3/1.png">
<h3 id="三、实现完整覆盖的遮罩层"><a href="#三、实现完整覆盖的遮罩层" class="headerlink" title="三、实现完整覆盖的遮罩层"></a>三、实现完整覆盖的遮罩层</h3><p>有时为了突出弹出框，或者避免页面元素被点击。我们需要一个覆盖整个可视区域的半透明遮罩，这个使用 vw、vh 就可以很轻易地实现。</p>
<h4 id="1，样例代码"><a href="#1，样例代码" class="headerlink" title="1，样例代码"></a>1，样例代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hangge.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      html, body, div, span, button &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        border: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">      button &#123;</span></span><br><span class="line"><span class="undefined">        width: 120px;</span></span><br><span class="line"><span class="undefined">        height: 30px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#FFFFFF</span>;</span></span><br><span class="line"><span class="undefined">        font-family: "微软雅黑";</span></span><br><span class="line"><span class="undefined">        font-size: 14px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#28B995</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-id">#mask</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100vw;</span></span><br><span class="line"><span class="undefined">        height: 100vh;</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#000000</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">opacity</span>: 0<span class="selector-class">.5</span>;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"document.getElementById('mask').style.display='inline'"</span>&gt;</span>点击显示遮罩<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mask"</span> <span class="attr">onclick</span>=<span class="string">"document.getElementById('mask').style.display='none'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2，效果图-1"><a href="#2，效果图-1" class="headerlink" title="2，效果图"></a>2，效果图</h4><img src="/unit-css3/2.png">
<img src="/unit-css3/3.png">
<h3 id="四、实现居中显示的弹出框"><a href="#四、实现居中显示的弹出框" class="headerlink" title="四、实现居中显示的弹出框"></a>四、实现居中显示的弹出框</h3><h4 id="1，弹出框大小随内容自适应"><a href="#1，弹出框大小随内容自适应" class="headerlink" title="1，弹出框大小随内容自适应"></a>1，弹出框大小随内容自适应</h4><h5 id="（1）样例效果图"><a href="#（1）样例效果图" class="headerlink" title="（1）样例效果图"></a>（1）样例效果图</h5><p>点击弹出按钮后，会显示一个在整个屏幕上居中显示的弹出框。<br>弹出框的大小根据内容的大小自适应（logo 图片），同时弹出框后面还有个覆盖整个屏幕的半透明遮罩层。<br>点击关闭按钮后，则隐藏弹出框。<br><img src="/unit-css3/4.png"></p>
<h5 id="（2）样例代码"><a href="#（2）样例代码" class="headerlink" title="（2）样例代码"></a>（2）样例代码</h5><p>遮罩层使用 vw、vh 实现全屏覆盖。弹出框添加到遮罩层中并居中。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hangge.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      html, body, div, span, button &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        border: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">      button &#123;</span></span><br><span class="line"><span class="undefined">        width: 120px;</span></span><br><span class="line"><span class="undefined">        height: 30px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#FFFFFF</span>;</span></span><br><span class="line"><span class="undefined">        font-family: "微软雅黑";</span></span><br><span class="line"><span class="undefined">        font-size: 14px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#28B995</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-container</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">        width: 100vw;</span></span><br><span class="line"><span class="undefined">        height: 100vh;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.35</span>);</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        z-index: 10;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-container</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="undefined">        width: 0;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        vertical-align: middle;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-box</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">        text-align: left;</span></span><br><span class="line"><span class="undefined">        vertical-align: middle;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-title</span> &#123;</span></span><br><span class="line"><span class="undefined">        line-height: 28px;</span></span><br><span class="line"><span class="undefined">        padding-left: 5px;</span></span><br><span class="line"><span class="undefined">        padding-right: 5px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="undefined">        font-size: 12px;</span></span><br><span class="line"><span class="undefined">        text-align: left;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-close</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 5px;</span></span><br><span class="line"><span class="undefined">        right: 5px;</span></span><br><span class="line"><span class="undefined">        font-size: 12px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"$('#dialogContainer').show();"</span>&gt;</span>点击显示弹出框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dialogContainer"</span> <span class="attr">class</span>=<span class="string">"dialog-container"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-box"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-title"</span>&gt;</span>居中弹出框<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"$('#dialogContainer').hide();"</span> <span class="attr">class</span>=<span class="string">"dialog-close"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"logo.png"</span> <span class="attr">class</span>=<span class="string">"demo-image"</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2，弹出框大小随视窗大小改变"><a href="#2，弹出框大小随视窗大小改变" class="headerlink" title="2，弹出框大小随视窗大小改变"></a>2，弹出框大小随视窗大小改变</h4><h5 id="（1）样例效果图-1"><a href="#（1）样例效果图-1" class="headerlink" title="（1）样例效果图"></a>（1）样例效果图</h5><p>点击弹出按钮后，会显示一个在整个屏幕上居中显示的弹出框。<br>弹出框的大小不再由内容的大小决定，而是随视窗大小改变（宽高均为屏幕可视区域的 80%）。<br>点击关闭按钮后，则隐藏弹出框。<br><img src="/unit-css3/5.png"><br><img src="/unit-css3/6.png"></p>
<h5 id="（2）样例代码-1"><a href="#（2）样例代码-1" class="headerlink" title="（2）样例代码"></a>（2）样例代码</h5><p>遮罩层使用 vw、vh 实现全屏覆盖。而弹出框的尺寸位置同样使用 vw、vh 设置。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hangge.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      html, body, div, span, button &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        border: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">      button &#123;</span></span><br><span class="line"><span class="undefined">        width: 120px;</span></span><br><span class="line"><span class="undefined">        height: 30px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#FFFFFF</span>;</span></span><br><span class="line"><span class="undefined">        font-family: "微软雅黑";</span></span><br><span class="line"><span class="undefined">        font-size: 14px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#28B995</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-container</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">        width: 100vw;</span></span><br><span class="line"><span class="undefined">        height: 100vh;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.35</span>);</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        z-index: 10;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:10vh</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:10vw</span>;</span></span><br><span class="line"><span class="undefined">        width: 80vw;</span></span><br><span class="line"><span class="undefined">        height: 80vh;</span></span><br><span class="line"><span class="undefined">        text-align: left;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        flex-direction: column;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-title</span> &#123;</span></span><br><span class="line"><span class="undefined">        line-height: 28px;</span></span><br><span class="line"><span class="undefined">        padding-left: 5px;</span></span><br><span class="line"><span class="undefined">        padding-right: 5px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="undefined">        font-size: 12px;</span></span><br><span class="line"><span class="undefined">        text-align: left;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-close</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 5px;</span></span><br><span class="line"><span class="undefined">        right: 5px;</span></span><br><span class="line"><span class="undefined">        font-size: 12px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line"><span class="undefined">        overflow: auto;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"$('#dialogContainer').show();"</span>&gt;</span>点击显示弹出框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dialogContainer"</span> <span class="attr">class</span>=<span class="string">"dialog-container"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-box"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-title"</span>&gt;</span>居中弹出框<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"$('#dialogContainer').hide();"</span> <span class="attr">class</span>=<span class="string">"dialog-close"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"logo.png"</span> <span class="attr">class</span>=<span class="string">"demo-image"</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="五、显示大图时限制其最大尺寸"><a href="#五、显示大图时限制其最大尺寸" class="headerlink" title="五、显示大图时限制其最大尺寸"></a>五、显示大图时限制其最大尺寸</h3><p>我们还可以通过视图单位来限制一些元素的最大宽度或高度，避尺寸过大而超出屏幕。</p>
<h4 id="1，效果图"><a href="#1，效果图" class="headerlink" title="1，效果图"></a>1，效果图</h4><p>（1）点击按钮，在屏幕中央显示原始图片的大图。<br>（2）如果图片原始宽高均不超过屏幕宽高的 90%，则显示图片的默认大小。<br>（3）如果图片原始宽高均超过屏幕宽高的 90%，则限制为屏幕的 90%，使其能够完全显示。<br><img src="/unit-css3/7.png"><br><img src="/unit-css3/8.png"></p>
<h4 id="2，样例代码"><a href="#2，样例代码" class="headerlink" title="2，样例代码"></a>2，样例代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hangge.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      html, body, div, span, button &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        border: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">      button &#123;</span></span><br><span class="line"><span class="undefined">        width: 120px;</span></span><br><span class="line"><span class="undefined">        height: 30px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#FFFFFF</span>;</span></span><br><span class="line"><span class="undefined">        font-family: "微软雅黑";</span></span><br><span class="line"><span class="undefined">        font-size: 14px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#28B995</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-container</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">        width: 100vw;</span></span><br><span class="line"><span class="undefined">        height: 100vh;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.35</span>);</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        z-index: 10;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-container</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="undefined">        width: 0;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        vertical-align: middle;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.dialog-box</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        text-align: left;</span></span><br><span class="line"><span class="undefined">        vertical-align: middle;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-class">.demo-image</span> &#123;</span></span><br><span class="line"><span class="undefined">        max-width: 90vw;</span></span><br><span class="line"><span class="undefined">        max-height: 90vh;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"$('#dialogContainer').show();"</span>&gt;</span>点击显示大图<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dialogContainer"</span> <span class="attr">class</span>=<span class="string">"dialog-container"</span> <span class="attr">onclick</span>=<span class="string">"$('#dialogContainer').hide();"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-box"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image.jpg"</span> <span class="attr">class</span>=<span class="string">"demo-image"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="六、实现-Word-文档页面效果"><a href="#六、实现-Word-文档页面效果" class="headerlink" title="六、实现 Word 文档页面效果"></a>六、实现 Word 文档页面效果</h3><h4 id="1，效果图-1"><a href="#1，效果图-1" class="headerlink" title="1，效果图"></a>1，效果图</h4><p>（1）使用 vh 单位，我们可把 web 页面做得像 Office 文档那样，一屏正好一页。改变浏览器窗口尺寸，每页的大小也会随之变化。<br>（2）拖动滚动条，我们可以一直往下看到最后一页。<br><img src="/unit-css3/9.png"><br><img src="/unit-css3/10.png"></p>
<h4 id="2，样例代码-1"><a href="#2，样例代码-1" class="headerlink" title="2，样例代码"></a>2，样例代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hangge.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      html, body, div, span, button &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        border: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">      body &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#789BC9</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">      page &#123;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        height: 98vh;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span>: 69<span class="selector-class">.3vh</span>;</span></span><br><span class="line"><span class="undefined">        margin: 1vh auto;</span></span><br><span class="line"><span class="undefined">        padding: 12vh;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#646464</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 0 15<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.75</span>);</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        background-color: white;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">      <span class="selector-tag">page</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="undefined">        content: attr(data-page);</span></span><br><span class="line"><span class="undefined">        color: graytext;</span></span><br><span class="line"><span class="undefined">        font-size: 12px;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        bottom: 4vh;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        left: 10vh;</span></span><br><span class="line"><span class="undefined">        right: 10vh;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">      a &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#34538b</span>;</span></span><br><span class="line"><span class="undefined">        font-size: 14px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> lenPage = $(<span class="string">"page"</span>).length;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//自动添加每页底部的页码</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"page"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="keyword">this</span>).attr(<span class="string">"data-page"</span>, <span class="string">"第 "</span>+ (i+<span class="number">1</span>) +<span class="string">" 页，共 "</span>+ lenPage +<span class="string">" 页"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">page</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://hangge.com"</span>&gt;</span>欢迎访问 hangge.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">page</span>&gt;</span><span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">page</span>&gt;</span><span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>vue兄弟组件间的传值</title>
    <url>/vue-sibling-components-pass-values/</url>
    <content><![CDATA[<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ol>
<li><p>先由A子组件通过 $emit 传值给父组件</p>
</li>
<li><p>再由父组件通过事件接收传给B子组件</p>
</li>
<li><p>最后由B组件通过 props 接收传值</p>
</li>
</ol>
<p><strong>使用场景</strong>：管理后台的头部（Header）和左边导航栏（Aside）分别为子组件，并且同时被Home组件引用，我们头部组件上面要显示 面包屑 功能，选中哪个导航栏 面包屑 就显示对应的导航栏名称。<br>注意：这里我用了 element-ui 框架</p>
<img src="/vue-sibling-components-pass-values/1.jpg">
<blockquote>
<p>Aside组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">default-active</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"el-menu-vertical-demo"</span> @<span class="attr">select</span>=<span class="string">"selectMenu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航三<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu4"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航四<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu5"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航五<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">""</span>,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="undefined">            selectMenu(index)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'passIndex'</span>,index);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Home组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"homeBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">"background:#eee;lineHeight:60px;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Header</span> <span class="attr">:tabIndex</span>=<span class="string">"tabIndex"</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Aside</span> @<span class="attr">passIndex</span>=<span class="string">"getIndex"</span>&gt;</span><span class="tag">&lt;/<span class="name">Aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Aside <span class="keyword">from</span> <span class="string">'../components/Aside'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'../components/Header'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">"home"</span>,</span></span><br><span class="line"><span class="undefined">        data()&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                tabIndex: <span class="string">'1'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components: &#123;</span></span><br><span class="line"><span class="undefined">            Aside,</span></span><br><span class="line"><span class="undefined">            Header</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="undefined">            getIndex(index)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.tabIndex = index;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Header组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>面包屑 / &#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        头部</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">""</span>,</span></span><br><span class="line"><span class="undefined">        props: &#123;</span></span><br><span class="line"><span class="javascript">            tabIndex: <span class="built_in">String</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        watch:&#123;</span></span><br><span class="line"><span class="undefined">            tabIndex()&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="keyword">this</span>.tabIndex)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">switch</span> (<span class="keyword">this</span>.tabIndex) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">'1'</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.title = <span class="string">'导航一'</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">'2'</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.title = <span class="string">'导航二'</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">'3'</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.title = <span class="string">'导航三'</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">'4'</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.title = <span class="string">'导航四'</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">'5'</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.title = <span class="string">'导航五'</span>;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        data()&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                title:<span class="string">'导航二'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ol>
<li><p>兄弟之间传递数据需要借助于事件车，通过事件车的方式传递数据</p>
</li>
<li><p>创建一个Vue的实例，让各个兄弟共用同一个事件机制。</p>
</li>
<li><p>传递数据方，通过一个事件触发bus.$emit(方法名，传递的数据)。</p>
</li>
<li><p>接收数据方，通过mounted(){}触发bus.$on(方法名，function(接收数据的参数){用该组件的数据接收传递过来的数据})，此时函数中的this已经发生了改变，可以使用箭头函数。</p>
</li>
</ol>
<img src="/vue-sibling-components-pass-values/2.jpg">
<p>我们可以创建一个单独的js文件eventBus.js，内容如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Aside组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">default-active</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"el-menu-vertical-demo"</span> @<span class="attr">select</span>=<span class="string">"selectMenu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航三<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu4"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航四<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu5"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航五<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">'../assets/js/eventBus'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">""</span>,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="undefined">            selectMenu(index)&#123;</span></span><br><span class="line"><span class="javascript">                eventBus.$emit(<span class="string">'passIndex'</span>,index);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Header组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>面包屑 / &#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        头部</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">'../assets/js/eventBus'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">""</span>,</span></span><br><span class="line"><span class="undefined">        data()&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                title:<span class="string">'导航二'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mounted()&#123;</span></span><br><span class="line"><span class="javascript">            eventBus.$on(<span class="string">"passIndex"</span>, (index) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span> (index) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'1'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.title = <span class="string">'导航一'</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'2'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.title = <span class="string">'导航二'</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'3'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.title = <span class="string">'导航三'</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'4'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.title = <span class="string">'导航四'</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'5'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.title = <span class="string">'导航五'</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>通过 vuex 状态管理来实现兄弟组件间传值，直接上代码</p>
<blockquote>
<p>Header组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>面包屑 / &#123;&#123;activeName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        头部</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">""</span>,</span></span><br><span class="line"><span class="undefined">        data()&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        computed:&#123;</span></span><br><span class="line"><span class="undefined">            activeName()&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span> (<span class="keyword">this</span>.$store.state.activeName) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'1'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="string">'introJs使用'</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'2'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="string">'Vuex学习'</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'3'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="string">'sync修饰符'</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'4'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="string">'组件传值'</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">'5'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="string">'导航五'</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mounted()&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Aside组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">default-active</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"el-menu-vertical-demo"</span> @<span class="attr">select</span>=<span class="string">"selectMenu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>introJs使用<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>Vuex学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>sync修饰符<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu4"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>组件传值<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/menu5"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>导航五<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">""</span>,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="undefined">            selectMenu(index)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$store.commit(<span class="string">'setActiveName'</span>,index);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>store.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">1</span>,</span><br><span class="line">        activeName:<span class="string">'2'</span> <span class="comment">//默认值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="comment">//传值</span></span><br><span class="line">        add(state,num) &#123;</span><br><span class="line">            state.count+=num</span><br><span class="line">        &#125;,</span><br><span class="line">        reduce(state)&#123;</span><br><span class="line">            state.count--</span><br><span class="line">        &#125;,</span><br><span class="line">        setActiveName(state,name)&#123; <span class="comment">//修改方法</span></span><br><span class="line">            state.activeName = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>
<p><em>以上代码你可以直接复制粘贴自己跑一下试试！</em></p>
<p>或者直接clone我的代码 <a href="https://github.com/hutaoao/vue_study" target="_blank" rel="noopener">https://github.com/hutaoao/vue_study</a><br>代码里面包含父子组件传值、路由嵌套重定向等。</p>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转ES6</title>
    <url>/ES6/</url>
    <content><![CDATA[<p><strong>ECMAScript 6.0</strong>（以下简称 <strong>ES6</strong>）是 <strong>JavaScript</strong> 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 <strong>JavaScript</strong> 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。所以我们现在赶紧来一起学习吧。<br><a id="more"></a></p>
<!-- 简介及开发环境 -->
<h2 id="ES6-简介"><a href="#ES6-简介" class="headerlink" title="ES6 简介"></a>ES6 简介</h2><h3 id="ECMAScript-和-JavaScript-的关系"><a href="#ECMAScript-和-JavaScript-的关系" class="headerlink" title="ECMAScript 和 JavaScript 的关系"></a>ECMAScript 和 JavaScript 的关系</h3><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p>
<p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p>
<p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p>
<p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。</p>
<h3 id="ES6-与-ECMAScript-2015-的关系"><a href="#ES6-与-ECMAScript-2015-的关系" class="headerlink" title="ES6 与 ECMAScript 2015 的关系"></a>ES6 与 ECMAScript 2015 的关系</h3><p>ECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？</p>
<p>2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。</p>
<p>但是，因为这个版本引入的语法功能太多，而且制定过程当中，还有很多组织和个人不断提交新功能。事情很快就变得清楚了，不可能在一个版本里面包括所有将要引入的功能。常规的做法是先发布 6.0 版，过一段时间再发 6.1 版，然后是 6.2 版、6.3 版等等。</p>
<p>但是，标准的制定者不想这样做。他们想让标准的升级成为常规流程：任何人在任何时候，都可以向标准委员会提交新语法的提案，然后标准委员会每个月开一次会，评估这些提案是否可以接受，需要哪些改进。如果经过多次会议以后，一个提案足够成熟了，就可以正式进入标准了。这就是说，标准的版本升级成为了一个不断滚动的流程，每个月都会有变动。</p>
<p>标准委员会最终决定，标准在每年的 6 月份正式发布一次，作为当年的正式版本。接下来的时间，就在这个版本的基础上做改动，直到下一年的 6 月份，草案就自然变成了新一年的版本。这样一来，就不需要以前的版本号了，只要用年份标记就可以了。</p>
<p>ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小（只新增了数组实例的includes方法和指数运算符），基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p>
<p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p>
<h3 id="语法提案的批准流程"><a href="#语法提案的批准流程" class="headerlink" title="语法提案的批准流程"></a>语法提案的批准流程</h3><p>任何人都可以向标准委员会（又称 TC39 委员会）提案，要求修改语言标准。</p>
<p>一种新的语法从提案到变成正式标准，需要经历五个阶段。每个阶段的变动都需要由 TC39 委员会批准。</p>
<p>Stage 0 - Strawman（展示阶段）<br>Stage 1 - Proposal（征求意见阶段）<br>Stage 2 - Draft（草案阶段）<br>Stage 3 - Candidate（候选人阶段）<br>Stage 4 - Finished（定案阶段）<br>一个提案只要能进入 Stage 2，就差不多肯定会包括在以后的正式标准里面。ECMAScript 当前的所有提案，可以在 TC39 的官方网站GitHub.com/tc39/ecma262查看。</p>
<p>本书的写作目标之一，是跟踪 ECMAScript 语言的最新进展，介绍 5.1 版本以后所有的新语法。对于那些明确或很有希望，将要列入标准的新语法，都将予以介绍。</p>
<h3 id="ECMAScript-的历史"><a href="#ECMAScript-的历史" class="headerlink" title="ECMAScript 的历史"></a>ECMAScript 的历史</h3><p>ES6 从开始制定到最后发布，整整用了 15 年。</p>
<p>前面提到，ECMAScript 1.0 是 1997 年发布的，接下来的两年，连续发布了 ECMAScript 2.0（1998 年 6 月）和 ECMAScript 3.0（1999 年 12 月）。3.0 版是一个巨大的成功，在业界得到广泛支持，成为通行标准，奠定了 JavaScript 语言的基本语法，以后的版本完全继承。直到今天，初学者一开始学习 JavaScript，其实就是在学 3.0 版的语法。</p>
<p>2000 年，ECMAScript 4.0 开始酝酿。这个版本最后没有通过，但是它的大部分内容被 ES6 继承了。因此，ES6 制定的起点其实是 2000 年。</p>
<p>为什么 ES4 没有通过呢？因为这个版本太激进了，对 ES3 做了彻底升级，导致标准委员会的一些成员不愿意接受。ECMA 的第 39 号技术专家委员会（Technical Committee 39，简称 TC39）负责制订 ECMAScript 标准，成员包括 Microsoft、Mozilla、Google 等大公司。</p>
<p>2007 年 10 月，ECMAScript 4.0 版草案发布，本来预计次年 8 月发布正式版本。但是，各方对于是否通过这个标准，发生了严重分歧。以 Yahoo、Microsoft、Google 为首的大公司，反对 JavaScript 的大幅升级，主张小幅改动；以 JavaScript 创造者 Brendan Eich 为首的 Mozilla 公司，则坚持当前的草案。</p>
<p>2008 年 7 月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激烈，ECMA 开会决定，中止 ECMAScript 4.0 的开发，将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。</p>
<p>2009 年 12 月，ECMAScript 5.0 版正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为 JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视为 JavaScript.next.next，在更远的将来再考虑推出。TC39 委员会的总体考虑是，ES5 与 ES3 基本保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是 ES6，第六版发布以后，就指 ES7。TC39 的判断是，ES5 会在 2013 年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。</p>
<p>2011 年 6 月，ECMAScript 5.1 版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。</p>
<p>2013 年 3 月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。</p>
<p>2013 年 12 月，ECMAScript 6 草案发布。然后是 12 个月的讨论期，听取各方反馈。</p>
<p>2015 年 6 月，ECMAScript 6 正式通过，成为国际标准。从 2000 年算起，这时已经过去了 15 年。</p>
<h2 id="ES6的开发环境搭建"><a href="#ES6的开发环境搭建" class="headerlink" title="ES6的开发环境搭建"></a>ES6的开发环境搭建</h2><h3 id="建立工程目录"><a href="#建立工程目录" class="headerlink" title="建立工程目录"></a>建立工程目录</h3><p>先建立一个项目的工程目录，并在目录下边建立两个文件夹：src和dist</p>
<ul>
<li>src：书写ES6代码的文件夹，写的js程序都放在这里。</li>
<li>dist：利用Babel编译成的ES5代码的文件夹，在HTML页面需要引入的时这里的js文件。</li>
</ul>
<h3 id="编写index-html"><a href="#编写index-html" class="headerlink" title="编写index.html"></a>编写index.html</h3><p>文件夹建立好后，我们新建一个index.html文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        Hello ECMA Script 6</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是在引入js文件时，引入的是dist目录下的文件。</p>
<p><code>&lt;script src=&quot;./dist/index.js&quot;&gt;&lt;/script&gt;</code></p>
<h3 id="编写index-js"><a href="#编写index-js" class="headerlink" title="编写index.js"></a>编写index.js</h3><p>在src目录下，新建index.js文件。这个文件很简单，我们只作一个a变量的声明，并用console.log()打印出来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>
<p>我们用了<strong>let</strong>声明，这里let是ES6的一种声明方式，接下来我们需要把这个ES6的语法文件自动编程成ES5的语法文件。</p>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>在安装Babel之前，需要用<strong>npm init</strong>先初始化我们的项目。打开终端或者通过cmd打开命令行工具，进入项目目录，输入下边的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<p><strong>-y</strong>代表全部默认同意，就不用一次次按回车了。命令执行完成后，会在项目根目录下生产<strong>package.json</strong>文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"es6"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以根据自己的需要进行修改，比如我们修改name的值。</p>
<h3 id="全局安装Babel-cli"><a href="#全局安装Babel-cli" class="headerlink" title="全局安装Babel-cli"></a>全局安装Babel-cli</h3><p>在终端中输入以下命令,如果你安装很慢的话，可以使用淘宝镜像的<strong>cnpm</strong>来进行安装。安装cnpm的方法，大家自己百度吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure>
<p>虽然已经安装了<strong>babel-cli</strong>，只是这样还不能成功进行转换，如果你不相信可以输入下边的命令试一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">babel src/index.js -o dist/index.js</span><br></pre></td></tr></table></figure>
<p>你会发现，在dist目录下确实生产了index.js文件，但是文件并没有变化，还是使用了ES6的语法。因为我们还需要安装转换包才能成功转换，继续往下看吧。</p>
<h3 id="本地安装babel-preset-es2015-和-babel-cli"><a href="#本地安装babel-preset-es2015-和-babel-cli" class="headerlink" title="本地安装babel-preset-es2015 和 babel-cli"></a>本地安装<strong>babel-preset-es2015</strong> 和 <strong>babel-cli</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015 babel-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后，我们可以看一下我们的package.json文件，已经多了<strong>devDependencies</strong>选项。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">    "babel-cli": "^6.24.1",</span><br><span class="line">    "babel-preset-es2015": "^6.24.1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="新建-babelrc新建-babelrc"><a href="#新建-babelrc新建-babelrc" class="headerlink" title="新建.babelrc新建.babelrc"></a>新建.babelrc新建.babelrc</h3><p>在根目录下新建<strong>.babelrc</strong>文件，并打开录入下面的代码</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>:[</span><br><span class="line">        <span class="string">"es2015"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个文件我们建立完成后，现在可以在终端输入的转换命令了，这次ES6成功转化为ES5的语法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">babel src/index.js -o dist/index.js</span><br></pre></td></tr></table></figure>
<h3 id="简化转化命令"><a href="#简化转化命令" class="headerlink" title="简化转化命令"></a>简化转化命令</h3><p>在学习vue 的时候，可以使用npm run build 直接利用webpack进行打包，在这里也希望利用这种方式完成转换。打开package.json文件，把文件修改成下面的样子。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"es6"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"babel src/index.js -o dist/index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改好后，以后我们就可以使用 <strong>npm run build</strong> 来进行转换了。</p>
<!-- let 和 const 命令 -->
<h2 id="let-和-const-命令"><a href="#let-和-const-命令" class="headerlink" title="let 和 const 命令"></a>let 和 const 命令</h2><p><strong>ES2015(ES6)</strong> 新增加了两个重要的 JavaScript 关键字: <strong>let</strong> 和 <strong>const</strong>。</p>
<p><strong>let</strong> 声明的变量只在 <strong>let</strong> 命令所在的代码块内有效。</p>
<p><strong>const</strong> 声明一个只读的<strong>常量</strong>，一旦声明，常量的值就不能改变。</p>
<h3 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法:"></a>基本用法:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">  a   <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br><span class="line">a   <span class="comment">// 报错 ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>
<p>代码块内有效</p>
<p><strong>let</strong> 是在<strong>代码块内</strong>有效，<strong>var</strong> 是在<strong>全局范围</strong>内有效:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a  <span class="comment">// ReferenceError: a is not defined</span></span><br><span class="line">b  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>不能重复声明</p>
<p><strong>let</strong> 只能声明<strong>一次</strong>， <strong>var</strong> 可以声明<strong>多次</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line">a  <span class="comment">// Identifier 'a' has already been declared</span></span><br><span class="line">b  <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">for</span> 循环计数器很适合用 <span class="keyword">let</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出十个 10</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 0123456789</span></span><br></pre></td></tr></table></figure>
<p>变量 i 是用 var 声明的，在全局范围内有效，所以全局中只有一个变量 i, 每次循环时，setTimeout 定时器里面的 i 指的是全局变量 i ，而循环里的十个 setTimeout 是在循环结束后才执行，所以此时的 i 都是 10。</p>
<p>变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0123456789。（若每次循环的变量 j 都是重新声明的，如何知道前一个循环的值？这是因为 JavaScript 引擎内部会记住前一个循环的值）。</p>
<h4 id="不存在变量提升不存在变量提升"><a href="#不存在变量提升不存在变量提升" class="headerlink" title="不存在变量提升不存在变量提升"></a>不存在变量提升不存在变量提升</h4><p><strong>let 不存在变量提升</strong>，<strong>var 会变量提升</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">"apple"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"banana"</span>;</span><br></pre></td></tr></table></figure>
<p>变量 b 用 var 声明存在变量提升，所以当脚本开始运行的时候，b 已经存在了，但是还没有赋值，所以会输出 undefined。</p>
<p>变量 a 用 let 声明不存在变量提升，在声明变量 a 之前，a 不存在，所以会报错。</p>
<h3 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令"></a>const 命令</h3><p><strong>const </strong>声明一个<strong>只读变量</strong>，声明之后不允许改变。意味着，一但声明必须初始化，否则会报错。</p>
<h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法:"></a>基本用法:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">"3.1415926"</span>;</span><br><span class="line">PI  <span class="comment">// 3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MY_AGE;  <span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>
<h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区:"></a>暂时性死区:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> PI = <span class="string">"a"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(PI);  <span class="comment">// ReferenceError: PI is not defined</span></span><br><span class="line">  <span class="keyword">const</span> PI = <span class="string">"3.1415926"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ES6 明确规定，代码块内如果存在 <strong>let</strong> 或者 <strong>const</strong>，代码块会对这些命令声明的变量从块的开始就形成一个封闭作用域。代码块内，在声明变量 PI 之前使用它会报错。</p>
<h4 id="注意要点"><a href="#注意要点" class="headerlink" title="注意要点"></a>注意要点</h4><p>const 如何做到变量在声明初始化之后不允许改变的？其实 const 其实保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。此时，你可能已经想到，简单类型和复合类型保存值的方式是不同的。是的，对于简单类型（数值 number、字符串 string 、布尔值 boolean）,值就保存在变量指向的那个内存地址，因此 const 声明的简单类型变量等同于常量。而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了，所以使用 const 声明复杂类型对象时要慎重。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p>
<p>下面是另一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.push(<span class="string">'Hello'</span>); <span class="comment">// 可执行</span></span><br><span class="line">a.length = <span class="number">0</span>;    <span class="comment">// 可执行</span></span><br><span class="line">a = [<span class="string">'Dave'</span>];    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错。</p>
<p>如果真的想将对象冻结，应该使用<strong>Object.freeze</strong>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规模式时，下面一行不起作用；</span></span><br><span class="line"><span class="comment">// 严格模式时，该行会报错</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>
<p>上面代码中，常量foo指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。</p>
<p>除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> constantize = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach( <span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ) &#123;</span><br><span class="line">      constantize( obj[key] );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="ES6-声明变量的六种方法"><a href="#ES6-声明变量的六种方法" class="headerlink" title="ES6 声明变量的六种方法"></a>ES6 声明变量的六种方法</h3><p>ES5 只有两种声明变量的方法：<strong>var</strong>命令和<strong>function</strong>命令。ES6 除了添加<strong>let</strong>和<strong>const</strong>命令，后面章节还会提到，另外两种声明变量的方法：<strong>import</strong>命令和<strong>class</strong>命令。所以，ES6 一共有 <strong>6</strong> 种声明变量的方法。</p>
<p>想了解更多ES6变量知识，可以阅读<a href="http://es6.ruanyifeng.com/#docs/let" title="这篇文章" target="_blank" rel="noopener">这篇文章</a></p>
<!-- 变量的解构赋值 -->
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>解构赋值是对赋值运算符的扩展。</p>
<p>他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</p>
<p>在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p>
<h3 id="解构模型"><a href="#解构模型" class="headerlink" title="解构模型"></a>解构模型</h3><p>在解构中，有下面两部分参与：</p>
<p>解构的源，解构赋值表达式的右边部分。</p>
<p>解构的目标，解构赋值表达式的左边部分。</p>
<h3 id="数组模型的解构（Array）"><a href="#数组模型的解构（Array）" class="headerlink" title="数组模型的解构（Array）"></a>数组模型的解构（Array）</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// c = 3</span></span><br></pre></td></tr></table></figure>
<h4 id="可嵌套"><a href="#可嵌套" class="headerlink" title="可嵌套"></a>可嵌套</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [[b], c]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// c = 3</span></span><br></pre></td></tr></table></figure>
<h4 id="可忽略"><a href="#可忽略" class="headerlink" title="可忽略"></a>可忽略</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, , b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 3</span></span><br></pre></td></tr></table></figure>
<h4 id="不完全解构"><a href="#不完全解构" class="headerlink" title="不完全解构"></a>不完全解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>, b] = []; <span class="comment">// a = 1, b = undefined</span></span><br></pre></td></tr></table></figure>
<h4 id="剩余运算符"><a href="#剩余运算符" class="headerlink" title="剩余运算符"></a>剩余运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//a = 1</span></span><br><span class="line"><span class="comment">//b = [2, 3]</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串等"><a href="#字符串等" class="headerlink" title="字符串等"></a>字符串等</h4><p>在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值。可遍历对象即实现 <strong>Iterator</strong> 接口的数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// a = 'h'</span></span><br><span class="line"><span class="comment">// b = 'e'</span></span><br><span class="line"><span class="comment">// c = 'l'</span></span><br><span class="line"><span class="comment">// d = 'l'</span></span><br><span class="line"><span class="comment">// e = 'o'</span></span><br></pre></td></tr></table></figure>
<h4 id="解构默认值"><a href="#解构默认值" class="headerlink" title="解构默认值"></a>解构默认值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">2</span>] = [<span class="literal">undefined</span>]; <span class="comment">// a = 2</span></span><br></pre></td></tr></table></figure>
<p>当解构模式有匹配结果，且匹配结果是 <strong>undefined</strong> 时，会触发默认值作为返回结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [];     <span class="comment">// a = 3, b = 3</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>];    <span class="comment">// a = 1, b = 1</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// a = 1, b = 2</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>a 与 b 匹配结果为 undefined ，触发默认值：a = 3; b = a =3</p>
</li>
<li><p>a 正常解构赋值，匹配结果：a = 1，b 匹配结果 undefined ，触发默认值：b = a =1</p>
</li>
<li><p>a 与 b 正常解构赋值，匹配结果：a = 1，b = 2</p>
</li>
</ul>
<h3 id="对象模型的解构（Object）"><a href="#对象模型的解构（Object）" class="headerlink" title="对象模型的解构（Object）"></a>对象模型的解构（Object）</h3><h4 id="基本-1"><a href="#基本-1" class="headerlink" title="基本"></a>基本</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line"><span class="comment">// foo = 'aaa'</span></span><br><span class="line"><span class="comment">// bar = 'bbb'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">baz</span> : foo &#125; = &#123; <span class="attr">baz</span> : <span class="string">'ddd'</span> &#125;;</span><br><span class="line"><span class="comment">// foo = 'ddd'</span></span><br></pre></td></tr></table></figure>
<h4 id="可嵌套可忽略"><a href="#可嵌套可忽略" class="headerlink" title="可嵌套可忽略"></a>可嵌套可忽略</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>: [<span class="string">'hello'</span>, &#123;<span class="attr">y</span>: <span class="string">'world'</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line"><span class="comment">// x = 'hello'</span></span><br><span class="line"><span class="comment">// y = 'world'</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>: [<span class="string">'hello'</span>, &#123;<span class="attr">y</span>: <span class="string">'world'</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>: [x, &#123;  &#125;] &#125; = obj;</span><br><span class="line"><span class="comment">// x = 'hello'</span></span><br></pre></td></tr></table></figure>
<h4 id="不完全解构-1"><a href="#不完全解构-1" class="headerlink" title="不完全解构"></a>不完全解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>: [&#123;<span class="attr">y</span>: <span class="string">'world'</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>: [&#123; y &#125;, x ] &#125; = obj;</span><br><span class="line"><span class="comment">// x = undefined</span></span><br><span class="line"><span class="comment">// y = 'world'</span></span><br></pre></td></tr></table></figure>
<h4 id="剩余运算符-1"><a href="#剩余运算符-1" class="headerlink" title="剩余运算符"></a>剩余运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;;</span><br><span class="line"><span class="comment">// a = 10</span></span><br><span class="line"><span class="comment">// b = 20</span></span><br><span class="line"><span class="comment">// rest = &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="解构默认值-1"><a href="#解构默认值-1" class="headerlink" title="解构默认值"></a>解构默认值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a = <span class="number">10</span>, b = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// a = 3; b = 5;</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: aa = <span class="number">10</span>, <span class="attr">b</span>: bb = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// aa = 3; bb = 5;</span></span><br></pre></td></tr></table></figure>
<p>更新中……</p>
]]></content>
      <categories>
        <category>ECMAScript 6.0</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>前端解决跨域的九种方法</title>
    <url>/cross-domain/</url>
    <content><![CDATA[<h3 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h3><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。<br><a id="more"></a></p>
<h4 id="广义的跨域："><a href="#广义的跨域：" class="headerlink" title="广义的跨域："></a>广义的跨域：</h4><p>1、资源跳转：A链接、重定向、表单提交<br>2、资源嵌入： &#60;link&#62;、&#60;script&#62;、&#60;img&#62;、&#60;frame&#62;等dom标签，还有样式中background:url()、@font-face()等文件外链<br>3、脚本请求： js发起的ajax请求、dom和js对象的跨域操作等<br>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</p>
<h4 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h4><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。<br>同源策略限制以下几种行为：<br>1、Cookie、LocalStorage 和 IndexDB 无法读取2、 DOM 和 Js对象无法获得3、 AJAX 请求不能发送</p>
<h3 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URL                                      说明                    是否允许通信</span><br><span class="line">http://www.demo.com/a.js</span><br><span class="line">http://www.demo.com/b.js         同一域名，不同文件或路径           允许</span><br><span class="line">http://www.demo.com/lab/c.js</span><br><span class="line">http://www.demo.com:8000/a.js</span><br><span class="line">http://www.demo.com/b.js         同一域名，不同端口                不允许 </span><br><span class="line">http://www.demo.com/a.js</span><br><span class="line">https://www.demo.com/b.js        同一域名，不同协议                不允许 </span><br><span class="line">http://www.demo.com/a.js</span><br><span class="line">http://127.0.0.1/b.js           域名和域名对应相同ip              不允许 </span><br><span class="line">http://www.demo.com/a.js</span><br><span class="line">http://x.demo.com/b.js           主域相同，子域不同                不允许</span><br><span class="line">http://demo.com/c.js </span><br><span class="line">http://www.demo1.com/a.js</span><br><span class="line">http://www.demo2.com/b.js        不同域名                         不允许</span><br></pre></td></tr></table></figure>
<h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><p>1、 通过jsonp跨域<br>2、 document.domain + iframe跨域<br>3、 location.hash + iframe<br>4、 window.name + iframe跨域<br>5、 postMessage跨域<br>6、 跨域资源共享（CORS）<br>7、 nginx代理跨域<br>8、 nodejs中间件代理跨域<br>9、 WebSocket协议跨域</p>
<h4 id="一、-通过jsonp跨域"><a href="#一、-通过jsonp跨域" class="headerlink" title="一、 通过jsonp跨域"></a>一、 通过jsonp跨域</h4><p>通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。<br>1.）原生实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传参并指定回调执行函数为onBack</span></span><br><span class="line">    script.src = <span class="string">'http://www.demo2.com:8080/login?user=admin&amp;callback=onBack'</span>;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调执行函数    </span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">onBack</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>服务端返回如下（返回时即执行全局函数）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onBack(&#123;<span class="string">"status"</span>: <span class="literal">true</span>, <span class="string">"user"</span>: <span class="string">"admin"</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>2.）jquery ajax：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://www.demo2.com:8080/login'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">"onBack"</span>,    <span class="comment">// 自定义回调函数名    data: &#123;&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>3.）vue.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(<span class="string">'http://www.demo2.com:8080/login'</span>, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">'onBack'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>后端node.js代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);<span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.split(<span class="string">'?'</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> fn = params.callback;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jsonp返回设置</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span> &#125;);</span><br><span class="line">    res.write(fn + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(params) + <span class="string">')'</span>);</span><br><span class="line"></span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>
<p>jsonp缺点：只能实现get一种请求。</p>
<h4 id="二、-document-domain-iframe跨域"><a href="#二、-document-domain-iframe跨域" class="headerlink" title="二、 document.domain + iframe跨域"></a>二、 document.domain + iframe跨域</h4><p>此方案仅限主域相同，子域不同的跨域应用场景。<br>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。<br>1.）父窗口(<a href="http://www.demo.com/a.html" target="_blank" rel="noopener">http://www.demo.com/a.html</a>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://child.demo.com/b.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'demo.com'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> user = <span class="string">'admin'</span>;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br></pre></td></tr></table></figure>
<p>1.）子窗口：(<a href="http://child.demo.com/b.html" target="_blank" rel="noopener">http://child.demo.com/b.html</a>)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.domain = <span class="string">'demo.com'</span>;</span><br><span class="line">    <span class="comment">// 获取父窗口中变量</span></span><br><span class="line">    alert(<span class="string">'get js data from parent ---&gt; '</span> + <span class="built_in">window</span>.parent.user);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="三、-location-hash-iframe跨域"><a href="#三、-location-hash-iframe跨域" class="headerlink" title="三、 location.hash + iframe跨域"></a>三、 location.hash + iframe跨域</h4><p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。<br>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。<br>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。<br>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。<br>1.）a.html：(<a href="http://www.demo1.com/a.html" target="_blank" rel="noopener">http://www.demo1.com/a.html</a>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://www.demo2.com/b.html"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 向b.html传hash值    setTimeout(function() &#123;</span></span></span><br><span class="line"><span class="javascript">        iframe.src = iframe.src + <span class="string">'#user=admin'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;, 1000);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 开放给同域c.html的回调方法    function onCallback(res) &#123;</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'data from c.html ---&gt; '</span> + res);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.）b.html：(<a href="http://www.demo2.com/b.html" target="_blank" rel="noopener">http://www.demo2.com/b.html</a>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://www.demo1.com/c.html"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听a.html传来的hash值，再传给c.html</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        iframe.src = iframe.src + location.hash;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.）c.html：(<a href="http://www.demo1.com/c.html" target="_blank" rel="noopener">http://www.demo1.com/c.html</a>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 监听b.html传来的hash值</span></span><br><span class="line">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 再通过操作同域a.html的js回调，将结果传回</span></span><br><span class="line">        <span class="built_in">window</span>.parent.parent.onCallback(<span class="string">'hello: '</span> + location.hash.replace(<span class="string">'#user='</span>, <span class="string">''</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="四、-window-name-iframe跨域"><a href="#四、-window-name-iframe跨域" class="headerlink" title="四、 window.name + iframe跨域"></a>四、 window.name + iframe跨域</h4><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。<br>1.）a.html：(<a href="http://www.demo1.com/a.html" target="_blank" rel="noopener">http://www.demo1.com/a.html</a>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="function"><span class="keyword">function</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> state = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载跨域页面</span></span><br><span class="line">    iframe.src = url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 第2次onload(同域proxy页)成功后，读取同域window.name中数据            callback(iframe.contentWindow.name);</span></span><br><span class="line">            destoryFrame();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line">            iframe.contentWindow.location = <span class="string">'http://www.demo1.com/proxy.html'</span>;</span><br><span class="line">            state = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）    function destoryFrame() &#123;</span></span><br><span class="line">        iframe.contentWindow.document.write(<span class="string">''</span>);</span><br><span class="line">        iframe.contentWindow.close();</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 请求跨域b页面数据</span></span><br><span class="line">proxy(<span class="string">'http://www.demo2.com/b.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    alert(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.）proxy.html：(http://www.demo1.com/proxy....</span></span><br><span class="line"><span class="string">中间代理页，与a.html同域，内容为空即可。</span></span><br><span class="line"><span class="string">3.）b.html：(http://www.demo2.com/b.html)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.name = <span class="string">'This is demo2 data!'</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>
<h4 id="五、-postMessage跨域"><a href="#五、-postMessage跨域" class="headerlink" title="五、 postMessage跨域"></a>五、 postMessage跨域</h4><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：<br>a.） 页面和其打开的新窗口的数据传递<br>b.） 多窗口之间消息传递<br>c.） 页面与嵌套的iframe消息传递<br>d.） 上面三个场景的跨域数据传递<br>用法：postMessage(data,origin)方法接受两个参数<br>data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。<br>origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。<br>1.）a.html：(<a href="http://www.demo1.com/a.html" target="_blank" rel="noopener">http://www.demo1.com/a.html</a>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://www.demo2.com/b.html"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">       </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">'aym'</span></span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 向domain2传送跨域数据</span></span></span><br><span class="line"><span class="javascript">        iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.demo2.com'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 接受domain2返回数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'data from demo2 ---&gt; '</span> + e.data);</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.）b.html：(<a href="http://www.demo2.com/b.html" target="_blank" rel="noopener">http://www.demo2.com/b.html</a>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 接收domain1的数据</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'data from demo1 ---&gt; '</span> + e.data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data);</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            data.number = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理后再发回domain1</span></span><br><span class="line">            <span class="built_in">window</span>.parent.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.demo1.com'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="六、-跨域资源共享（CORS）"><a href="#六、-跨域资源共享（CORS）" class="headerlink" title="六、 跨域资源共享（CORS）"></a>六、 跨域资源共享（CORS）</h4><p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。<br>需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。<br>目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。<br>1、 前端设置：<br>1.）原生ajax</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">示例代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'http://www.demo2.com:8080/login'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">xhr.send(<span class="string">'user=admin'</span>);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>2.）jQuery ajax</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie   &#125;,</span></span><br><span class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie    ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>3.）vue框架<br>在vue-resource封装的ajax组件中加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.http.options.credentials = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>2、 服务端设置：<br>若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。<br>1.）PHP后台：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://www.domain1.com"</span>);  <span class="comment">// 若有端口需写全（协议+域名+端口）</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure>
<p>2.）Nodejs后台示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ar http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="keyword">var</span> server = http.createServer();<span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据块接收中</span></span><br><span class="line">    req.addListener(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        postData += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据接收完毕</span></span><br><span class="line">    req.addListener(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        postData = qs.parse(postData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨域后台设置</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">'Access-Control-Allow-Credentials'</span>: <span class="string">'true'</span>,     <span class="comment">// 后端允许发送Cookie</span></span><br><span class="line">            <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'http://www.demo1.com'</span>,    <span class="comment">// 允许访问的域（协议+域名+端口）</span></span><br><span class="line">            <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.demo2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取cookie        &#125;);</span></span><br><span class="line"></span><br><span class="line">        res.write(<span class="built_in">JSON</span>.stringify(postData));</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>
<h4 id="七、-Nodejs中间件代理跨域"><a href="#七、-Nodejs中间件代理跨域" class="headerlink" title="七、 Nodejs中间件代理跨域"></a>七、 Nodejs中间件代理跨域</h4><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。<br>1、 非vue框架的跨域（2次跨域）<br>利用node + express + http-proxy-middleware搭建一个proxy服务器。<br>1.）前端代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 访问http-proxy-middleware代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.demo1.com:3000/login?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
<p>2.）中间件服务器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);<span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);<span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, proxy(&#123;</span><br><span class="line">    <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">    target: <span class="string">'http://www.demo2.com:8080'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应头信息，实现跨域并允许带cookie    onProxyRes: function(proxyRes, req, res) &#123;</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://www.domain1.com'</span>);</span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="string">'true'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应信息中的cookie域名</span></span><br><span class="line">    cookieDomainRewrite: <span class="string">'www.demo1.com'</span>  <span class="comment">// 可以为false，表示不修改&#125;));</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Proxy server is listen at port 3000...'</span>);</span><br></pre></td></tr></table></figure>
<p>3.）Nodejs后台</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ar http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="keyword">var</span> server = http.createServer();<span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.demo2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取    &#125;);</span></span><br><span class="line"></span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>
<p>2、 vue框架的跨域（1次跨域）<br>利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。<br>webpack.config.js部分配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;&#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        proxy: [&#123;</span><br><span class="line">            context: <span class="string">'/login'</span>,</span><br><span class="line">            target: <span class="string">'http://www.demo2.com:8080'</span>,  <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>,</span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 当代理某些https服务报错时用</span></span><br><span class="line">            cookieDomainRewrite: <span class="string">'www.demo1.com'</span>  <span class="comment">// 可以为false，表示不修改        &#125;],</span></span><br><span class="line">        noInfo: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="八、-WebSocket协议跨域"><a href="#八、-WebSocket协议跨域" class="headerlink" title="八、 WebSocket协议跨域"></a>八、 WebSocket协议跨域</h4><p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。<br>原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。<br>1.）前端代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;user input：&lt;input type=<span class="string">"text"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"./socket.io.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;<span class="keyword">var</span> socket = io(<span class="string">'http://www.demo2.com:8080'</span>);</span><br><span class="line"><span class="comment">// 连接成功处理</span></span><br><span class="line">socket.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 监听服务端消息</span></span><br><span class="line">    socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'data from server: ---&gt; '</span> + msg); </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听服务端关闭</span></span><br><span class="line">    socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Server socket has closed.'</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    socket.send(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.）Nodejs socket后台：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 启http服务var server = http.createServer(function(req, res) &#123;</span><br><span class="line">    res.writeHead(200, &#123;</span><br><span class="line">        &apos;Content-type&apos;: &apos;text/html&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(&apos;8080&apos;);</span><br><span class="line">console.log(&apos;Server is running at port 8080...&apos;);</span><br><span class="line">// 监听socket连接</span><br><span class="line">socket.listen(server).on(&apos;connection&apos;, function(client) &#123;</span><br><span class="line">    // 接收信息</span><br><span class="line">    client.on(&apos;message&apos;, function(msg) &#123;</span><br><span class="line">        client.send(&apos;hello：&apos; + msg);</span><br><span class="line">        console.log(&apos;data from client: ---&gt; &apos; + msg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 断开处理</span><br><span class="line">    client.on(&apos;disconnect&apos;, function() &#123;</span><br><span class="line">        console.log(&apos;Client socket has closed.&apos;); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="九、-nginx代理跨域1、-nginx配置解决iconfont跨域"><a href="#九、-nginx代理跨域1、-nginx配置解决iconfont跨域" class="headerlink" title="九、 nginx代理跨域1、 nginx配置解决iconfont跨域"></a>九、 nginx代理跨域1、 nginx配置解决iconfont跨域</h4><p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  add_header Access-Control-Allow-Origin *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、 nginx反向代理接口跨域<br>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。<br>实现思路：通过nginx配置一个代理服务器（域名与demo1相同，端口不同）做跳板机，反向代理访问demo2接口，并且可以顺便修改cookie中demo信息，方便当前域cookie写入，实现跨域登录。<br>nginx具体配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#proxy服务器</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.demo1.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://www.demo2.com:8080;  <span class="comment">#反向代理        proxy_cookie_demo www.demo2.com www.demo1.com; #修改cookie里域名</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin http://www.demo1.com;  <span class="comment">#当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.) 前端代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.demo1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
<p>2.) Nodejs后台示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="keyword">var</span> server = http.createServer();<span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.demo2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取    &#125;);</span></span><br><span class="line"></span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发整合</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
</search>
